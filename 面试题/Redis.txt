一、Redis
	1. 安装 Redis
		① 官网地址：https://redis.io/
		② 中文官网地址：http://www.redis.cn
		③ 查看 redis 版本
			A. 使用 redis-server -v 命令
			B. 连接 redis 后，使用 info 命令
二、redis 传统五大数据类型的落地应用
	1. 官网命令大全：http://www.redis.cn/commands.html
	2. 八大类型
		① String（字符串类型）
		② Hash（散列类型）
		③ List（列表类型）
		④ Set（集合类型）
		⑤ SortedSet（有序集合类型，简称 ZSet）
		⑥ BitMap（位图）
		⑦ HyperLogLog（统计）
		⑧ GEO（地理）
	3. 备注
		① 命令不区分大小写，而 Key 是区分大小写
		② help @类型名词
	4. String
		① 最常用
			A. set key value
			B. get key
		② 同时设置/获取多个值
			A. mset key value [key value ...]
			B. mget key [key ...]
		③ 数值增减
			A. 递增数字：incr key
			B. 增加指定的整数:incrby key increment
			C. 递减数值：decr key
			D. 减少指定的整数：decrby key decrement
		④ 获取字符串长度：strlen key
		⑤ 分布式锁
			A. setnx key value
			B. set key value [EX seconds] [PX milliseconds] [NX|XX]
				a. EX seconds：设置键key的过期时间，单位时秒
				b. PX milliseconds：设置键key的过期时间，单位时毫秒
				c. NX：只有键key不存在的时候才会设置key的值，效果等同于 setnx
				d. XX：只有键key存在的时候才会设置key的值
		⑥ 应用场景
			A. 订单编号、商品编号采用 incr 命令生成
			B. 阅读人数、点赞数
	5. hash
		① Map<String, Map<Object, Object>>
		② 一次设置一个字段值：hset key field value
		③ 一次获取一个字段值：hget key field
		④ 一次设置多个字段值：hmset key field value [field value ...]
		⑤ 一次获取多个字段值：hmget key field [field ...]
		⑥ 获取所有字段值：hgetall key
		⑦ 获取某个 key 内的全部数量：hlen key
		⑧ 删除一个 field：hdel key field
		⑨ 应用场景
			A. 购物车
				a. 新增商品：hset shopcar:uid26 2648 1
				b. 新增商品：hset shopcar:uid26 2649 1
				c. 增加商品数量：hincrby shopcar:uid26 2648 1
				d. 商品总数：hlen shopcar:uid26
				e. 全部选择：hgetall shopcar:uid26
	6. list
		① 向列表左边添加元素：lpush key element [element ...]
		② 向列表右边添加元素：rpush key element [element ...]
		③ 查看列表：lrange key start stop
		④ 获取列表中元素的个数：llen key
		⑤ 应用场景：
			A. 微信公众号
				a. 关注了多个公众号：lpush likeauthor:uid26 1 2
				b. 显示所有公众号的列表：lrange likeauthor:uid26 0 -1
	7. set
		① 添加元素：sadd key member [member ...]
		② 删除元素：srem key member [member ...]
		③ 获取集合中的所有元素：smembers key 
		④ 判断元素是否在集合中：sismember key member
		⑤ 获取集合中的元素个数：scard key
		⑥ 从集合中随机弹出一个元素，元素不删除：srandmember key [count]
		⑦ 从集合中随机弹出一个元素，并删除：spop key [count]
		⑧ 集合运算
			A. 集合的差集运算 A-B
				a. 属于 A 但不属于 B 的元素构成的集合
				b. sdiff key [key ...]
			B. 集合的交集运算 A & B
				a. 属于 A 同时也属于 B 的共同拥有的元素构成的集合
				b. sinter key [key ...]
			C. 集合的并集运算 A | B 
				a. 属于 A 或者 属于 B 的元素合并后的集合
				b. sunion key [key ...]
		⑨ 应用场景
			A. 微信抽奖小程序
				a. 用户ID，点击立即参与按钮：sadd choujiang:cjuid26 用户ID
				b. 显示已经有多少人参与了：scard choujiang:cjuid26
				c. 抽奖，从 set 中任意选取 N 个中将人：spop choujiang:cjuid26 [count]
			B. 微信朋友圈点赞
				a. 新增点赞：sadd pub:msgID26 用户ID1 用户ID2
				b. 取消点赞：srem pub:msgID26 用户ID1
				c. 展示所有点赞过的用户：smembers pub:msgID26
				d. 点赞用户数统计：scard pub:msgID26
				e. 判断某个好友是否对楼主点赞：sismember pub:msgID26 用户ID
			C. 微博好友关注社交关系
				a. 共同关注的人：sinter 用户ID1集合 用户ID2集合
				b. 我关注的人也关注他：sismember 用户ID1集合 用户ID
			D. QQ 内推可能认识的人：sdiff 用户ID1集合 用户ID2集合
	8.  zset
		① 向有序集合中加入一个元素和该元素的分数：zadd key score member [score member ...]
		② 按照元素分数从小到大的顺序，返回索引从 strat 到 stop 之间的所有元素：zrange key min max [WITHSCORES]
		③ 获取元素分数：zscore key member
		④ 删除元素：zrem key member [member ...]
		⑤ 获取指定分数范围的元素：zrangebyscore key min max [WITHSCORES]
		⑥ 增加某个元素的分数：zincrby key increment member
		⑦ 获取集合中元素的数量：zcard key
		⑧ 获取指定分数范围内的元素个数：zcount key min max
		⑨ 按照排名范围删除元素：zremrangebyrank key start stop
		⑩ 获取元素的排名
			A. 从小到大：zrank key member
			B. 从大到小：zrevrank key member
		应用场景
			A. 根据商品销售对商品进行排序显示
				a. 思路：定义商品销售排行榜（sorted set 集合），key 为 goods:sellsort，分数为商品的销售数量
				b. 商品编号 1001 的销量是 9，商品编号 1002 的销量是 15
					zadd goods:sellsort 9 1001 15 1002
				c. 有一个客户买了 2 件 商品 1001，商品编号 1001 销量增加 2
					zincrby goods:sellsort 2 1001
				d. 求商品销量前 10 名
					zrange goods:sellsort 0 10 WITHSCORES
			B. 抖音热搜
三、分布式锁
	1. 面试题
		① 知道分布式锁吗
		② 有哪些实现方案，mysql、zk、redis
		③ 谈谈对 redis 分布式锁的理解
		④ 删 key 时有什么问题
		⑤ redis 除了拿来做缓存，还见过基于 redis 的什么用法
		⑤ Redis 做分布式锁的时候需要注意什么问题
		⑥ 如果是 Redis 是单点部署，会带来什么问题
		⑦ 简单介绍一下 Redlock
		⑧ 集群模式下，比如主从模式，有没有什么问题
		⑨ redis 分布式锁如何续期，看门狗知道吗
	2. 超卖程序
		① 代码
			A. 新建两个 Module boot-redis1 和 boot-redis2
			B. 改 POM
				<dependencies>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-web</artifactId>
					</dependency>

					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-test</artifactId>
						<scope>test</scope>
						<exclusions>
							<exclusion>
								<groupId>org.junit.vintage</groupId>
								<artifactId>junit-vintage-engine</artifactId>
							</exclusion>
						</exclusions>
					</dependency>

					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-data-redis</artifactId>
					</dependency>
				</dependencies>

				<dependencyManagement>
					<dependencies>
						<dependency>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-dependencies</artifactId>
							<version>${spring-boot.version}</version>
							<type>pom</type>
							<scope>import</scope>
						</dependency>
					</dependencies>
				</dependencyManagement>
			C. 写 YML
				server:
				  port: 2648

				spring:
				  redis:
					host: 192.168.26.48
			D. 主启动
			E. 写配置
				@Configuration
				public class RedisConfig {

					@Bean
					public RedisTemplate<String, Serializable> redisTemplate(LettuceConnectionFactory connectionFactory) {
						RedisTemplate<String, Serializable> redisTemplate = new RedisTemplate<>();
						redisTemplate.setConnectionFactory(connectionFactory);

						redisTemplate.setKeySerializer(new StringRedisSerializer());
						redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());
						return redisTemplate;
					}
				}
			F. 业务类
				@RestController
				public class GoodsController {

					@Autowired
					private StringRedisTemplate stringRedisTemplate;

					@Value("${server.port}")
					private int serverPort;

					private static final String KEY = "goods:1000";

					@GetMapping("sellGoods")
					public String sellGoods() {
						String result = stringRedisTemplate.opsForValue().get(KEY);
						int goodsNum = result == null ? 0 : Integer.parseInt(result);
						if (goodsNum > 0) {
							int realNum = goodsNum - 1;
							stringRedisTemplate.opsForValue().set(KEY, String.valueOf(realNum));
							System.out.println("秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort);
							return "秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort;
						} else {
							System.out.println("秒杀失败，服务提供端口：" + serverPort);
							return "秒杀失败，服务提供端口：" + serverPort;
						}
					}
				}
		② 问题一：单机版没有加锁
			A. 问题：没有加锁，并发数字不对，出现超卖现象
			B. 思考
				a. 加 synchronized
				b. 加 ReentrantLock
				c. 分析
					(1) synchronized（不见不散）：在高并发环境下，每个线程如果获取不到锁，则会进入等待，造成线程积压严重
					(2) ReentrantLock（过时不候）：可以让线程执行尝试获取锁，如果获取不到则返回或者重新获取锁（自旋），或者尝试获取锁，等待多少时间后返回
				d. 代码
					@RestController
						public class GoodsController {

							@Autowired
							private StringRedisTemplate stringRedisTemplate;

							@Value("${server.port}")
							private int serverPort;

							private static final String KEY = "goods:1000";

							@GetMapping("sellGoods")
							public String sellGoods() {
								synchronized (this) {
									String result = stringRedisTemplate.opsForValue().get(KEY);
									int goodsNum = result == null ? 0 : Integer.parseInt(result);
									if (goodsNum > 0) {
										int realNum = goodsNum - 1;
										stringRedisTemplate.opsForValue().set(KEY, String.valueOf(realNum));
										System.out.println("秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort);
										return "秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort;
									} else {
										System.out.println("秒杀失败，服务提供端口：" + serverPort);
										return "秒杀失败，服务提供端口：" + serverPort;
									}
								}
							}
						}
		③ 问题二：nginx 分布式微服务架构
			A. 问题
				a. 分布式部署后，单机锁还是出现超卖现象，需要分布式锁
			B. 解决：
				a. 使用 redis 分布式锁 setnx：Redis 具有极高的性能，且其命令对分布式锁支持友好，借助 set 命令即可实现加锁处理
				b. 代码
					@RestController
					public class GoodsController {

						@Autowired
						private StringRedisTemplate stringRedisTemplate;

						@Value("${server.port}")
						private int serverPort;

						private static final String KEY = "goods:1000";

						public static final String REDIS_LOCK = "lock";

						@GetMapping("sellGoods")
						public String sellGoods() {
							Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, 1);
							if (!lock) {
								System.out.println("秒杀失败");
								return "秒杀失败";
							}
							String result = stringRedisTemplate.opsForValue().get(KEY);
							int goodsNum = result == null ? 0 : Integer.parseInt(result);
							if (goodsNum > 0) {
								int realNum = goodsNum - 1;
								stringRedisTemplate.opsForValue().set(KEY, String.valueOf(realNum));
								stringRedisTemplate.delete(REDIS_LOCK);
								System.out.println("秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort);
								return "秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort;
							} else {
								System.out.println("秒杀失败，服务提供端口：" + serverPort);
								return "秒杀失败，服务提供端口：" + serverPort;
							}
						}
					}
		④ 问题三：
			A. 问题：出异常的话，可能无法释放锁，必须要在代码层面 finally 释放锁
			B. 解决：加锁解锁，必须同时存在并保证调用
				public String sellGoods() {
					Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, 1);
					try {
						if (!lock) {
							System.out.println("秒杀失败");
							return "秒杀失败";
						}
						String result = stringRedisTemplate.opsForValue().get(KEY);
						int goodsNum = result == null ? 0 : Integer.parseInt(result);
						if (goodsNum > 0) {
							int realNum = goodsNum - 1;
							stringRedisTemplate.opsForValue().set(KEY, String.valueOf(realNum));
							System.out.println("秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort);
							return "秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort;
						} else {
							System.out.println("秒杀失败，服务提供端口：" + serverPort);
							return "秒杀失败，服务提供端口：" + serverPort;
						}
					} finally {
						stringRedisTemplate.delete(REDIS_LOCK);
					}
				}
		⑤ 问题四：
			A. 问题：部署了微服务 jar 包的机器宕机了，代码层面根本没有走到 finally，没有办法保证解锁，这个锁没有被删除，需要加入一个过期时间限定
			B. 解决：
				a. 需要对锁有过期时间的设定
				b. 代码
					public String sellGoods() {
						Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, 1);
						stringRedisTemplate.expire(REDIS_LOCK, 10L, TimeUnit.SECONDS);
						try {
							if (!lock) {
								System.out.println("秒杀失败");
								return "秒杀失败";
							}
							String result = stringRedisTemplate.opsForValue().get(KEY);
							int goodsNum = result == null ? 0 : Integer.parseInt(result);
							if (goodsNum > 0) {
								int realNum = goodsNum - 1;
								stringRedisTemplate.opsForValue().set(KEY, String.valueOf(realNum));
								System.out.println("秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort);
								return "秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort;
							} else {
								System.out.println("秒杀失败，服务提供端口：" + serverPort);
								return "秒杀失败，服务提供端口：" + serverPort;
							}
						} finally {
							stringRedisTemplate.delete(REDIS_LOCK);
						}
					}
		⑥ 问题五：
			A. 问题：设置 key和过期时间分开了，必须要和在一起形成原子性
			B. 代码
				public String sellGoods() {
					Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, 1, 10L, TimeUnit.SECONDS);
					try {
						if (!lock) {
							System.out.println("秒杀失败");
							return "秒杀失败";
						}
						String result = stringRedisTemplate.opsForValue().get(KEY);
						int goodsNum = result == null ? 0 : Integer.parseInt(result);
						if (goodsNum > 0) {
							int realNum = goodsNum - 1;
							stringRedisTemplate.opsForValue().set(KEY, String.valueOf(realNum));
							System.out.println("秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort);
							return "秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort;
						} else {
							System.out.println("秒杀失败，服务提供端口：" + serverPort);
							return "秒杀失败，服务提供端口：" + serverPort;
						}
					} finally {
						stringRedisTemplate.delete(REDIS_LOCK);
					}
				}
		⑦ 问题六：
			A. 问题：由于线程执行时间超过了 key 的过期时间，导致锁释放，其他线程则成功获取锁，当上一个线程执行完成之后，执行释放锁操作，最终导致删除了其他线程的锁
			B. 解决
				a. 每个线程只能删除自己所持有的锁
				b. 代码
					@GetMapping("sellGoods")
					public String sellGoods() {
						String value = UUID.randomUUID().toString().replace("-", "");
						Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, value, 10L, TimeUnit.SECONDS);
						try {
							if (!lock) {
								System.out.println("秒杀失败");
								return "秒杀失败";
							}
							String result = stringRedisTemplate.opsForValue().get(KEY);
							int goodsNum = result == null ? 0 : Integer.parseInt(result);
							if (goodsNum > 0) {
								int realNum = goodsNum - 1;
								stringRedisTemplate.opsForValue().set(KEY, String.valueOf(realNum));
								System.out.println("秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort);
								return "秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort;
							} else {
								System.out.println("秒杀失败，服务提供端口：" + serverPort);
								return "秒杀失败，服务提供端口：" + serverPort;
							}
						} finally {
							if (value.equals(stringRedisTemplate.opsForValue().get(REDIS_LOCK))) {
								stringRedisTemplate.delete(REDIS_LOCK);
							}
						}
					}
		⑧ 问题七
			A. 问题：finally 块中的判断和删除操作不是原子性的
			B. 解决
				a. 使用事务
					finally {
						while (true) {
							stringRedisTemplate.watch(REDIS_LOCK);
							if (value.equals(stringRedisTemplate.opsForValue().get(REDIS_LOCK))) {
								stringRedisTemplate.multi();
								stringRedisTemplate.delete(REDIS_LOCK);
								List<Object> exec = stringRedisTemplate.exec();
								if (exec.size() ==0) {
									continue;
								}
							}
							stringRedisTemplate.unwatch();
							break;
						}
					}
				b. 使用 Lua 脚本
					finally {
						String script = "if redis.call(\"get\",KEYS[1]) == ARGV[1]\n" +
								"then\n" +
								"    return redis.call(\"del\",KEYS[1])\n" +
								"else\n" +
								"    return 0\n" +
								"end";
						DefaultRedisScript<Long> redisScript = new DefaultRedisScript<>(script, Long.class);
						Long result = stringRedisTemplate.execute(redisScript, Collections.singletonList(REDIS_LOCK), value);
						if (result == 1) {
							System.out.println("del redis lock ok");
						} else {
							System.out.println("del redis lock fail");
						}
					}
		⑨ 问题八
			A. 问题：
				a. 确保 redislock 过期时间大于业务执行时间
				b. Redis 分布式锁如何续期
			B. Redis 集群对比 Zookeeper
				a. Redis 集群（AP：高可用性）：redis 异步复制造成锁丢失，比如：主节点没来的及把刚刚 set 进行这条数据给从节点，就宕机了
				b. zookeeper 集群（CP：强一致性）：	zookeeper 就算主节点宕机了，但是由于强一致性，主节点与从节点之间有相同的存根，因此不会造成锁丢失
		⑩ RedLock 之 Redisson
			A. 代码
				a. POM 
					<dependency>
						<groupId>org.redisson</groupId>
						<artifactId>redisson</artifactId>
						<version>3.16.0</version>
					</dependency>
				b. 配置类
					@Bean
					public Redisson redisson() {
						Config config = new Config();
						config.useSingleServer().setAddress("redis://192.168.26.48:6379");
						return (Redisson) Redisson.create(config);
					}
				d. 业务代码
					@RestController
					public class GoodsController {

						@Autowired
						private StringRedisTemplate stringRedisTemplate;

						@Autowired
						private Redisson redisson;

						@Value("${server.port}")
						private int serverPort;

						private static final String KEY = "goods:1000";

						public static final String REDIS_LOCK = "lock";

						@GetMapping("sellGoods")
						public String sellGoods() {
							String value = UUID.randomUUID().toString().replace("-", "");
							RLock lock = redisson.getLock(REDIS_LOCK);
							lock.lock();
							try {
								String result = stringRedisTemplate.opsForValue().get(KEY);
								int goodsNum = result == null ? 0 : Integer.parseInt(result);
								if (goodsNum > 0) {
									int realNum = goodsNum - 1;
									stringRedisTemplate.opsForValue().set(KEY, String.valueOf(realNum));
									System.out.println("秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort);
									return "秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort;
								} else {
									System.out.println("秒杀失败，服务提供端口：" + serverPort);
									return "秒杀失败，服务提供端口：" + serverPort;
								}
							} finally {
								lock.unlock();
							}
						}
					}
			B. 该方式还存在一个隐藏 Bug
				a. IllegalMonitorStateException：attempt to unlock lock，not locked by current thread by node id：
				b. 最终代码
					public String sellGoods() {
						RLock lock = redisson.getLock(REDIS_LOCK);
						lock.lock();
						try {
							String result = stringRedisTemplate.opsForValue().get(KEY);
							int goodsNum = result == null ? 0 : Integer.parseInt(result);
							if (goodsNum > 0) {
								int realNum = goodsNum - 1;
								stringRedisTemplate.opsForValue().set(KEY, String.valueOf(realNum));
								System.out.println("秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort);
								return "秒杀成功，库存剩余：" + realNum + "件，服务提供端口：" + serverPort;
							} else {
								System.out.println("秒杀失败，服务提供端口：" + serverPort);
								return "秒杀失败，服务提供端口：" + serverPort;
							}
						} finally {
							if (lock.isLocked() && lock.isHeldByCurrentThread()) {
								lock.unlock();
							}
						}
					}
	3. 总结：单机使用本地锁（synchronized）可以解决超卖问题，但是分布式微服务下，本地锁不再适应。进而使用 redis 分布式锁 setnx，但是如果只加了锁，却没有释放，出异常的
	话，可能无法释放锁，必须要在代码层面 finally 中释放锁。另外，如果微服务宕机了，部署的微服务代码层面根本没有执行 finally 释放锁的代码，因此也没办法保证释放锁，需要
	有lockkey 的过期时间设定。为 redis 的分布式锁增加过期时间外，还要求设置分布式锁与过期时间必须是原子操作。最后还要求每个线程只能删除该线程获取的锁，并且判断锁和删除
	锁也必须是原子操作，所以在删除锁时，使用 redis 的事务，或者是使用 lua 脚本。由于无法使得分布式锁自动续期，因此使用 redlock 的具体实现 redisson。
四、redis 缓存过期淘汰策略
	1. 面试题
		① 生产上 redis 内存设置多少
		② 如何配置、修改 redis 的内存大小
		③ 如果内存满了的话如何处理
		④ redis 清理内存的方式？定期删除和惰性删除了解吗
		⑤ redis 缓存淘汰策略
		⑥ redis 的 LRU 了解过吗，可否手写一个 LRU 算法
	2. Redis 内存满了怎么办
		① redis 默认内存多少？在哪里查看？如何设置修改？
			A. 查看 Redis 最大占用内存：
				a. 在配置文件中查看，默认没配置，设置 maxmemory 参数，maxmemory 是 byte 字节类型，注意转换
				b. 连接 redis 客户端后，使用命令查看 Redis 最大占用内存：config get maxmemory 
				c. 连接 redis 客户端后，使用命令查看 Redis 最大占用内存：info memory
			B. redis 默认内存多少可以用：如果不设置最大内存大小或者设置最大内存大小为0，在 64 位操作系统下不限制内存大小，在 32 位操作系统下最多使用 3GB 内存
			C. 一般生产上如何配置：一般推荐 Redis 设置内存为最大物理内存的四分之三
			D. 如何修改 redis 内存设置
				a. 通过修改配置文件：maxmemory 104857600（100m）
				b. 连接 redis 客户端后，使用命令设置Redis 最大占用内存：config set maxmemory 104857600
			E. 什么命令查看 redis 内存使用状态：info memory
		② 如果内存满了会怎么样，如果 Redis 内存使用超出了设置的最大值会怎么样
			A. 把 redis 最大内存设置为 1
				config set maxmemory 1
			B. 设置一个 key
				set k1 v1
				OOM command not allowed when used memory > 'maxmemory'
		③ 结论
			A. 设置了 maxmemory 选项，假如 redis 内存使用达到了上限
			B. 没有加上过期时间导致数据写满 maxmemory，为了避免类似情况，引入内存淘汰策略
	3. Redis 缓存淘汰策略
		① 往 Redis 里写的数据是怎么没了的
			A. redis 过期键的删除策略：如果一个键过期了，那他它到了过期时间之后不是马上就从内存中被删除的。
			B. 三种不同的删除策略
				a. 定时删除
					(1) Redis 不可能时时刻刻遍历所有被设置了生产时间的 key，来检测数据是否已经达到过期时间，然后对它进行删除
					(2) 立即删除能保证内存数据的最大新鲜度，因为它保证过期键值会在过期后马上被删除，其所占用的内存也会随之释放。但是立即删除对 CPU 是最不友好的。
					因为删除操作会占用 CPu 时间，如果刚好碰上 CPU 很忙的时候，比如正在做交集或排序等计算的时候，就会给 CPU 造成额外的压力
					(3) 这会产生大量的性能消耗，同时也会影响数据的读取操作
					(4) 总结：对 CPU 不友好，用处理器性能换取存储空间（拿时间换空间）
				b. 惰性删除
					(1) 数据到达过期时间，不做处理，等下次访问数据时，如果未过期，则返回数据；发现已过期，删除，返回不存在。
					(2) 惰性删除策略的缺点是，它对内存是最不友好的
					(3) 如果一个键已经过期，而这个键又仍然保留在数据库中，那么只要这个过期键不被删除，它所占用的内存就不会释放。
					(4) 在使用惰性删除策略时，如果数据库中又非常多的过期键，而这些过期键又恰好没有被访问到的话，那么它们也许永远也不会被删除（除非用户手动执行
					flushdb），甚至可以将这种情况看作是一种内存泄露（无用的垃圾数据占用了大量的内存，而服务器却不会自己去释放它们），这对运行状态非常依赖内存的
					redis 服务器来说，肯定不是一个好消息。
					(5) 总结：对 memory 不友好，用存储空间换取处理器性能（拿空间换时间）
				c. 定期删除
					(1) 定期删除策略是前两种策略的折中
					(2) 定期删除策略是每隔一段时间执行一次删除过期键操作，并通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响
						(A) 周期性轮询 Redis 库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度
						(B) 特点一：CPU 性能占用设置有峰值，检测频度可自定义设置
						(C) 特点二：内存压力不是很大，长期占用内存的冷数据会被持续清理
						(D) 总结：周期性抽查存储空间（随机抽查，重点抽查）
					(3) 举例：redis 默认每隔 100ms 检查，是否有过期的 key，有过期 key 则删除。注意：redis 不是每隔 100ms 将所有的 key 检查一次而是随机抽取进行
					检查。因此，如果只采用定期删除策略，会导致很多 key 到时间没有删除
					(4) 定期删除策略的难点是确定删除操作执行的时长和频率：如果删除执行得太频繁，或者执行得时间太长，定期删除策略就会退化成定时删除策略，以至于
					将 CPU 时间过多地消耗在删除过期键上面。如果删除操作执行得太少，或者执行的时间太短，定期删除策略又会和惰性删除策略一样，出现浪费内存的情况。
					因此，如果采用定期删除策略的话，服务器必须根据情况，合理设置删除操作的执行时长和执行频率
			C. 漏洞
				a. 定期删除时，过期键从来没有被抽查到
				b. 惰性删除时，过期键从来没有被使用到
				c. 以上步骤，会导致大量过期的 key 堆积在内存中，导致 redis 内存空间紧张或者很快被耗尽
		② 内存淘汰策略
			A. noeviction：不会驱逐任何 key
			B. allkeys-lru：对所有 key 使用 LRU 算法进行删除
			C. volatile-lru：对所有设置了过期时间的 key 使用 LRU 算法进行删除
			D. allkeys-random：对所有 key 随机删除
			E. volatile-random：对所有设置了过期时间的 key 随机删除
			F. volatile-ttl：删除马上要过期的 key
			G. allkeys-lfu：对所有 key 使用 LFU 算法进行删除
			H. volatile-lfu：对所有设置了过期时间的 key 使用 LFU 算法进行删除
		③ 生产上使用 allkeys-lru 策略
		④ 如何配置、修改
			A. 配置文件：maxmemory-policy allkeys-lru
			B. 命令：config set maxmemory-policy allkeys-lru
