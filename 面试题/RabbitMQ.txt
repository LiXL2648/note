RabbitMQ 架构设计
	1. 工作原理												+-----------------------------------+
															| 		Broker（RabbitMQ）			|
															|									|
									+-------------+			|						  +-------+ |		+-------------+
									| Connection  |			|					+---> | Queue |	|		| Connection  |
				+----------+		|   		  |			| +----------+		|	  +-------+	|		|   		  |		  +----------+
				| Producer | -----> | +---------+ | ------> | | Exchange | -----+				| ---->	| +---------+ | ----> | Consumer |
				+----------+		| | Channel | |			| +----------+		|	  +-------+	|		| | Channel | |		  +----------+
									| +---------+ |			|           		+---> | Queue |	|		| +---------+ |
									+-------------+			|						  +-------+	|		+-------------+
															+-----------------------------------+
																	① RabbitMQ 的概念
			
	2. 四大核心概念
		A. 生产者：产生数据发送消息的程序是生产者
		B. 交换机：交换机是 RabbitMQ 非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道它如
		何处理它接收到的消息，是将这些消息推送到特定的队列还是推送到多个队列，亦或是将消息丢弃，这个得有交换机类型决定
		C. 队列：队列是 RabbitMQ 内部使用得一种数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存储在队列中，队列仅受主机得内存和磁盘
		限制得约束，本质上是一个大得消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列
		的方式。
		D. 消费者：消费者与接收者具有相似的含义，消费者大多时候是等待一个接收消息的程序，请注意生产者，消费者和消息中间件很多时候并不在同一
		个机器上，同一个应用程序既可以是生产者又可以是一个消费者。
	3. RabbitMQ 核心部分（六大模式）
		A. HelloWorld（简单模式）
		B. Work queues（工作模式）
		C. Publish/Subscribe（发布/订阅模式）
		D. Routing（路由模式）
		E. Topics（主题模式）
		F. Publish/Confirms（发布/确认模式）
	4. 相关概念
		B. Broker：接收和分发消息的应用，RabbitMQ Server 就是 Message Broker
		C. Virtual host：出于多租户和安全因素设计，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同用户
		使用同一个 RabbitMQ Server 提供服务时，可划分出多个 vhost，每个用户在自己的 vhost 创建 exchange /queue。
		D. Connection：producer / consumer 和 Broker 之间的 Tcp 连接
		E. Channel：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection 的开销是巨大的，效率也低。Channel 是在 
		Connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个 Thread 创建单独的 Channel 进行通讯，AMQP method 包含了 Channel id 帮助
		客户端和 message broker 识别 Channel，所以 Channel 之间是完全隔离的。Channel 作为 轻量级的 Connection 极大减少了 操作系统建立 TCP 
		connection 的开销。
		F. Exchange：message 到达 Broker 的第一站，根据分发规则，匹配查询表中的 Routing key，分发到 queue 中去。常用的类型有：direct
		（point-to-point），Topic（publish/subscribe）and fanout（multicast）
		G. Queue：消息最终被送到 Queue 等待 Consumer 取走
		H. Binding：exchange 和 queue 之间的虚拟连接，bingding中可以包含 routing key，Bingding 信息被保存到 exchange 中的查询表中，用于 message 
		的分发依据。
二、Exchanges
	1. Exchanges 概念
		A. RabbitMQ 消息传递模型的核心思想是：生产者生产的消息从不会直接发送到队列。实际上，通常生产者甚至不知道这些消息传递到哪些队列中
		B. 相反，生产者只能将消息发送到交换机（Exchange），交换机工作内容非常简单，一方面它接收来自生产者的消息，另一方面将它们推入队列。交换机必须确切知道如何处理收到的
		消息。是应该把这些消息放到特定队列还是说把他们放多多个队列，或者是丢弃。这些由交换机的类型来决定。
	2. Exchanges 的类型：
		A. 直接（direct）：直接匹配，通过 Exchange 名称和 Routing key 来发送与接收消息
		B. 主题（topic）：主题匹配订阅，这里的主题指的是 Routing key，Routing key 可以采用通配符，如 “*”和“#”，Routing key 命名采用“.”来分隔多个词，只有将队列
		绑定到该 Exchange 并且指定 Routing key，符合匹配规则时才能收到消息
		C. 标题（headers）：消息头订阅，消息发布前，为消息定义一个或多个键值对的消息头，然后消费者接收消息同时需要定义类似的键值对请求头，只有请求头与消息头匹配，
		才能接收消息，忽略 Routing key
		D. 扇出（fanout）：广播订阅，向所有的消费者发布消息，但是只有消费者将队列绑定到该 Exchanges 才能收到消息，忽略 Routing key
		E. 无名 Exchange：如果用空字符串去声明一个 Exchange，那么系统就会使用“amq.direct” 这个 Exchange，创建一个 queue 时，默认的都会有一个和新建 queue 同名
		的 Routing key 绑定到这个默认的 Exchange 上
三、死信、延时
	1. 死信队列
		① 死信的概念：死信，顾名思义就是无法被消费的消息，producer 将消息投递到broker或者直接到queue里了，consumer 从queue 取出消息进行消费，但某些时候由于
		特定的原因导致 queue 中的某些消息无法被消费，这样的消息如果没有后续的处理，就变成了死信，有死信自然就有了死信队列。
		② 死信的来源
			A. 消息 TTL （存活时间）过期
			B. 队列达到最大长度（队列满了，无法再添加数据到 MQ 中）
			C. 消息被拒绝（basic.reject 或者 basic.nack）并且 requeue=false
	2. 延迟队列
		① 延迟队列概念：延时队列就是用来存放在指定时间被处理的元素队列。延迟队列是死信队列的一种，即消息的 TTL 过期后的死信队列就是延迟队列
		② RabbitMQ 中的 TTL：
			A. 一条消息设置了 TTL 属性或者进入了设置 TTL 属性的队列，那么这条消息如果在 TTL 设置的时间内没有被消费，则会成为“死信”。如果同时配置了队列的 TTL 和消
			息的 TTL，那么较小的那个值将会被使用
			B. 有两种方式设置 TTL。
				a. 消息设置 TTL，针对每条消息设置 TTL
				b. 队列设置 TTL，在创建队列的时候设置队列的“x-message-ttl”属性
			C. 两者的区别 
				a. 如果设置了队列的 TTL 属性，那么一旦消息过期，就会被队列丢弃(如果配置了死信队列被丢到死信队列中)，而第二种方式，消息即使过期，也不一定会被马上丢弃，因为消息是否过期是在即
				将投递到消费者之前判定的，如果当前队列有严重的消息积压情况，则已过期的消息也许还能存活较长时间；另外，还需要注意的一点是，如果不设置 TTL，表示消息永远不会过期，如果将 TTL 
				设置为 0，则表示除非此时可以直接投递该消息到消费者，否则该消息将会被丢弃。
				b. 延时队列，就是想要消息延迟多久被处理，TTL 则刚好能让消息在延迟多久之后成为死信，另一方面，成为死信的消息都会被投递到死信队列里，这样只需要消费者一直消费死信队列里的消息就
				完事了，因为里面的消息都是希望被立即处理的消息。
			D. 队列设置 TTL 的缺点：如果使用队列设置 TTL 的话，每增加一个新的时间需求，就要新增一个队列。可以设置 消息的过期时间来解决该问题
			E. 在消息属性上设置 TTL 的缺点，消息可能不会按时 “死亡”，因为 RabbitMQ 只会检查第一消息是否过期，如果过期则丢到死信队列，如果第一个消息的延时时长很长，而第二个消息的延时时长很
			短，第二个消息不会优先得到执行
			F. 使用延时队列插件解决：安装延时队列插件，在交换机类型中新增了一种类型：x-delayed-message，这是一种新的交换机类型，该类型消息支持延迟投递机制，消息传递后并不会立即投递到目标队列中，而是存储在
			mnesia（分布式数据系统）表中，当达到投递时间时，才投递到目标队列中。
四、发布确认
	1. 发布确认原理
		① 生产者将信道设置成 confirm 模式，一旦信道进入 confirm 模式，所有在该信道上面发布的消息都会被指派一个唯一的ID（从1开始），一旦消息被投递到所有	匹配的队列之后，
		broker就会发送一个确认给生产者（包含消息的唯一ID），这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘后发出，
		broker 回传给生产者的确认消息中 delivery-tag 域包含了确认消息的序列号，此外 broker 也可以设置basic.ack的 multiple 域，表示到这个序列号之前的所有消息都已经得到处理。
		② confirm 模式最大的好处在于他是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通
		过回调方法来处理该确认消息，生产者应用程序同样可以在回调方法中处理该 nack 消息
	2. 发布确认的策略
		① 开启发布确认的方法：发布确认默认是没有开启的，如果需要开启需要调用channel.confirmSelect，每当想要使用发布确认，都需要在channel上调用该方法
		② 单个确认发布
			A. 这是一种简单的确认方式，它是一种同步确认发布的方式，也就是发布一个消息之后只有它被确认发布，后续的消息才能继续发布，waitForConfirmOrDie(long) 这个方法自有在
			消息被确认的时候才返回，如果在指定时间范围内这个消息没有被确认那么它将抛出异常
			B. 这种确认方式有一个最大的缺点就是：发布速度特别慢，因为如果没有确认发布的消息就会阻塞所有后续消息的发布。
		③ 批量确认发布
			A. 先发布一批消息后一起确认可以极大地提高吞吐量，当然这种方式地缺点就是：当发送故障导致发布出现问题时，不知道是哪个消息
			出现问题了，我们必须将整个批处理保存到内存中，以记录重要的信息而后重新发布消息。当然这种方案仍然是同步的，也一样阻塞消息的发布
		④ 异步发布确认
			A. 利用回调函数来达到消息可靠性传递的，这个中间件也是通过函数回调来保证是否投递成功。
		⑤ 三种发布确认速度对比
			A. 单独发布消息：同步等待，简单，但吞吐量非常有限
			B. 批量发布消息：批量同步等待确认，简单，合理的吞吐量，一旦出现问题很难推断是哪条消息出现了问题
			C. 异步处理：最佳性能和资源使用，在出现错误的情况下可以很好地控制，但实现起来稍微有难度
		⑥ ConfirmCallback：ConfirmCallback 是一个回调接口，消息发送到 Broker 后触发回调，确认消息是否到达 Broker 服务器，也就是只确认是否正确道道 Exchange
		⑦ ReturnsCallback：通过实现 ReturnsCallback 接口，启动消息失败返回，此接口是在交换器路由不到队列时促发回调。可以使用备份交换机解决消息不可路由处理
		⑧ 备份交换机：当我们为某一个交换机声明一个对应的备份交换机时，就是为它创建一个备胎，当交换机接收到一条不可路由消息时，
			将会把这条消息转发到备份交换机中，由备份交换机来进行转发和处理，通常备份交换机的类型为 Fanout ，这样就能把所有消息都投递到与其绑定的队列中，然后我们在备份交换机下绑定
			一个队列，这样所有那些原交换机无法被路由的消息，就会都进入这个队列了。当然，我们还可以建立一个报警队列，用独立的消费者来进行监测和报警。
	3. 消息应答
		① 概念：消费者完成一个任务可能需要一段时间，如果其中一个消费者处理一个长任务并仅只完成了部分突然就挂了。RabbitMQ一旦向消费者传递了一条消息，便立
		即将该消息标记为删除。在这个情况下，突然有个消费者挂掉了，正在处理的消息将会丢失。为了保证消息在发送过程中不会丢失，rabbitmq引入消息应答机制，消
		息应答就是：消费者在接收到消息并处理该消息之后，告诉RabbitMQ它已经处理了，rabbitMQ可以把该消息删除了。
		② 自动应答：消息发送后立即被认为已经传送成功
		③ 手动应答，消息应答的方法
			A. Channel.basicAck()：用于肯定确认，RabbitMQ已经知道消息被接收并且被成功处理，可以将其丢弃了
			B. Channel.basicNack()：用于否达确认
			C. Channel.basicReject()：用于否定确认，不处理该消息了直接拒绝，可以将其丢弃了，与Channel.basicNack()相比少了一个参数 multiple。
		④ multiple的解释，手动应答的好处是可以批量应答并且减少网络拥堵
			A. multiple 的 true 和 false 代表不同意思
			B. true：代表批量应答 channel 上未应答的消息，比如说channel上有传送 tag 的消息 5、6、7、8，当前 tag 是 8，那么此时 5-8 的这些还未应答的消息都会
			被确认收到消息应答
			C. false：同上面相比，只会应答 tag=8 的消息，5、6、7这三个消息依然不会被确认收到消息应该
		消息自动重新入队：如果消费者由于某些原因失去连接（其通道已关闭，连接已关闭或者 TCP  连接丢失），导致消息未发送 ACK 确认，RabbitMQ 将了解到消息未
		完全处理，并将其重新排队。如果此时其他消费者可以处理，它很快将其重新分发给另一个消费者。这样，即某个消费者偶尔死亡，也可以确保不会丢失任何消息。
五、RabbitMQ 其他知识点
	1. 幂等性
		① 概念：用户对于统一操作发起一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。举个简单的例子，用户购买商品后支付，支付扣款成功，但是返回结果的
		时候网络异常，此时钱已经扣了，用户再次点击按钮，会进行第二次扣款，返回结果成功，用户查询余额时发现多扣钱，流水记录也变成了两条。在以前的单应用系统中，我们只需要
		把数据放入事务中即可，发生错误立即回滚，但是在响应客户的时候也有可能出现网络中断或者异常等等
		② 消息重复消费：消费者在消费 RabbitMQ 中的消息时，MQ 已把消息发送给消费者，消费者在给 MQ 返回 ack 时网络中断，姑 MQ 未收到确认信息，该条消息会重新发给其他消费者
		或者在网络重连后再次发送给消费者，但实际上该消费者已经成功消费了该条消息，造成消费者消费了重复的消息
		③ 解决思路：MQ 消费者的幂等性的解决一般使用全局 ID 或者写个唯一标识比如时间戳或者 UUID 或者订单消费者消费 MQ 中的消息也可以利用 MQ 的该 id 来判断，或者可按自己的
		规则生成一个全局唯一 id，每次消费消息时用该 id 先判断该消息是否已经消费过
		④ 消费端的幂等性保障：在海量订单生产的业务高峰期，生产端可能就会重复发送了消息，这时候消费端就要实现幂等性，这就意味着我们的消息永远不会被消费多次，即时我们收到
		了一样的消息。业界主流的幂等性有两种操作：a.唯一ID+指纹码机制，利用数据库主键去重；b.利用 redis 的原子性去重
		⑤ 唯一 ID+指纹码机制：指纹码，我们的一些队则或者时间戳加别的服务给到的唯一信息码，它并不一定是我们系统生产的，基本都是由我们的业务规则拼接而来，但是一定要保证唯一
		性，然后就利用查询语句进行判断这个id 是否存在数据库中，优势就是实现一个简单拼接，然后查询判断是否重复，劣势就是在实行高并发时，如果单个数据库就会有写入性能瓶颈，
		当然也可以采用分库分表提升性能，但也不是最推荐的方式。
		⑥ Redis 原子性：利用redis 执行setnx，天然具有幂等性，从而实现不重复消费。
	2. 优先级队列
		① 使用场景：在系统中有一个订单催付的场景，客户在天猫下的订单，淘宝会及时将订单推送给我们，如果在用户设定的时间内未付款，那么就会给用户发送一条消息提醒。但是天猫
		商家肯定要分大客户和小客户，比如像苹果，小米这样的大商家一年起码能创造很大的利润，所以理所当然，他们的订单必须得到优先处理，而曾经我们的后端系统就是使用 redis 来
		存放定时轮询，都知道 redis 只能用 List 做一个简单的消息队列，并不能实现一个优先级的场景，所以订单量大了后来采用 RabbitMQ 进行改造和优化，如果发现是大客户的订单给
		一个相对高的优先级，否则就是默认优先级
		② 要让队列实现优先级需要做的事情有如下事情:队列需要设置为优先级队列，消息需要设置消息的优先级，消费者需要等待消息已经发送到队列中才去消费因为，这样才有机会对消息
		进行排序
		③ 实战
			A. 配置类：
				@Configuration
				public class PriorityConfig {

					// 优先级队列
					private static final String PRIORITY_QUEUE_NAME = "priority_queue";

					@Bean("priorityQueue")
					public Queue priorityQueue() {
						return QueueBuilder.nonDurable(PRIORITY_QUEUE_NAME).maxPriority(10).build();
					}
				}
			B. 生产者
				public void testPriority() {

					for (int i = 1; i < 11; i++) {
						if (i % 5 == 0) {
							rabbitTemplate.convertAndSend("", "priority_queue", i + "", message -> {
								message.getMessageProperties().setPriority(10);
								return message;
							});
						} else {
							rabbitTemplate.convertAndSend("", "priority_queue", i + "");
						}
					}
				}
			C. 消费者
				@RabbitListener(queues = "priority_queue")
				public void receivePriorityMeg(Message message) {
					System.out.println(new String(message.getBody()));
				}
	3. 惰性队列
		① 使用场景
			A. RabbitMQ 从 3.6.0 版本开始引入了惰性队列的概念。惰性队列会尽可能的将消息存入磁盘中，而在消息消费者消费到相应的消息时才会被加载到内存中，它的一个重要的设计目标
			是能够支持更长的队列，机支持更多的消息存储。当消费者由于各种各样的原因（比如消费者下线了、宕机亦或由于维护而关闭）而导致长时间内不能消费消息造成堆积时，惰性队列
			就很有必要了
			B. 默认情况下，当生产者将消息发送到 RabbitMQ 的时候，队列中的消息会尽可能的存储在内存中，这样可以更加快速的将消息发送给消费者。即时是持久化的消息，在被写入磁盘
			的同时也会在内存中驻留一份备份。当 RabbitMQ 需要释放内存的时候，会将内存中的消息换页至磁盘中，这个操作会耗费较长的时间m也会阻塞队列的操作，进而无法接收新的消息。
			虽然 RabbitMQ 的开发者们一直在升级相关的算法，但是效果始终不理想，尤其是在消息量特别大的时候。
		② 两种模式：
			A. 队列具有两种模式，default 和 lazy。默认的为 default 模式，在 3.6.0 之前的版本无需做任务变更，lazy 模式即为惰性队列的模式，可以通过调用 Chanel.queueDeclare 方
			法的时候在参数中设置，也可以通过 policy 方式设置，如果一个队列同时使用这两种方式设置的话，那么 policy 的方式具备更高的优先级。如果通过声明的方式改变已有队列的模式
			的话，那么只能删除队列，然后在重新声明一个新的
			B. 在队列声明的时候可以通过“x-queue-mode”参数来设置队列的模式，取值为“default”和“lazy”。
				@Bean("lazyQueue")
				public Queue lazyQueue() {
					return QueueBuilder.nonDurable(LAZY_QUEUE_NAME).lazy().build();
				}
		③ 内存开销对比：在发送1百万条消息，每条消息大概占1KB的情况下，普通队列占用内存是1.2GB，而惰性队列仅仅占用1.5MB，因为惰性队列把消息存在磁盘，而内存仅仅保存消息的索引。
六、RabbitMQ 集器
	1. clustering
		① 使用集群的原因：前面安装和运行 RabbitMQ 服务，都是单机版，无法满足目前真实应用的要求。如果 RabbitMQ 服务器遇到内存崩溃、机器掉电或者主板故障。单台 RabbitMQ 服务器
		可以满足每秒 1000条消息的吞吐量，那么如果应用需要 RabbitMQ 服务满足每秒 10万 条消息的吞吐量，购买昂贵的服务器来增强单机 RabbitMQ 的性能显得不可靠，搭建一个 RabbitMQ
		集群才是实际解决问题的关键
		② 搭建步骤
			A. 修改 3 台机器的主机名称分别为 node1、node2、node3
				vim /etc/hostname
			B. 配置各个节点的 hosts 文件，让各个节点都能互相识别对方
				vim /etc/hosts
				192.168.230.101 hadoop101
				192.168.230.102 hadoop102
				192.168.230.103 hadoop103
			C. 以确保各个节点的 cookie 文件使用的是同一个值，在 node1 上执行远程操作命令
				scp /var/lib/rabbitmq/.erlang.cookie root@hadoop102:/var/lib/rabbitmq/.erlang.cookie
				scp /var/lib/rabbitmq/.erlang.cookie root@hadoop103:/var/lib/rabbitmq/.erlang.cookie
			D. 启动 RabbitMQ 服务,顺带启动 Erlang 虚拟机和 RbbitMQ 应用服务(在三台节点上分别执行以下命令)
				rabbitmq-server -detached
			E. 在节点 2 执行
				rabbitmqctl stop_app，rabbitmqctl stop 会将 Erlang 虚拟机关闭，rabbitmqctl stop_app 只关闭 RabbitMQ 服务
				rabbitmqctl reset
				rabbitmqctl join_cluster rabbit@node1
				rabbitmqctl start_app(只启动应用服务)
			F. 在节点 3 执行
				rabbitmqctl stop_app
				rabbitmqctl reset
				rabbitmqctl join_cluster rabbit@node2
				rabbitmqctl start_app
			G. 集群状态
				rabbitmqctl cluster_status
			H. 需要重新设置用户
				a. 创建账号
					rabbitmqctl add_user admin 2648
				b. 设置用户角色
					rabbitmqctl set_user_tags admin administrator
				c. 设置用户权限
					rabbitmqctl set_permissions -p "/" admin ".*" ".*" ".*"
			I. 解除集群节点(node2 和 node3 机器分别执行)
				rabbitmqctl stop_app
				rabbitmqctl reset
				rabbitmqctl start_app
				rabbitmqctl cluster_status
				node1和node2执行
				rabbitmqctl forget_cluster_node rabbit@node2
	2. 镜像队列
		① 使用镜像得原因：
			A. 如果 RabbitMQ 集群中只有一个 Broker 节点，那么该节点的失效将导致整体服务的临时性不可用，并且也可能会导致消息的丢失。可以将消息都设置为持久化，并且
			对应队列的 durable 属性也设置为 true，但是这样仍然无法避免由于缓存导致的问题：因为消息在发送之后和被写入磁盘并执行刷盘动作之间存在一个短暂却会产生问题的时间窗。通过
			publisher/confirm 机制能够确保客户端知道哪些消息已经存入磁盘，尽管如此，一般不希望遇到因单点故障导致服务不可用
			B. 引入镜像队列（mirror Queue）的机制，可以将队列镜像到集群中其他 Broker节点之上，如果集群中一个节点失效了，队列能自动地切换到镜像中的另一个节点上以保证服务的可用性
		② 搭建步骤 
			A. 启动三台集群节点
			B. 随便找一个节点添加 policy
				点击 Admin -> 点击右侧的 policies -> 点击左侧的 Add / update a policy
			C. 输入策略名称，以及镜像队列名称的正则表达式，选择应用在 Exchanges and queues 上
			D. 定义
				a. ha-mode=exactly：指定备份模式
				b. ha-params=2：备份份数
				c. ha-sync-mode=automatic
			E. 在 node1 上创建一个队列发送一条消息，队列存在镜像队列，消息会自动备份到 node2
			F. 停掉 node1 之后发现 node2 成为镜像队列，并且会自动备份到 node3
			G. 就算整个集群只剩下一台机器了 依然能消费队列里面的消息，说明队列里面的消息被镜像队列传递到相应机器里面了
	3. Haproxy+Keepalive 实现高可用负载均衡
		① Haproxy 实现负载均衡 
			A. HAProxy 提供高可用性、负载均衡及基于 TCPHTTP 应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案，包括 Twitter,Reddit,StackOverflow,GitHub 在内的多
			家知名互联网公司在使用。HAProxy 实现了一种事件驱动、单一进程模型，此模型支持非常大的井发连接数。
			B. 扩展 nginx,lvs,haproxy 之间的区别: http://www.ha97.com/5646.html
		② 搭建步骤 
			A. 下载 haproxy(在 node1 和 node2)
				yum -y install haproxy
			B. 修改 node1 和 node2 的 haproxy.cfg
				vim /etc/haproxy/haproxy.cfg
				###################### 打开haproxy的监测界面###############################
				listen status
				bind 0.0.0.0:8888
				mode http
				stats enable
				stats refresh 30s
				stats uri /stats                     #设置haproxy监控地址为http://localhost:8888/stats
				stats auth admin:2648                #添加用户名密码认证
				stats realm (Haproxy\ statistic)
				stats admin if TRUE

				######################监听rabbitmq的web操作页面############################
				listen rabbitmq_admin
					bind 0.0.0.0:15670
					server rabbit_hadoop101 hadoop101:15672
					server rabbit_hadoop102 hadoop102:15672
					server rabbit_hadoop103 hadoop103:15672

				#######################监听rabbimq_cluster #################################
				listen rabbitmq_cluster
				bind 0.0.0.0:5670
				mode tcp
				balance roundrobin  #负载均衡算法（#banlance roundrobin 轮询，balance source 保存session值，支持static-rr，leastconn，first，uri等参数）
				server rabbit_hadoop101 hadoop101:5672 check inter 5000 rise 2 fall 3 weight 1  #check inter 2000 是检测心跳频率
				server rabbit_hadoop102 hadoop102:5672 check inter 5000 rise 2 fall 3 weight 1  #rise 2是2次正确认为服务器可用
				server rabbit_hadoop103 hadoop103:5672 check inter 5000 rise 2 fall 3 weight 1  #fall 2是2次失败认为服务器不可用
			C. 在两台节点启动 haproxy
				haproxy -f /etc/haproxy/haproxy.cfg
				ps -ef | grep haproxy
			D. 访问地址
				http://10.211.55.71:8888/stats 
		③ Keepalived 
	4. Federation Exchange
		① 使用联邦交换机的原因
			A. （broker 北京和 broker 深圳）两台交换机之间相距甚远，网络延迟是一个不得不面对的问题。有一个北京的业务（Client 北京）需要连接（broker 北京），向其中的交换机 
			exchangeA 发消息，此时网络延迟很小，（Client 北京）可以迅速将消息发送至 ExchangeA中，就算在开启了 publisher/confirm 机制或者事务机制的情况下，也可以迅速收到确
			认信息。此时又有个深圳的业务（Client 深圳）需要向 exchangeA 发送消息。那么（Client 深圳 broker 北京）之间有很大的网络延迟，（Client 深圳）将发送消息至 exchangeA 
			会经历一定的延迟，尤其是在开启了 publisher/confirm 机制或者事务机制的情况下，（client 深圳）会等待很长的延迟时间来接收（broker 北京）的确认信息，进而必然造成这条
			发送线程的性能降低，甚至造成一定程度上的阻塞
			B. 将业务（Client 深圳）部署到北京的机房可以解决这个问题，但是如果（Client 深圳）调用的另些服务部署在深圳，那么又会引发新的网络延时问题，因此使用 Federation 插件。
		② 搭建步骤
			A. 需要保证每台节点单独运行
			B. 在每台机器上开启 federation 相关插件
				rabbitmq-plugins enable rabbitmq_federation
				rabbitmq-plugins enable rabbitmq_federation_management
			C. 原理图，先在 node2 创建交换机 fed_exchange
				+-------------------------------------------------------------------+
				|																	|
				|	  消息	  +--------------+	  routingKey	 +-------------+	|
				|	--------> | fed_exchange | ----------------> | node1_queue |	|
				|			  +--------------+					 +-------------+	|
				|					 |												|
				|					 |								   node1		|
				|					 ↓								 upstream		|
				|	+-----------------------------------------+						|
				|	| federation:fed_exchange -> rabbit@node2 |						|
				|	+-----------------------------------------+						|
				+--------------------|----------------------------------------------+
				+--------------------|----------------------------------------------+
				|					 |								   node2		|
				|					 ↓								 downstream		|
				|			  +--------------+	  routingKey	 +--------------+	|
				|			  | fed_exchange | ----------------> |  node2_queue |	|
				|			  +--------------+					 +--------------+	|
				+-------------------------------------------------------------------+
			D. 在 downstream(node2)配置 upstream(node1)
				a. 点击 node2 Admin -> 点击 Federation upstreams -> 选择 Add a new upstream
				b. 在 General parameters 中，分别在 Name 和 URI 中输入上游名字 node1-as-upstream 和上游 URI amqp://admin:[redacted]@hadoop101
				c. 点击 Add upstream
			E. 在 downstream(node2)添加 policy
				a. 点击 node2 Admin -> 点击 Policies -> 选择 Add / update a policy
				b. 在 Name 和 Pattern分别输入策略名字 exchange-policy 和 策略的正则^fed.*，apply to 选择 Exchange
				c. 添加Definition，选择 Federation upstream=node1-as-upstream，
				d. 点击 Add / update a policy
			F. 最后点击 Federation Status 查看搭建的状态
	5. Federation Queue
		① 使用它的原因：联邦队列可以在多个 Broker 节点(或者集群)之间为单个队列提供均衡负载的功能。一个联邦队列可以连接一个或者多个上游队列(upstream queue)，并从这些上游队列中获取
		消息以满足本地消费者消费消息的需求。
		② 搭建步骤
			A. 原理图		
								node1 upstream						downstream node2
								 +-----------+	队列被联邦到 node1	+-----------+
				这台消息发送消息 | fed.queue | <------------------- | fed.queue | 这台机器先创建队列
								 +-----------+						+-----------+
										|								  |
										|	 消息者达到消息消费负载均衡   |
									consumer1							consumer2
			B. 添加 upstream(同上)
			C. 添加 policy
				a. 点击 node2 Admin -> 点击 Policies -> 选择 Add / update a policy
				b. 在 Name 和 Pattern分别输入策略名字 queue-policy 和 策略的正则^fed.*，apply to 选择 Queue
				c. 添加Definition，选择 Federation upstream=node1-as-upstream，
				d. 点击 Add / update a policy
	6. Shovel
		① 使用它的原因：Federation 具备的数据转发功能类似，Shovel 够可靠、持续地从一个 Broker 中的队列(作为源端，即source)拉取数据并转发至另一个 Broker 中的交换器(作为目的端，即 destination)。
		作为源端的队列和作为目的端的交换器可以同时位于同一个 Broker，也可以位于不同的 Broker 上。Shovel 可以翻译为"铲子"，是一种比较形象的比喻，这个"铲子"可以将消息从一方"铲子"另一方。Shovel 
		行为就像优秀的客户端应用程序能够负责连接源和目的地、负责消息的读写及负责连接失败问题的处理。
		② 搭建步骤 
			A. 开启插件(需要的机器都开启)
				rabbitmq-plugins enable rabbitmq_shovel
				rabbitmq-plugins enable rabbitmq_shovel_management
			B. 原理图(在源头发送的消息直接回进入到目的地队列)
				      消息		 +------------------+     outing.q1    	 +----+
				---------------> | shovel1_exchange | -----------------> | Q1 |
								 +------------------+			   	 	 +----+
																		   ↓
																	   +--------+
				先往Q1和Q2各自发一条消息，当加上shovel之后Q2有两条消息 | Shovel |
																	   +--------+
																		   ↓
					消息		 +------------------+     outing.q2    	 +----+														  
				---------------> | shovel2_exchange | -----------------> | Q2 |
								 +------------------+			   	 	 +----+
			C. 添加 shovel 源和目的地 
				a. 点击 node1 Admin -> 点击 Shovel Manegement -> 选择 Add a new shovel
				b. 输入 name：Q1-to-Q2
				c. Source：选择 AMQP 0.9.1，URI：amqp://admin:2648@hadoop101，Queue：Q1
				d. Destination：选择 AMQP 0.9.1，URI：amqp://admin:2648@hadoop102，Queue：Q2
				e. 点击 Add shove
			D. 点击 Shovel Status，查看状态












