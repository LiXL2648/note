1. 字符串常量 Java 内部加载
	① 代码
		public class StringPoolTest {
			public static void main(String[] args) {
				String str1 = new StringBuilder("Hello").append("World").toString();
				System.out.println(str1);
				System.out.println(str1.intern());
				System.out.println(str1 == str1.intern());

				System.out.println();

				String str2 = new StringBuilder("ja").append("va").toString();
				System.out.println(str2);
				System.out.println(str2.intern());
				System.out.println(str2 == str2.intern());
			}
		}
	② 输出：
		HelloWorld
		HelloWorld
		true

		java
		java
		false
	③ 讲解
		A. intern() 方法：String::intern 是一个本地方法，它的作用是如果字符串常量池中已经包含一个等于此 String 对象的字符串，则返回代表池中这个字符串的 String 对象的引用；
			否则，会将此 String 对象包含的字符串添加到常量池中，并且返回此 String 对象的引用。在 JDK6 及以前的 HotSpot 虚拟机中，常量池都是分配在永久代中，可以通过
			“-XX:PermSize”和“-XX:MaxPermSize”限制永久代的大小，即可间接限制其中常量池的容量
		B. 该代码输出解释：有一个初始化的 java 字符串，在加载 sun.misc.Version 这个类的时候进入常量池
		C. JDK8 底层源码说明：sun.misc.Version 类会在 JDK 类库的初始化过程中被加载并初始化，而在初始化时它需要对静态常量字段根据指定的常量值（ContantValue）做默认初始化，此时
		被 sun.misc.Version.launcher 静态常量字段所引用的“java”字符串字面量就被 intern 到 HotSpot 虚拟机的字符串常量池（StringTable）了。
		D. 结论：对于 str1 比较返回 true，在 JDK7 的 intern() 方法实现不需要拷贝字符串的实例到永久代了，既然字符串常量已经移到 Java 堆中，那只需要在常量池里记录一下首次出现的
		实例引用即可，因此 intern() 返回的引用和由 StringBuilder 创建的那个字符串实例就是同一个。而对 str2 比较返回 false，这是因为“java”这个字符串在执行 StringBuilder.
		toString() 之前就已经出现过了，字符串常量池中已经有它的引用，不符合 intern() 方法要求“首次遇到”的原则。
