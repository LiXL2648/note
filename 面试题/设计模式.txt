一、七大设置原则
	1. 设计模式的目的
		① 编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等方面的挑战，设计模式是为了让程序（软件），具有更好
			A. 代码重用性（即：相同功能的代码，不用多次编写）
			B. 可读性（即：编程规范性，便于其他程序员的阅读和理解）
			C. 可扩展性（即：当需要增加新的功能时，非常的方便，称为可维护性）
			D. 可靠性（即当需要增加新的功能后，对原来的功能没有影响）
			E. 使程序呈现高内聚，低耦合的特性
		② 设计模式常用的七大原则有：
			A. 单一职责原则
				a. 基本介绍:对类来说的，即一个类应该只负责一项职责。如类A负责两个不同职责：职责1，职责2。当职责1需求变更而改变A时，可能造成职责2执行错误，
				所以需要将类A的粒度分解为A1，A2
				b. 单一职责原则注意事项和细节
					(1) 降低类的复杂度，一个类只负责一项职责。
					(2) 提高类的可读性，可维护性
					(3) 降低变更引起的风险
					(4) 通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则
			B. 接口隔离原则
				a. 基本介绍:客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上
				b. 类A通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C 来说不是最小接口，那么类B和类D必须去实现他们
				不需要的方法。
				c. 按隔离原则应当这样处理：将接口 Interface1 拆分为独立的几个接口，类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则
			C. 依赖倒置原则
				a. 基本介绍：依赖倒转原则(Dependence Inversion Principle)是指：
					(1) 高层模块不应该依赖低层模块，二者都应该依赖其抽象
					(2) 抽象不应该依赖细节，细节应该依赖抽象
					(3) 依赖倒转(倒置)的中心思想是面向接口编程
					(4) 依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象
					指的是接口或抽象类，细节就是具体的实现类
					5) 使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成
			D. 里氏替换原则
				a. 基本介绍
					(1) 在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法
					(2) 里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖 来解决问题
				b. 解决方法：通用的做法是，原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替
			E. 开闭原则
				a. 基本介绍
					(1) 开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则
					(2) 一个软件实体如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节。
					(3) 当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。
					(4) 编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。
			F. 迪米特法则
				a. 基本介绍
				(1) 一个对象应该对其他对象保持最少的了解
				(2) 类与类关系越密切，耦合度越大
				(3) 迪米特法则(Demeter Principle)又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内
				部。对外除了提供的public 方法，不对外泄露任何信息
				(4) 迪米特法则还有个更简单的定义：只与直接的朋友通信
				(5) 直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合
				等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量
				的形式出现在类的内部。
			G. 合成复用原则
				a. 基本介绍：原则是尽量使用合成/聚合的方式，而不是使用继承
二、单例模式
	1. 饿汉式（静态常量）
		① 代码
			public class SingletonTest1 {
				// 内部创建对象实例
				private static final SingletonTest1 singleton = new SingletonTest1();
				// 2. 构造器私有化
				private SingletonTest1() {}
				// 提供一个共有的静态方法，返回实例对象
				public static SingletonTest1 getInstance() {
					return singleton;
				}
			}
		② 优缺点说明：
			A. 优点：写法简单，在类装载时就完成初始化，避免线程同步问题
			B. 缺点：在类装载的时候就完成初始化，没有达到懒加载的效果，如果从始至终从未使用过这个实例，则会造成内存浪费
	2. 饿汉式（静态代码块）
		public class SingletonTest2 {
			// 内部创建对象实例
			private static final SingletonTest2 singleton;
			// 在静态代码块中创建单例对象
			static {
				singleton = new SingletonTest2();
			}
			// 2. 构造器私有化
			private SingletonTest2() {}
			// 提供一个共有的静态方法，返回实例对象
			public static SingletonTest2 getInstance() {
				return singleton;
			}
		}
	3. 懒汉式（线程不安全）
		① 代码
			public class SingletonTest3 {
				private static SingletonTest3 instance;
				private SingletonTest3() {}
				// 提供一个静态的公有方法，当使用到该方法时，才会去创建
				public static SingletonTest3 getInstance() {
					if (instance == null) {
						instance = new SingletonTest3();
					}
					return instance;
				}
			}
		② 优缺点说明：
			A. 起到懒加载的效果，但是只能在单线程下使用
			B. 如果在多线程下，一个线程进入了 if(instance == null)判断语句块，还未来得及往下执行，另一个线程也通过这个判断语句，这时便会产生多个实例。
			所以在多线程环境下不可以使用这种方式
	4. 懒汉式（线程安全，同步方法）
		① 代码
			public class SingletonTest4 {
				private static SingletonTest4 instance;
				private SingletonTest4() {}
				// 加入同步代码块，解决线程不安全问题
				public static synchronized SingletonTest4 getInstance() {
					if (instance == null) {
						instance = new SingletonTest4();
					}
					return instance;
				}
			}
		② 优缺点说明：
			A. 解决了线程不安全问题
			B. 效率太低，每个线程在想获得类的实例的时候，执行 getInstance() 方法都要进行同步，方法进行同步效率太低
	5. 懒汉式（线程安全，同步代码块）
		① 代码
			public class SingletonTest5 {
				private static SingletonTest5 instance;
				private SingletonTest5() {}
				public static SingletonTest5 getInstance() {
					if (instance == null) {
						synchronized (SingletonTest5.class) {
							instance = new SingletonTest5();
						}
					}
					return instance;
				}

				public static void main(String[] args) {
					System.out.println(SingletonTest5.getInstance());
					System.out.println(SingletonTest5.getInstance());
				}
			}
		② 优缺点说明：
			A. 这种方式，本意是想对第四种实现方式的改进，因为前面同步方法效率太低，改为同步产生实例化的代码块
			B. 但是这种同步并不能起到线程同步的作用。跟第三种实现方式遇到的情形一样，一个线程进入了 if(instance == null)判断语句块，还未来得及往下执行，
			另一个线程也通过这个判断语句，这时便会产生多个实例。
	6. 双重检查
		① 代码
			public class SingletonTest6 {
				private static volatile SingletonTest6 instance;
				private SingletonTest6() {}
				public static SingletonTest6 getInstance() {
					if (instance == null) {
						synchronized (SingletonTest6.class) {
							if (instance == null) {
								instance = new SingletonTest6();
							}
						}
					}
					return instance;
				}
			}
		② 优缺点说明：
			A. 双重检查概念是多线程开发中常用的单例模式，如代码中所示，进行两次非空判断，这样就可以保证只有一个实例被初始化
			B. 线程安全；延迟加载；效率较高
			C. 在实际开发中，推荐使用这种单例设计模式
	7. 静态内部类
		① 代码
			public class SingletonTest7 {

				private SingletonTest7() {}

				private static class SingletonInstance {
					private static final SingletonTest7 INSTANCE = new SingletonTest7();
				}

				public static SingletonTest7 getInstance() {
					return SingletonInstance.INSTANCE;
				}
			}
		② 优缺点说明：
			A. 这种方式采用了类装载的机制来保证初始化实例时只有一个线程
			B. 静态内部类方式在外部类被装载时并不会被装载，而是在需要实例化时，调用 getInstance 方法，才会装载内部类，从而完成外部类的实例化
			C. 类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM 保证了线程的安全性，在类进行初始化时，别的线程是无法进入的
			D. 优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高，推荐使用
	8. 枚举
		① 代码
			public class SingletonTest8 {
				public static void main(String[] args) {
					System.out.println(Singleton.INSTANCE.hashCode());
					System.out.println(Singleton.INSTANCE.hashCode());
					Singleton.INSTANCE.hello();
				}
			}

			enum Singleton {
				INSTANCE;
				public void hello() {
					System.out.println("Hello World!");
				}
			}
		② 优缺点说明：
			A. 这借助 JDK1.5 中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象
			B. 这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，推荐使用
	9. 总结
		① 所谓类的单例设计模式，就是采取一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法（静态方法）
		② 推荐使用
			饿汉式（静态常量）
			饿汉式（静态代码块）
			双重检查
			静态内部类
			枚举
		③ 单例模式的应用
			A. 在 JDK 中，java.lang.Runtime 就是经典的单例模式，使用的是饿汉式
		④ 单例模式注意事项
			A. 单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式就可以提供系统性能
			B. 当想实例化一个单例类的时候，必须要记住使用想要的获取对象的方法，而不是使用 new
			C. 单例模式使用的场景，需要频繁的进行创建和销毁对象、创建对象时耗时过多或消费资源过多（即：重量级对象），但又经常用到的对象，工具类对象、频繁
			访问数据库或文件的对象（比如数据源、session 工厂）
二、工厂模式
	1. 简单工厂
		① 基本介绍
			简单工厂模式是属于创建型模式，是工厂模式的一种，简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单食用的模式
			简单工厂模式：定义一个创建对象的类，由这个类来封装实例化对象的行为（代码）
			在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会使用到工厂模式
		② 代码
			/**
			 * Pizza 的父接口
			 */
			public abstract class Pizza {

				private String pizzaName;

				abstract void prepare();

				public void  bake() {
					System.out.println(pizzaName + "在烘焙");
				}

				public void  cut() {
					System.out.println(pizzaName + "在切块");
				}

				public void  box() {
					System.out.println(pizzaName + "在包装");
				}

				public String getPizzaName() {
					return pizzaName;
				}

				public void setPizzaName(String pizzaName) {
					this.pizzaName = pizzaName;
				}
			}
			
			/**
			 * 奶酪披萨
			 */
			public class CheesePizza extends Pizza {

				@Override
				public void prepare() {
					System.out.println(this.getPizzaName() + "正在准备");
				}
			}
			/**
			 * 希腊披萨
			 */
			public class GreekPizza extends Pizza {
				@Override
				public void prepare() {
					System.out.println(this.getPizzaName() + "正在准备");
				}
			}
			/**
			 * 披萨工厂
			 */
			public class PizzaSimpleFactory {

				public Pizza createPizza(String pizzaType) {
					Pizza pizza = null;
					if ("奶酪披萨".equals(pizzaType)) {
						pizza = new CheesePizza();
						pizza.setPizzaName(pizzaType);
					} else if ("希腊披萨".equals(pizzaType)) {
						pizza = new GreekPizza();
						pizza.setPizzaName(pizzaType);
					}
					return pizza;
				}
			}
			/**
			 * 披萨订单
			 */
			public class PizzaOrder {
				private final PizzaSimpleFactory pizzaSimpleFactory;
				public PizzaOrder(PizzaSimpleFactory pizzaSimpleFactory) {
					this.pizzaSimpleFactory = pizzaSimpleFactory;
				}

				public void createOrder() {
					String pizzaType;
					Pizza pizza;
					while (true) {
						pizzaType = getPizzaType();
						pizza = pizzaSimpleFactory.createPizza(pizzaType);
						if (pizza != null) {
							pizza.prepare();
							pizza.bake();
							pizza.cut();
							pizza.box();
						} else {
							System.out.println(pizzaType + "不存在");
							break;
						}

					}
				}

				public String getPizzaType() {
					try {
						BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
						System.out.println("输入pizza的种类：");
						return reader.readLine();
					} catch (IOException e) {
						e.printStackTrace();
					}
					return "";
				}
			}
			/**
			 * 披萨店
			 */
			public class PizzaStore {

				public static void main(String[] args) {
					PizzaSimpleFactory pizzaSimpleFactory = new PizzaSimpleFactory();
					PizzaOrder pizzaOrder = new PizzaOrder(pizzaSimpleFactory);
					pizzaOrder.createOrder();
				}
			}
	2. 工厂方法
		① 工厂方法模式：定义了一个创建对象的抽象方法，由子类决定要实例化的类，工厂方法模式将对象的实例化推迟到子类
		② 代码
			/**
			 * Pizza 的父接口
			 */
			public abstract class Pizza {

				private String pizzaName;

				abstract void prepare();

				public void  bake() {
					System.out.println(pizzaName + "在烘焙");
				}

				public void  cut() {
					System.out.println(pizzaName + "在切块");
				}

				public void  box() {
					System.out.println(pizzaName + "在包装");
				}

				public String getPizzaName() {
					return pizzaName;
				}

				public void setPizzaName(String pizzaName) {
					this.pizzaName = pizzaName;
				}
			}
			
			/**
			 * 广州奶酪披萨
			 */
			public class GZCheesePizza extends Pizza {

				@Override
				public void prepare() {
					System.out.println("广州奶酪披萨正在准备");
					this.setPizzaName("广州奶酪披萨");
				}
			}
			
			/**
			 * 广州希腊披萨
			 */
			public class GZGreekPizza extends Pizza {
				@Override
				public void prepare() {
					System.out.println("广州希腊披萨正在准备");
					this.setPizzaName("广州希腊披萨");
				}
			}
			
			/**
			 * 深圳奶酪披萨
			 */
			public class SZCheesePizza extends Pizza {

				@Override
				public void prepare() {
					System.out.println("深圳奶酪披萨正在准备");
					this.setPizzaName("深圳奶酪披萨");
				}
			}
			/**
			 * 深圳希腊披萨
			 */
			public class SZGreekPizza extends Pizza {
				@Override
				public void prepare() {
					System.out.println("深圳希腊披萨正在准备");
					this.setPizzaName("深圳希腊披萨");
				}
			}
			
			/**
			 * 披萨订单
			 */
			public abstract class PizzaOrder {

				// 定义一个抽象方法，让各个工厂子类实现
				abstract Pizza createPizza(String pizzaType);

				public void createOrder() {
					String pizzaType;
					Pizza pizza;
					while (true) {
						pizzaType = getPizzaType();
						pizza = createPizza(pizzaType);
						if (pizza != null) {
							pizza.prepare();
							pizza.bake();
							pizza.cut();
							pizza.box();
						} else {
							System.out.println(pizzaType + "不存在");
							break;
						}
					}
				}

				public String getPizzaType() {
					try {
						BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
						System.out.println("输入pizza的种类：");
						return reader.readLine();
					} catch (IOException e) {
						e.printStackTrace();
					}
					return "";
				}
			}
			
			/**
			 * 广州披萨订单
			 */
			public class GZPizzaOrder extends PizzaOrder {
				@Override
				public Pizza createPizza(String pizzaType) {
					Pizza pizza = null;
					if ("奶酪披萨".equals(pizzaType)) {
						pizza = new GZCheesePizza();

					} else if ("希腊披萨".equals(pizzaType)) {
						pizza = new GZGreekPizza();
					}
					return pizza;
				}
			}
			
			/**
			 * 深圳披萨订单
			 */
			public class SZPizzaOrder extends PizzaOrder {
				@Override
				public Pizza createPizza(String pizzaType) {
					Pizza pizza = null;
					if ("奶酪披萨".equals(pizzaType)) {
						pizza = new SZCheesePizza();

					} else if ("希腊披萨".equals(pizzaType)) {
						pizza = new SZGreekPizza();
					}
					return pizza;
				}
			}
			
			/**
			 * 披萨店
			 */
			public class PizzaStore {

				public static void main(String[] args) {
					// PizzaOrder pizzaOrder = new GZPizzaOrder();
					PizzaOrder pizzaOrder = new SZPizzaOrder();
					pizzaOrder.createOrder();
				}
			}
	3. 抽象工厂模式
		① 基本介绍
			A. 抽象工厂模式：定义了一个 interface 用于创建相关或者有依赖关系的对象簇，而无需指明具体的类
			B. 抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合
			C. 从设计层面看，抽象工厂模式就是对简单工厂模式得改进（或者进一步得抽象）
			D. 将工厂抽象成两层，AbsFactory（抽象工厂）和具体实现得工厂子类。程序员可以根据创建对象类型使用对应得工厂子类。这样将单个得简单工厂类变成工厂簇，更
			利于代码得维护和发展
		② 代码
			/**
			 * 抽象工厂
			 */
			public interface AbsFactory {

				Pizza createPizza(String pizzaType);
			}
			
			/**
			 * 广州工厂子类
			 */
			public class GZFactory implements AbsFactory {

				@Override
				public Pizza createPizza(String pizzaType) {
					Pizza pizza = null;
					if ("奶酪披萨".equals(pizzaType)) {
						pizza = new GZCheesePizza();

					} else if ("希腊披萨".equals(pizzaType)) {
						pizza = new GZGreekPizza();
					}
					return pizza;
				}
			}
			
			/**
			 * 深圳工厂子类
			 */
			public class SZFactory implements AbsFactory {
				@Override
				public Pizza createPizza(String pizzaType) {
					Pizza pizza = null;
					if ("奶酪披萨".equals(pizzaType)) {
						pizza = new SZCheesePizza();

					} else if ("希腊披萨".equals(pizzaType)) {
						pizza = new SZGreekPizza();
					}
					return pizza;
				}
			}
			
			/**
			 * 披萨订单
			 */
			public class OrderPizza {

				private final AbsFactory factory;

				public OrderPizza(AbsFactory factory) {
					this.factory = factory;
				}

				public void createOrder() {
					String pizzaType;
					Pizza pizza;
					while (true) {
						pizzaType = getPizzaType();
						pizza = factory.createPizza(pizzaType);
						if (pizza != null) {
							pizza.prepare();
							pizza.bake();
							pizza.cut();
							pizza.box();
						} else {
							System.out.println(pizzaType + "不存在");
							break;
						}
					}
				}

				public String getPizzaType() {
					BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
					try {
						System.out.print("输入pizza的种类：");
						return reader.readLine();
					} catch (IOException e) {
						e.printStackTrace();
					}
					return "";
				}
			}
	4. 工厂模式在 JDK-Calendar 应用得源码分析
		① JDK 中的 Calendar 类中，就使用了简单工厂模式
		② 源码分析
			A. 调用 Calendar.getInstance() 获取 Calendar 对象
				Calendar instance = Calendar.getInstance();
			B. getInstance() 方法中调用了 createCalendar 方法
				public static Calendar getInstance()
					{
						return createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT));
					}
			C. 在 Calendar 方法中根据不同的时区创建不同的对象
				if (aLocale.hasExtensions()) {
					String caltype = aLocale.getUnicodeLocaleType("ca");
					if (caltype != null) {
						switch (caltype) {
						case "buddhist":
						cal = new BuddhistCalendar(zone, aLocale);
							break;
						case "japanese":
							cal = new JapaneseImperialCalendar(zone, aLocale);
							break;
						case "gregory":
							cal = new GregorianCalendar(zone, aLocale);
							break;
						}
					}
				}
			D. BuddhistCalendar、JapaneseImperialCalendar、GregorianCalendar 都继承了 Calendar 类
	5. 工厂模式小结
		① 工厂模式的意义：将实例化对象的代码提取处理，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的扩展和维护性
		② 三种工厂模式
			A. 简单工厂
			B. 工厂方法
			C. 抽象工厂
		③ 设计模式的依赖抽象原则
			A. 创建对象实例时，不要直接 new 类，而是把这个 new 类的动作放在一个工厂的方法中，并且返回。
			B. 不要让类继续具体的类，而是继承抽象类（abstract）或者是实现接口（interface）
			C. 不要覆盖基类中已经实现的方法