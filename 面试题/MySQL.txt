一. 锁
	1. 表锁
		① 特点：偏向于MyISAM存储引擎，开销小，加锁快，无死锁。锁定粒度大，发生冲突的概率最高，并发性最低
		② 对MyISAM表进行操作时，会有以下情况；
			A. 对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读操作，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其他进程的写操作
			B. 对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其他的读和写操作
			C. 简而言之，就是读锁会阻塞写，但是不会阻塞读。而写锁会把读和写都阻塞。
	2. 行锁（偏写）
		① 特点：偏向InnoDB存储引擎，开销大，加锁慢，会出现死锁，锁的粒度最小，发生冲突概率最小，并发度也最高
		② InnoDB与MyISAM的最大不同有两点：支持事务（Transaction）和采用了行锁
		⑤ 结论：
			A. Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来的性能消耗可能比表级锁定会更高一些，但是整体并发处理能力方面要远远优于
			MyISAM的标记锁定的。当系统并发量较高的时候，Innodb的整体性能和MyISAM相比就会有比较明显的优势了。
			B. 但是，Innodb的行级锁定同样有其脆弱的一面，当我们使用不当的时候，可能会让Innodb的整体性能表现不仅不能比MyISAM高，甚至可能会更差。
		⑥ 行锁
			A. 将当前session的自动提交修改为set autocommit = 0;,
			B. 当对当前表进行的某一行进行写操作并为提交时，其他session可以对当前表进行读的操作，并且读的是未修改前的值，符合了避免脏读
			C. 当对当前表进行的某一行进行写操作并为提交时，其他session同一行进行写操作时，会发生阻塞，指定当前session提交修改。
			D. 当对当前表进行的某一行进行写操作并为提交时，其他session可以对其他行进行写操作，两者并不干扰。
		③ 无索引行锁升级为表锁：当前session对某一行进行写操作时造成了索引失效，而其他session对其他行进行写操作时会发生阻塞，此时行锁升级表锁。
		④ 间隙锁的危害
			A. 什么是间隙锁。
			当我们用范围条件而不是相等条件检索数据，并请求共享锁或排它锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范
			围内并不存在的记录，叫做“间隙（GAP）”，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（Next-Key锁）。
			B. 间隙锁的危害
			因为Query执行过程中通过范围查找的haul，则会锁住整个范围内的所有键值，即使这个键值并不存在。
			间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键
			值范围内的任何数据，在某些场景下可能对性能造成很大的危害。
	3. 页锁 
		① 特点：开销和加锁时间介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般
二、主从复制
	1. 复制的基本原理
		① slave会从master读取binlog进行数据同步
		② MySQL 复制过程分成三步：
			A. Master将改变记录到二进制日志（binaty log）。这些记录过程叫做二进制日志事件，binary log events;
			B. slave将master的binaty log events拷贝到它的中继日志（relay log）
			C. slave重做中继日志中的事件，将改变应用到自己的数据库中。MySQL复制是异步的且串行化的。
	2. 一主一从的常见配置
		① 主机修改my.ini配置文件
			A. 主机服务器唯一ID（必须）
			B. 启用二进制日志（必须）
			C. 设置不要复制的数据库（可选）
			I. 设置需要复制的数据库（可选）
		② 从机修改my.cnf配置文件
			A. 从机服务器唯一ID（必须）
			B. 启用二进制日志（可选，建议打开）
		③ 因修改过配置文件，主机+从机都需要重启后台MySQL服务
		④ 主机从机都关闭防火墙
		⑤ 主机上建立账户并授权slave
		⑥ 从机上配置需要复制的主机
三、索引
	1. 哪些情况需要创建索引
		① 主键自动建议唯一索引
		② 频繁作为查询条件的字段应该创建索引
		③ 查询中与其他表关联的字段，外键关系建立索引
		④ 查询中排序的字段
		⑤ 查询中统计或者分组字段
	2. 哪些情况不需要太创建索引
		① 表的记录太少
		② 经常增删改的表
		③ 数据重复且分布均匀的表字段
	3. 索引失效
		① 全值匹配：检索的字段（where后的条件查询）与索引的字段和顺序一一吻合
		② 最佳左前缀法则：指的是查询从索引的最左前列开始并且不能跳过索引中的列
		③ 不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描
		④ 存储引擎不能使用索引中范围条件右边的列
		⑤ 尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select *
		⑥ mysql在使用不等于（!=或者<>）的时候无法使用索引会导致全表扫描
		⑦ is null，is not null也无法使用索引
		⑧ like以通配符开头（'%abc....'）mysql索引失效会变成全表扫面的操作
		⑨ 字符串不加单引号（双引号）索引会失效
		⑩ 少用or，用它来连接时会索引失效
	4. 查询优化
		① 观察：至少运行系统一天，查看生产的慢SQL情况
		② 开启慢查询日志：设置阙值：比如超过五秒钟的就是慢SQL，并将它抓取出来
		③ explain + 慢SQL分析，此时能得出80%的结论
		④ show profile，此时能得出99%的结论
		⑤ 运维经理 or DBA，进行SQL数据库服务器的参数调优
四、事务
	1. 事务的特点（事务的ACID属性）
		① 原子性（Atomicity）：原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生
		② 一致性（Consistency）：事务必须使数据库从一个一致性状态变换到另一个一致性状态
		③ 隔离性（Isolation）：事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据
								对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰
		④ 持久性（Durability）：持久性是指一个事务一旦被提交，它对数据的改变就是持久性的，接下来的其他操作和数据库
								故障不应该对其有任何影响
	2. 并发问题：
		① 脏读：对于两个事务T1，T2，T1读取了已经被T2更新但还是没有被提交的字段之后，若T2回滚，T1读取的内容时暂时且无效的
		② 不可重复读：对于两个事务T1，T2，T1读取了一个字段，然后T2更新了该字段之后，T1再次读取该字段，值就不同了
		③ 幻读：对于对于两个事务T1，T2，T1读取了一个字段，然后T2在表中插入一些新的行之后，若T1再次读取同一个字段，就会多出几行
	3. 数据库的事务隔离级别
		① read uncommitted(读未提交数据)：允许事务读取未被其他事务提交的更新。脏读、不可重复读、幻读等问题都会出现
		② read committed(读已提交数据)：只允许事务读取已经被其他事务提交变更的数据，可避免脏读、但不可重复读和幻读问题仍然可能出现
		③ repeatable read(可重复读)：确保事务可以多次从一个字段中读取相同的值，在这个事务持续期间，禁止其他事物对这个字段进行更新
										可以避免脏读和不可重复读，但幻读的问题依然存在
		④ serializable(串行化)：确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入，更新和删除操作
										所有并发性问题都可以解决，但是性能十分低下

五、自定义变量：
	①说明：变量是用户自定义的，而不是由系统定义的
	②使用步骤：声明并赋值、修改、使用（查看、比较、运算等）
	③用户变量：相当于Java中的全局变量
		A. 作用域：针对当于当前会话（连接）有效，等同于会话
					变量的作用域，应用在任何地方，包括begin...end范围内和范围外
		B. 赋值的操作符：=或者:=
		C. 变量声明并初始化
			(1)set @用户变量名 = 值;
			(2)set @用户变量名 := 值;
			(3)select @用户变量 := 值;
		D. 赋值（更新用户变量的值）
			(1)方式一：通过set或者select
				set @用户变量名 = 值;
				set @用户变量名 := 值;
				select @用户变量 := 值;
			(2)方式二：通过select into
				select 字段名 into @用户变量名 from 表
		E. 查看用户变量的值
			select @用户变量名
		F. 示例：
			#声明并初始化
			SET @id = 26;
			SET @name := 'Li';
			SELECT @gender := '男';
			SET @count = 0;

			#赋值（更新用户变量的值）
			SELECT COUNT(*) INTO @count FROM employees;

			#查看变量
			SELECT @id, @name, @gender, @count;
	④局部变量：相当于Java中的局部变量
		A. 作用域：仅仅在定义它的begin...end中有效，应用在begin...end的第一句
		B. 声明：
			declare 变量名 类型;
			declare 变量名 类型 default 值;
		B. 赋值：
			(1)方式一：通过set或者select
				set 变量名 = 值;
				set 变量名 := 值;
				select @变量名 := 值;
			(2)方式二：
				select 字段名 into 变量名 from 表;
		C. 使用：select 变量名;
		D. 示例：
			#变量声明
			DECLARE id INT DEFAULT 26;
			DECLARE NAME VARCHAR(20);
			SELECT @name := 'Li';
			DECLARE gender VARCHAR(1);
			SET gender := '男';
	⑤用户变量和局部变量的对比
		A. 用户变量的作用域是当前会话（连接），局部变量的作用域是定义它的begin...end中。
		B. 用户变量的定义是在当前会话（连接）的任意位置，局部变量的定义是在begin...end中的第一句。
		C. 用户变量的声明、赋值和使用都需要加@但不需要限定类型，局部变量一般不需要加@并且需要限定类型
六、储过程和函数：类似于Java中的方法
	1. 存储过程
		①含义：一组预先编译好的SQL语句的集合，理解成批处理语句
		②好处：
			A. 提高代码的重用性
			B. 简化操作
			C. 减少了编译的次数并且减少了和数据库服务器的连接次数，提高了效率
		③创建语法：
			create procedure 存储过程名(参数列表)
			begin
				存储过程体（一组合法的SQL语句）
			end
		④调用语法：call 存储过程名（实参列表）；
		⑤注意：
			A. 参数列表包含三部分：参数模式、参数名、参数类型
			B. 参数模式
				(1)in:该参数可以作为输入，也就是该参数需要调用方传入值
				(2)out:该参数可以作为输出，也就是该参数可以作为返回值
				(3)inout:该参数既可以作为输入又可以作为输出
			C. 存储过程体：
				(1)如果该存储过程体仅仅只有一条SQL语句，则begin...end可以省略
				(2)存储过程体中的每条SQL语句的结尾要求添加分号
				(3)存储过程体的结尾可以使用delimiter重新设置
					语法：delimiter 结束标记
		⑥空参存储过程示例
			#创建空参存储过程
			DELIMITER $ #重新设置存储过程的结尾标志
			CREATE PROCEDURE my_p1()
			BEGIN
				INSERT INTO stuinfo(`name`, gender)
				VALUES('Ke', '女'),('Lin', '男'),('wang', '女');
			END $
			#调用
			CALL my_p1()$
		⑦带in模式的存储过程示例
			 #验证登录名和密码
			 CREATE PROCEDURE my_p3(IN username VARCHAR(20), IN `password` VARCHAR(20))
			 BEGIN
				DECLARE result INT DEFAULT 0;#声明并初始化
				SELECT COUNT(*) INTO result#赋值
				FROM admin
				WHERE admin.`username` = username
				AND admin.`password` = `password`;
				SELECT IF(result>0, '成功', '失败');#使用
			 END $
			CALL my_p2('john', '8888')$
		⑧带out模式的存储过程示例
			#查看女生名对应男朋友的的名字和魅力值

			CREATE PROCEDURE my_p4(IN `beautyName` VARCHAR(20), OUT boyName VARCHAR(20), OUT userCP INT)
			BEGIN
				SELECT bo.boyName, bo.userCP INTO boyName, userCP
				FROM beauty b
				LEFT JOIN boys bo
				ON b.boyfriend_id = bo.id
				WHERE b.name = beautyName;
			END $
			CALL my_p4('赵敏', @boyName, @userCP)$
			SELECT @boyName, @userCP$
		⑨带inout模式的存储过程示例
			CREATE PROCEDURE my_p5(INOUT a INT, INOUT b INT)
			BEGIN
				SET a = a*2;
				SET b := b*2;
			END $
			#定义全局变量
			SET @m = 26$
			SET @n := 48$
			#调用存储过程
			CALL my_p5(@m, @n)$
			SELECT @m, @n$
		⑩删除存储过程:
			语法：drop procedure 存储过程名
			注：不能一条语句删除多个存储过程
		⑩①查看存储过程
			show create procedure 存储过程名
			注：不能修改存储过程的内容
	2. 函数
		①含义：一组预先编译好的SQL语句的集合，理解成批处理语句
		②好处：
			A. 提高代码的重用性
			B. 简化操作
			C. 减少了编译的次数并且减少了和数据库服务器的连接次数，提高了效率
		③区别：
			A. 储过程：可以没有返回，也可以有多个返回，适合批量插入、批量更新
			B. 函数：必须要有一个返回，适合做数据处理后返回一个结果
		④创建语法：
			create function 函数名(参数列表) returns 返回值类型
			begin
				函数体
				return 语句;
			end 重新设置结束符号
		⑤注意：
			A. 参数列表包含两部分：参数名 参数类型
			B. 函数体中return 语句放在函数体中不报错，但是不建议
			C. return 语句必须存在，否则会编译异常
			D. 如果函数体只有一句话，则begin和end可以省略
			E. 使用delimiter语句设置结束标记符号
		⑥调用语法：select 函数名(实参列表)
		⑦示例
			#根据部门查询部门的平均工资
			CREATE FUNCTION my_f1(deptName VARCHAR(20)) RETURNS DOUBLE
			BEGIN
				DECLARE avg_sal DOUBLE DEFAULT 0;
				SELECT AVG(salary) INTO avg_sal
				FROM employees e
				INNER JOIN departments d
				ON e.department_id = d.department_id
				WHERE d.department_name = deptName;
				RETURN avg_sal;
			END $
			SELECT my_f1('IT')$
		⑧查看函数：show create function 函数名;
		⑨删除函数：drop function 函数名;























