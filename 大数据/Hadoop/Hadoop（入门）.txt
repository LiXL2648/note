一、Hadoop 概述
	1. Hadoop 是什么
		① Hadoop是一个由Apache基金会所开发的分布式系统基础架构。
		② 主要解决，海量数据的存储和海量数据的分析计算问题。
		③ 广义上来说，Hadoop通常是指一个更广泛的概念——Hadoop生态圈。
	2. Hadoop 发展历史（了解）
		① Hadoop创始人Doug Cutting，为 了实 现与Google类似的全文搜索功能，他在Lucene框架基础上进行优化升级，查询引擎和索引引擎。
		② 2001年年底Lucene成为Apache基金会的一个子项目。
		③ 对于海量数据的场景，Lucene框架面对与Google同样的困难，存储海量数据困难，检索海量速度慢。
		④ 学习和模仿Google解决这些问题的办法 ：微型版Nutch。
		⑤ 可以说Google是Hadoop的思想之源（Google在大数据方面的三篇论文）
			A. GFS --->HDFS
			B. Map-Reduce --->MR
			C. BigTable --->HBase
		⑥ 2003-2004年，Google公开了部分GFS和MapReduce思想的细节，以此为基础Doug Cutting等人用了2年业余时间实现了DFS和MapReduce机制，使Nutch性能飙升。
		⑦ 2005 年Hadoop 作为 Lucene的子项目 Nutch的一部分正式引入Apache基金会。
		⑧ 2006 年 3 月份，Map-Reduce和Nutch Distributed File System （NDFS）分别被纳入到 Hadoop 项目中，Hadoop就此正式诞生，标志着大数据时代来临。
		⑥ 名字来源于Doug Cutting儿子的玩具大象
	3. Hadoop 三大发行版本（了解）
		① Hadoop 三大发行版本：Apache、Cloudera、Hortonworks。
			A. Apache： 版本最原始（最基础）的版本，对于入门学习最好。2006
			B. Cloudera： 内部集成了很多大数据框架，对应产品 CDH。2008
			C. Hortonworks： 文档较好，对应产品 HDP。2011
			D. Hortonworks 现在已经被 Cloudera 公司收购，推出新的品牌 CDP。
		② Apache Hadoop
			A. 官网地址：http://hadoop.apache.org
			B. 下载地址：https://hadoop.apache.org/releases.html
		③ Cloudera Hadoop
			A. 官网地址：https://www.cloudera.com/downloads/cdh
			B. 下载地址：https://docs.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_cdh_6_download.html
			C. 2008 年成立的 Cloudera 是最早将 Hadoop 商用的公司，为合作伙伴提供 Hadoop 的商用解决方案，主要是包括支持、咨询服务、培训。
			D. 2009 年 Hadoop 的创始人 Doug Cutting 也加盟 Cloudera 公司。Cloudera 产品主要为 CDH，Cloudera Manager，Cloudera Support
			E. CDH 是 Cloudera 的 Hadoop 发行版，完全开源，比 Apache Hadoop 在兼容性，安全性，稳定性上有所增强。Cloudera 的标价为每年每个节点 10000 美元。
			F. Cloudera Manager 是集群的软件分发及管理监控平台，可以在几个小时内部署好一个 Hadoop 集群，并对集群的节点及服务进行实时监控。
		④ Hortonworks Hadoop
			A. 官网地址：https://hortonworks.com/products/data-center/hdp/
			B. 下载地址：https://hortonworks.com/downloads/#data-platform
			C. 2011 年成立的 Hortonworks 是雅虎与硅谷风投公司 Benchmark Capital 合资组建。
			D. 公司成立之初就吸纳了大约 25 名至 30 名专门研究 Hadoop 的雅虎工程师，上述工程师均在 2005 年开始协助雅虎开发 Hadoop，贡献了 Hadoop80%的代码。
			E. Hortonworks 的主打产品是 Hortonworks Data Platform（HDP），也同样是 100%开源的产品，HDP 除常见的项目外还包括了 Ambari，一款开源的安装和管理系统。
			F. 2018 年 Hortonworks 目前已经被 Cloudera 公司收购。
	4. Hadoop 优势（4 高）
		① 高可靠性：Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失。
		② 高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。
		③ 高效性：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。
		④ 高容错性：能够自动将失败的任务重新分配。
	5. Hadoop 组成（面试重点）
		① Hadoop1.x、2.x、3.x区别
			A. Hadoop1.x组成
				a. Common（辅助工具）
				b. HDFS（数据存储）
				c. MapReduce（计算+资源调度）
			B. Hadoop2.x组成
				a. Common（辅助工具）
				b. HDFS（数据存储）
				c. Yarn（资源调度）
				d. MapReduce（计算）
			C. 在 Hadoop1.x 时 代 ，Hadoop中 的MapReduce同时处理业务逻辑运算和资源的调度，耦合性较大。在Hadoop2.x时代，增加了Yarn。Yarn只负责资源的调度，
			MapReduce 只负责运算。Hadoop3.x在组成上没有变化。
		②  HDFS 架构概述
			A. Hadoop Distributed File System，简称 HDFS，是一个分布式文件系统。
			B. NameNode（nn）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的DataNode等。
			C. DataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。
			D. Secondary NameNode(2nn)：每隔一段时间对NameNode元数据备份。
		③ YARN 架构概述
			A. Yet Another Resource Negotiator 简称 YARN ，另一种资源协调者，是 Hadoop 的资源管理器。
			B. ResourceManager（RM）：整个集群资源（内存、CPU等）的老大
			C. NodeManager（NM）：单个节点服务器资源老大
			D. ApplicationMaster（AM）：单个任务运行的老大
			E. Container：容器，相当一台独立的服务器，里面封装了任务运行所需要的资源，如内存、CPU、磁盘、网络等。
			F. 说明：
				a. 客户端可以有多个
				b. 集群上可以运行多个ApplicationMaster
				c. 每个NodeManager上可以有多个Container
		④ MapReduce 架构概述
			A. MapReduce 将计算过程分为两个阶段：Map 和 Reduce
			B. Map 阶段并行处理输入数据
			C. Reduce 阶段对 Map 结果进行汇总
		⑤ HDFS、YARN、MapReduce 三者关系
	6. 大数据技术生态体系
		① Sqoop：Sqoop 是一款开源的工具，主要用于在 Hadoop、Hive 与传统的数据库（MySQL）间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）
		中的数据导进到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中。
		② Flume：Flume 是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据；
		③ Kafka：Kafka 是一种高吞吐量的分布式发布订阅消息系统；
		④ Spark：Spark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大数据进行计算。
		⑤ Flink：Flink 是当前最流行的开源大数据内存计算框架。用于实时计算的场景较多。
		⑥ Oozie：Oozie 是一个管理 Hadoop 作业（job）的工作流程调度管理系统。
		⑦ Hbase：HBase 是一个分布式的、面向列的开源数据库。HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。
		⑧ Hive：Hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的 SQL 查询功能，可以将 SQL 语句转换为 MapReduce 
		任务进行运行。其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开发专门的 MapReduce 应用，十分适合数据仓库的统计分析。
		⑨ ZooKeeper：它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。
二、Hadoop 运行环境搭建（开发重点）
	1. 模板虚拟机环境准备
		① 安装模板虚拟机，IP 地址 192.168.10.100、主机名称 hadoop100、内存 4G、硬盘 50G
			A. 安装 VMWare 16
			B. 安装 Centos 7（CentOS-7-x86_64-DVD-2009.iso）
			C. 配置IP
				a. VMWare：
					(1) 编辑 -> 虚拟网络编辑器 -> 选择 VMWare 8 -> 点击更改设置
					(2) 子网IP：192.168.230.0
					(3) 点击 NET 设置，网关 IP：192.168.230.2
				b. Windows10：
					(1) 打开网络适配器 -> 选择 VMWare 8 -> 右键选择属性 -> Internet 协议版本4（TCP/IPv4）属性 
					(2) IP：192.168.230.1
					(3) 子网掩码：255.255.255.0
					(4) 默认网关：192.168.230.2
					(5) 首选 DNS 服务器：192.168.230.2
					(6) 备用 DNS 服务器：8.8.8.8
				c. Centos 7
					(1) vi /etc/sysconfig/network-scripts/ifcfg-ens33
					(2) 将 BOOTPROTO="decp" 改为 BOOTPROTO="static"
					(3) 添加以下内容
						IPADDR=192.168.230.100
						GATEWAY=192.168.230.2
						DNS1=192.168.230.2
			D. 配置主机名：vi /etc/hostname
			E. 配置IP地址映射：vi /etc/hosts
				192.168.230.100 hadoop100
				192.168.230.101 hadoop101
				192.168.230.102 hadoop102
		② hadoop100 虚拟机配置要求如下
			A. 使用 yum 安装需要虚拟机可以正常上网，yum 安装前可以先测试下虚拟机联网情况
				ping www.baidu.com -c 3 
			B. 安装 epel-release
				a. yum install -y epel-release
				b. 注：Extra Packages for Enterprise Linux 是为“红帽系”的操作系统提供额外的软件包，适用于 RHEL、CentOS 和 Scientific Linux。相当于是一个软件仓库，
				大多数 rpm 包在官方repository 中是找不到的）
			C. 注意：如果 Linux 安装的是最小系统版，还需要安装如下工具；如果安装的是 Linux桌面标准版，不需要执行如下操作
				a. net-tool：工具包集合，包含 ifconfig 等命令：yum install -y net-tools
				b. vim：编辑器：yum install -y vim
		③ 关闭防火墙，关闭防火墙开机自启
			A. systemctl stop firewalld
			B. systemctl disable firewalld.service
			C. 注意：在企业开发时，通常单个服务器的防火墙时关闭的。公司整体对外会设置非常安全的防火墙
		④ 创建 LiXL 用户，并修改 LiXL 用户的密码
			useradd LiXL
			passwd LiXL
		⑤ 配置 LiXL 用户具有 root 权限，方便后期加 sudo 执行 root 权限的命令
			A. vim /etc/sudoers
			B. 修改/etc/sudoers 文件，在%wheel 这行下面添加一行，如下所示：
				LiXL ALL=(ALL) NOPASSWD:ALL
			C. 注意：LiXL 这一行不要直接放到 root 行下面，因为所有用户都属于 wheel 组，你先配置了 LiXL 具有免密功能，但是程序执行到%wheel 行时，该功能又被覆
			盖回需要密码。所以 LiXL 要放到%wheel 这行下面。
			D. 切换root账户：su root 
			E. 退出root账户：exit
		⑥ 在/opt 目录下创建文件夹，并修改所属主和所属组
			A. 在/opt 目录下创建 module、software 文件夹
				mkdir /opt/module
				mkdir /opt/software
			B. 修改 module、software 文件夹的所有者和所属组均为 LiXL 用户
				chown LiXL:LiXL /opt/module
				chown LiXL:LiXL /opt/software
			C. 查看 module、software 文件夹的所有者和所属组
				cd /opt/
				ll
		⑦ 卸载虚拟机自带的 JDK
			A. 注意：如果你的虚拟机是最小化安装不需要执行这一步。
			B. 命令： rpm -qa | grep -i java | xargs -n1 rpm -e --nodeps
				a. rpm -qa：查询所安装的所有 rpm 软件包
				b. grep -i：忽略大小写
				c. xargs -n1：表示每次只传递一个参数
				d. rpm -e –nodeps：强制卸载软件
		⑧ 重启虚拟机：reboot
	2. 克隆虚拟机
		① 利用模板机 hadoop100，克隆三台虚拟机：hadoop101 hadoop102 hadoop103，克隆时，要先关闭 hadoop100
		② 修改克隆机 IP，主机名和映射文件
		③ 重启克隆机 hadoop102
	3.  在 hadoop101 安装 JDK
		① 注意：安装 JDK 前，一定确保提前删除了虚拟机自带的 JDK。
		② 将 JDK 导入到 opt 目录下面的 software 文件夹下面
		③ 解压 JDK 到/opt/module 目录下
			tar -zxvf jdk-8u212-linux-x64.tar.gz -C /opt/module/
		④ 配置 JDK 环境变量
			A. 新建/etc/profile.d/my_env.sh 文件
				vim /etc/profile.d/my_env.sh
			B. 添加如下内容
				#JAVA_HOME
				export JAVA_HOME=/opt/module/jdk1.8.0_212
				export PATH=$PATH:$JAVA_HOME/bin
			C. 保存后退出，source 一下/etc/profile 文件，让新的环境变量 PATH 生效
				:wq
				source /etc/profile
		⑤ 测试 JDK 是否安装成功
			java -version
	4. 在 hadoop102 安装 Hadoop
		① Hadoop 下载地址：https://archive.apache.org/dist/hadoop/common/hadoop-3.1.3/
		② 将 hadoop-3.1.3.tar.gz 导入到 opt 目录下面的 software 文件夹下面
		③ 进入到 Hadoop 安装包路径下
			cd /opt/software/
		④ 解压安装文件到/opt/module 下面
			 tar -zxvf hadoop-3.1.3.tar.gz -C /opt/module/
		⑤ 将 Hadoop 添加到环境变
			A. 获取 Hadoop 安装路径
				cd /opt/module/hadoop-3.1.3
				pwd
			B. 打开/etc/profile.d/my_env.sh 文件
				vim /etc/profile.d/my_env.sh
			C. 在 my_env.sh 文件末尾添加如下内容：（shift+g）
				#HADOOP_HOME
				export HADOOP_HOME=/opt/module/hadoop-3.1.3
				export PATH=$PATH:$HADOOP_HOME/bin
				export PATH=$PATH:$HADOOP_HOME/sbin
			D. 保存并退出，让修改后的文件生效
				:wq
				source /etc/profile
		⑥ 测试是否安装成功
			 hadoop version
	5. Hadoop 目录结构
		① bin 目录：存放对 Hadoop 相关服务（hdfs，yarn，mapred）进行操作的脚本
		② etc 目录：Hadoop 的配置文件目录，存放 Hadoop 的配置文件
		③ lib 目录：存放 Hadoop 的本地库（对数据进行压缩解压缩功能）
		④ sbin 目录：存放启动或停止 Hadoop 相关服务的脚本
		⑤ share 目录：存放 Hadoop 的依赖 jar 包、文档、和官方案例
	6. 修改 windows 的主机映射文件（hosts 文件）
		① 进入 C:\Windows\System32\drivers\etc 路径
		② 打开 hosts 文件，并添加如下内容
			192.168.230.100 hadoop100
			192.168.230.101 hadoop101
			192.168.230.102 hadoop102
			192.168.230.103 hadoop103
			192.168.230.104 hadoop104
			192.168.230.105 hadoop105
			192.168.230.106 hadoop106
			192.168.230.107 hadoop107
三、Hadoop 运行模式
	1. 简介：
		① Hadoop 官方网站：http://hadoop.apache.org
		② Hadoop 运行模式包括：本地模式、伪分布式模式以及完全分布式模式。
			A. 本地模式：单机运行，只是用来演示一下官方案例。生产环境不用。
			B. 伪分布式模式：也是单机运行，但是具备 Hadoop 集群的所有功能，一台服务器模拟一个分布式的环境。个别缺钱的公司用来测试，生产环境不用。
			C. 完全分布式模式：多台服务器组成分布式环境。生产环境使用。
	2.  本地运行模式（官方 WordCount）
		① 创建在 hadoop-3.1.3 文件下面创建一个 wcinput 文件夹
			mkdir wcinput
		② 在 wcinput 文件下创建一个 word.txt 文件
			vim wcinput/word.txt
		③ 编辑 word.txt 文件，在文件中输入如下内容
			LiLX LiLX LiLX
			LiXL LiXL
			YuCX
			KeYD
		④ 回到 Hadoop 目录/opt/module/hadoop-3.1.3，执行程序
			hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount wcinput/ wcoutput
		⑤ 查看结果
			cat wcoutput/part-r-00000
		⑥ 结果如下：
			KeYD	1
			LiLX	3
			LiXL	2
			YuCX	1
		⑦ 注意：执行程序时，输出路径不能存在，否则会报路径存在的异常
	3. 完全分布式运行模式（开发重点）
		① 分析：
			A. 准备 3 台客户机（关闭防火墙、静态 IP、主机名称）
			B. 安装 JDK
			C. 配置环境变量
			D. 安装 Hadoop
			E. 配置环境变量
			F. 配置集群
			G. 单点启动
			H. 配置 ssh
			I. 群起并测试集群
		② 编写集群分发脚本 xsync
			A. scp（secure copy）安全拷贝
				a. scp 定义：scp 可以实现服务器与服务器之间的数据拷贝。（from server1 to server2）
				b. 基本语法
					scp -r $pdir/$fname $user@$host:$pdir/$fname
				c. 语法解释
					(1) scp：命令
					(2) -r：递归 
					(3) $pdir/$fname：要拷贝的文件路径/名称
					(4) $user@$host:：目的地用户@主机
					(5) $pdir/$fnam：目的地路径/名称
				d. 案例实操
					(1) 前提：在 hadoop102、hadoop103、hadoop104 都已经创建好的/opt/module、 /opt/software 两个目录
					(2) 在 hadoop101 上，将 hadoop101 中/opt/module/jdk1.8.0_212 目录拷贝到hadoop102 上
						scp -r jdk1.8.0_261/ root@hadoop102:/opt/module/
					(3) 在 hadoop102 上，将 hadoop101 中/opt/module/hadoop-3.1.3 目录拷贝到hadoop102 上。
						scp -r root@hadoop101:/opt/module/hadoop-3.1.3 /opt/module/
					(4) 在 hadoop102 上操作，将 hadoop101 中/opt/module 目录下所有目录拷贝到hadoop103 上。
						scp -r root@hadoop101:/opt/module/* root@hadoop103:/opt/module/
			B. rsync 远程同步工具
				a. rsync 主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。
				b. rsync 和 scp 区别：用 rsync 做文件的复制要比 scp 的速度快，rsync 只对差异文件做更新。scp 是把所有文件都复制过去。
				c. 基本语法
					rsync -av $pdir/$fname $user@$host:$pdir/$fname
				d. 语法解释
					(1) rsync：命令
					(21) -av：-a，归档拷贝，-v，显示复制过程
					(3) $pdir/$fname：要拷贝的文件路径/名称
					(4) $user@$host:：目的地用户@主机
					(5) $pdir/$fname：目的地路径/名称
				e. 案例实操
					(1) 在 hadoop101、hadoop102和hadoop103 中安装 rsync
						yum install -y rsync.x86_64
					(2) 删除 hadoop102 中/opt/module/hadoop-3.1.3 的 wcinput wcoutput
						rm -rf wcinput/ wcoutput/
					(3) 同步 hadoop101 中的/opt/module/hadoop-3.1.3 到 hadoop102
						rsync module/hadoop-3.1.3/ -av root@hadoop102:/opt/module/hadoop-3.1.3/
			C. xsync 集群分发脚本
				a. 需求：循环复制文件到所有节点的相同目录下
				b. 需求分析：
					(1) rsync 命令原始拷贝：
						rsync /opt/module/ root@hadoop102:/opt/
					(2) 期望脚本：
						xsync 要同步的文件名称
					(3) 期望脚本在任何路径都能使用
				c. 脚本实现
					(1) 在 /opt/bin 目录创建 xsync 文件
						cd /opt
						mkdir bin
						cd bin
						vim xsync
					(2) 在该文件中编写如下代码
						#!/bin/bash

						#1. 判断参数个数
						if [ $# -lt 1 ]
						then
							echo Not Enough Arguement!
							exit;
						fi

						#2. 遍历集群所有机器
						for host in hadoop101 hadoop102 hadoop103
						do
							echo ==================== $host ====================
							#3. 遍历所有目录，挨个发送
							for file in $@
							do
								#4. 判断文件是否存在
								if [ -e $file ]
								then
									#5. 获取父目录
									pdir=$(cd -P $(dirname $file); pwd)

									#6. 获取当前文件的名称
									fname=$(basename $file)
									ssh $host "mkdir -p $pdir"
									rsync -av $pdir/$fname $host:$pdir
								else
									echo $file does not exists!
								fi
							done
						done
					(3) 修改脚本 xsync 具有执行权限
						chmod +x xsync
					(4) 同步环境变量配置（root 所有者）
						./xsync /etc/profile.d/my_env.sh
					(5) 让环境变量生效
						source /etc/profile
		③ SSH 无密登录配置
			A. 配置 ssh
				a. 基本语法
					ssh 另一台电脑的 IP 地址：ssh hadoop102
				b. ssh 连接时出现 Host key verification failed 的解决方法
					(1) 如果出现如下内容
						Are you sure you want to continue connecting (yes/no)?
					(2) 输入 yes，并回车
				c. 退回到 hadoop101
					exit
				d. 进入家目录
					cd ~
				e. 查看目录的所有文件（包括隐藏文件），可以发现 hadoop102 有.ssh，但是hadoop103没有，原因是 hadoop101 登录过 hadoop1002
					ll -al
			B. 无密钥配置			
				a. 免密登录原理
					
									A 服务器																B服务器
					+---------------------------------------+								+-------------------------------------+
					|										|  (3) ssh 访问B（数据用私钥	| 	+-----------------------------+	  |
					|										| ----------------------------> | 	| (4) 接收到数据后，去授权key |	  |
					|		(1) ssh-key-gen 生成密钥对		|			A 加密）			|	| 中查找 A 的公钥，并解密数据 |	  |
					|	+------+	+-------------------+	|  (5) 采用A的公钥加密的数据	|	+-----------------------------+   |
					|	| 	   |	| (6) 接收到数据后，|	| <-----------------------------|		  授权key	↑				  |
					|	| 公钥 |	| 用A的私钥解密数据 |	|			返回给A				|	Authorized_keys |				  |
					|	|	   |	| 	  私钥（A）		|	|								|	+-----------------------------+   |
					|	+------+	+-------------------+	|								|	| 			公钥（A）		  |   |
					|		|								|								|	+-----------------------------+   |
					|		|								|			(2) 拷贝			|					↑				  |
					|		+-------------------------------|-------------------------------|-------------------+				  |
					+---------------------------------------+								+-------------------------------------+
				b. 生成公钥和私钥
					cd ~/.ssh/
					ssh-keygen -t rsa
					然后敲（三个回车），就会生成两个文件 id_rsa（私钥）、id_rsa.pub（公钥）
				c. 将公钥拷贝到要免密登录的目标机器上
					ssh-copy-id hadoop101
					ssh-copy-id hadoop102
					ssh-copy-id hadoop103
				d. 注意：还需要在 hadoop102、hadoop103 上采用 配置一下无密登录到 hadoop101、hadoop102、hadoop103 服务器上。
			C. .ssh 文件夹下（~/.ssh）的文件功能解释
				a. known_hosts 记录 ssh 访问过计算机的公钥（public key）
				b. id_rsa 生成的私钥
				c. id_rsa.pub 生成的公钥
				d. authorized_keys 存放授权过的无密登录服务器公钥
				
	4. 集群配置
		① 集群部署规划
			A. 注意：
				a. NameNode 和 SecondaryNameNode 不要安装在同一台服务器
				b. ResourceManager 也很消耗内存，不要和 NameNode、SecondaryNameNode 配置在同一台机器上。
			B. 规划
				+-------+-------------+-----------------+-------------------+
				|	 	| hadoop101   | hadoop102		| hadoop103			|
				+-------+-------------+-----------------+-------------------+
				| HDFS 	| NameNode    |				 	| SecondaryNameNode |
				|		| DataNode    | DataNode		| DataNode			|
				+-------+-------------+-----------------+-------------------+
				|	 	|			  | ResourceManager |					|
				| YARN 	| NodeManager | NodeManager     | NodeManager		|
				+-------+-------------+-----------------+-------------------+
		② 配置文件说明
			A. Hadoop 配置文件分两类：默认配置文件和自定义配置文件，只有想修改某一默认配置值时，才需要修改自定义配置文件，更改相应属性值。
			B. 默认配置文件：
				+----------------------+-----------------------------------------------------------+
				| 要获取的默认文件	   | 文件存放在 Hadoop 的 jar 包中的位置					   |
				+----------------------+-----------------------------------------------------------+
				| [core-default.xml]   | hadoop-common-3.1.3.jar/core-default.xml				   |
				+----------------------+-----------------------------------------------------------+
				| [hdfs-default.xml]   | hadoop-hdfs-3.1.3.jar/hdfs-default.xml					   |
				+----------------------+-----------------------------------------------------------+
				| [yarn-default.xml]   | hadoop-yarn-common-3.1.3.jar/yarn-default.xml			   |
				+----------------------+-----------------------------------------------------------+
				| [mapred-default.xml] | hadoop-mapreduce-client-core-3.1.3.jar/mapred-default.xml |
				+----------------------------------------------------------------------------------+
			C. 自定义配置文件：core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml 四个配置文件存放在$HADOOP_HOME/etc/hadoop 这个
				路径上，可以根据项目需求重新进行修改配置。
		③ 配置集群
			A. 核心配置文件
				a. 配置 core-site.xml
					cd $HADOOP_HOME/etc/hadoop
					vim core-site.xml
				b. 文件内容如下：
					<configuration>
						<!-- 指定 NameNode 的地址 -->
						<property>
							<name>fs.defaultFS</name>
							<value>hdfs://hadoop101:8020</value>
						</property>
						<!-- 指定 hadoop 数据的存储目录 -->
						<property>
							<name>hadoop.tmp.dir</name>
							<value>/opt/module/hadoop-3.1.3/data</value>
						</property>
					</configuration>
			B. HDFS 配置文件
				a. 配置 hdfs-site.xml
					vim hdfs-site.xml
				b. 文件内容如下：
					<configuration>
						<!-- nn web 端访问地址-->
						<property>
							<name>dfs.namenode.http-address</name>
							<value>hadoop101:9870</value>
						</property>
						<!-- 2nn web 端访问地址-->
						<property>
							<name>dfs.namenode.secondary.http-address</name>
							<value>hadoop103:9868</value>
						</property>
					</configuration>
			C. YARN 配置文件
				a. 配置 yarn-site.xml
					vim yarn-site.xml
				b. 文件内容如下：
					<configuration>
						<!-- 指定 MR 走 shuffle -->
						<property>
							<name>yarn.nodemanager.aux-services</name>
							<value>mapreduce_shuffle</value>
						</property>
						<!-- 指定 ResourceManager 的地址-->
						<property>
							<name>yarn.resourcemanager.hostname</name>
							<value>hadoop102</value>
						</property>
						<!-- 环境变量的继承 -->
						<property>
							<name>yarn.nodemanager.env-whitelist</name>
							<value>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME</value>
						</property>
					</configuration>
			D. MapReduce 配置文件
				a. 配置 mapred-site.xml
					vim mapred-site.xml
				b. 文件内容如下：
					<configuration>
						<!-- 指定 MapReduce 程序运行在 Yarn 上 -->
						<property>
							<name>mapreduce.framework.name</name>
							<value>yarn</value>
						</property>
					</configuration>
		④ 在集群上分发配置好的 Hadoop 配置文件
			/opt/bin/xsync /opt/module/hadoop-3.1.3/etc/hadoop/
		⑤ 去 102 和 103 上查看文件分发情况
			cat /opt/module/hadoop-3.1.3/etc/hadoop/core-site.xm
			cat /opt/module/hadoop-3.1.3/etc/hadoop/core-site.xml
	5. 群起集群
		① 配置 workers
			A. vim /opt/module/hadoop-3.1.3/etc/hadoop/workers
			B. 在该文件中增加如下内容：
				hadoop102
				hadoop103
				hadoop104
			C. 注意：该文件中添加的内容结尾不允许有空格，文件中不允许有空行。
			D. 同步所有节点配置文件
				xsync /opt/module/hadoop-3.1.3/etc/hadoop/workers
		② 启动集群
			A. 如果集群是第一次启动，需要在 hadoop102 节点格式化 NameNode（注意：格式化 NameNode，会产生新的集群 id，导致 NameNode 和 DataNode 的集群 id 不一致，
			集群找不到已往数据。如果集群在运行过程中报错，需要重新格式化 NameNode 的话，一定要先停止 namenode 和 datanode 进程，并且要删除所有机器的 data 和 logs 
			目录，然后再进行格式化。）
				hdfs namenode -format
			B. 启动 HDFS
				start-dfs.sh
			C. 在配置了 ResourceManager 的节点（hadoop102）启动 YARN
				start-yarn.sh
			D. 启动 HDFS 和 YARN 的报错信息
				Starting namenodes on [hadoop101]
				ERROR: Attempting to operate on hdfs namenode as root
				ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation.
				Starting datanodes
				ERROR: Attempting to operate on hdfs datanode as root
				ERROR: but there is no HDFS_DATANODE_USER defined. Aborting operation.
				Starting secondary namenodes [hadoop103]
				ERROR: Attempting to operate on hdfs secondarynamenode as root
				ERROR: but there is no HDFS_SECONDARYNAMENODE_USER defined. Aborting operation.
			E. 	解决启动 HDFS 和 YARN 的报错问题
				a. 修改环境变量配置为文件
					vim /etc/profile.d/my_env.sh
				b. 加入以下环境变量
					export HDFS_NAMENODE_USER=root
					export HDFS_DATANODE_USER=root
					export HDFS_SECONDARYNAMENODE_USER=root
					export YARN_RESOURCEMANAGER_USER=root
					export YARN_NODEMANAGER_USER=root
				c. 使环境变量生效
					source /etc/profile
				d. 重新启动 HDFS 和 YARN
			F. 使用 jps 对比每个节点的进程与集群部署规划信息是否一致。
			G. Web 端查看 HDFS 的 NameNode
				a. 浏览器中输入：http://192.168.230.101:9870/
				b. 查看 HDFS 上存储的数据信息
			H. Web 端查看 YARN 的 ResourceManager
				a. 浏览器中输入：http://192.168.230.102:8088/
				b. 查看 YARN 上运行的 Job 信息
		③ 集群基本测试
			A. 上传文件到集群
				a. 在 hdfs 中创建文件夹
					hadoop fs -mkdir /input
				b. 上传小文件
					hadoop fs -put wcinput/word.txt /input
				c. 上传大文件
					hadoop fs -put /opt/software/jdk-8u261-linux-x64.tar.gz /input
				d. 上传文件后查看文件存放在什么位置
					(1) cd data/dfs/data/current/BP-625960563-192.168.230.101-1626688576004/current/finalized/subdir0/subdir0
					(2) 查看 HDFS 文件存储路径：pwd
						/opt/module/hadoop-3.1.3/data/dfs/data/current/BP-625960563-192.168.230.101-1626688576004/current/finalized/subdir0/subdir0
					(3) 查看 HDFS 在磁盘存储文件内容：
						blk_1073741825
						blk_1073741825_1001.meta
						blk_1073741826
						blk_1073741826_1002.meta
						blk_1073741827
						blk_1073741827_1003.meta
					(4) 查看文件：cat blk_1073741825
						LiLX LiLX LiLX
						LiXL LiXL
						YuCX
						KeYD
					(5) 拼接
						cat blk_1073741826>>tmp.tar.gz
						cat blk_1073741827>>tmp.tar.gz
						tar -zxvf tmp.tar.gz
				e. 下载
					hadoop fs -get /input/word.txt ./
				f. 执行 wordcount 程序
					hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount /input /output
	6. 配置历史服务器
		① 在 hadoop101 配置 mapred-site.xml
			vim etc/hadoop/mapred-site.xml
		② 在 mapred-site.xml 中增加如下配置
			<!-- 历史服务器端地址 -->
			<property>
				<name>mapreduce.jobhistory.address</name>
				<value>hadoop101:10020</value>
			</property>
			<!-- 历史服务器 web 端地址 -->
			<property>
				<name>mapreduce.jobhistory.webapp.address</name>
				<value>hadoop101:19888</value>
			</property>
		③ 分发配置
			xsync etc/hadoop/mapred-site.xml
		④ 需要重启 YARN
			hadoop102：stopt-yarn.sh
			hadoop102：start-yarn.sh
		⑤ 在 hadoop101 启动历史服务器
			mapred --daemon start historyserver
		⑥ 查看历史服务器是否启动
			jps
		⑦ 查看 JobHistory
			http://hadoop101:19888/jobhistory
	7. 配置日志的聚集
		① 简介
			A. 日志聚集概念：应用运行完成以后，将程序运行日志信息上传到 HDFS 系统上。
			B. 日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。
			C. 注意：开启日志聚集功能，需要重新启动 NodeManager 、ResourceManager 和 HistoryServer。
		② 开启日志聚集功能具体步骤如下：
			A. 在 hadoop101 配置 yarn-site.xm
				vim etc/hadoop/yarn-site.xml
			B. 在 yarn-site.xm 里面增加如下配置。
				<!-- 开启日志聚集功能 -->
				<property>
					<name>yarn.log-aggregation-enable</name>
					<value>true</value>
				</property>
				<!-- 设置日志聚集服务器地址 -->
				<property> 
					<name>yarn.log.server.url</name> 
					<value>http://hadoop101:19888/jobhistory/logs</value>
				</property>
				<!-- 设置日志保留时间为 7 天 -->
				<property>
					<name>yarn.log-aggregation.retain-seconds</name>
					<value>604800</value>
				</property>
			C. 分发配置 
				xsync etc/hadoop/yarn-site.xml
			D. 关闭 NodeManager 、ResourceManager 和 HistoryServer
				hadoop102：stop-yarn.sh
				hadoop101：mapred --daemon stop historyserver
			E. 启动 NodeManager 、ResourceManage 和 HistoryServer
				hadoop102：start-yarn.sh
				hadoop101：mapred --daemon start historyserver
			F. 删除 HDFS 上已经存在的输出文件
				hadoop fs -rm -r /output
			G. 执行 WordCount 程序
		③ 查看日志
			http://hadoop101:19888/jobhistory
	8. 集群启动/停止方式总结
		① 各个模块分开启动/停止（配置 ssh 是前提）常用
			A. 整体启动/停止 HDFS
				start-dfs.sh/stop-dfs.sh
			B. 整体启动/停止 YARN
				start-yarn.sh/stop-yarn.sh
		② 各个服务组件逐一启动/停止
			A. 分别启动/停止 HDFS 组件
				hdfs --daemon start/stop namenode/datanode/secondarynamenode
			B. 启动/停止 YARN
				yarn --daemon start/stop resourcemanager/nodemanager
	9. 编写 Hadoop 集群常用脚本
		① Hadoop 集群启停脚本（包含 HDFS，Yarn，Historyserver）：myhadoop.sh
			A. 创建执行脚本 myhadoop.sh
				cd /opt/bin
				vim myhadoop.sh
			B. 在 myhadoop.sh 输入如下内容
				#!/bin/bash
				if [ $# -lt 1 ]
				then
					echo "No Args Input..."
				exit ;
				fi

				case $1 in
				"start")
					echo " =================== 启动 hadoop 集群 ==================="
					echo " --------------- 启动 hdfs ---------------"
					ssh hadoop101 "/opt/module/hadoop-3.1.3/sbin/start-dfs.sh"
					echo " --------------- 启动 yarn ---------------"
					ssh hadoop102 "/opt/module/hadoop-3.1.3/sbin/start-yarn.sh"
					echo " --------------- 启动 historyserver ---------------"
					ssh hadoop101 "/opt/module/hadoop-3.1.3/bin/mapred --daemon start historyserver"
				;;
				"stop")
					echo " =================== 关闭 hadoop 集群 ==================="
					echo " --------------- 关闭 historyserver ---------------"
					ssh hadoop101 "/opt/module/hadoop-3.1.3/bin/mapred --daemon stop historyserver"
					echo " --------------- 关闭 yarn ---------------"
					ssh hadoop102 "/opt/module/hadoop-3.1.3/sbin/stop-yarn.sh"
					echo " --------------- 关闭 hdfs ---------------"
					ssh hadoop101 "/opt/module/hadoop-3.1.3/sbin/stop-dfs.sh"
				;;
				*)
					echo "Input Args Error..."
				;;
				esac
			C. 保存后退出，然后赋予脚本执行权限
				chmod +x myhadoop.sh
			D. 关闭集群
				myhadoop.sh stop
			E. 开启集群
				myhadoop.sh start
		② 查看三台服务器进程脚本：jpsall
			A. 创建执行脚本 jpsall.sh
				cd /opt/bin
				vim jpsall.sh
			B. 在 jpsall.sh 输入如下内容
				#!/bin/bash
				for host in hadoop101 hadoop102 hadoop103
				do
					echo =============== $host ===============
					ssh $host jps 
				done
			C. 保存后退出，然后赋予脚本执行权限
				chmod +x jpsall
		③ 将执行脚本拷贝至 /bin/
			cp /opt/bin/myhadoop.sh /bin/
			cp /opt/bin/jpsall.sh /bin/
		④ 将 /opt/bin/myhadoop.sh 和 /bin/myhadoop.sh 分发到其他服务器
			xsync /opt/bin
			xsync /bin/myhadoop.sh
			xsync /bin/jpsall.sh
	10. 常用端口号说明（面试题）
			+----------------------------+-------------+------------------+
			| 端口名称 					 | Hadoop2.x   | Hadoop3.x		  |
			+----------------------------+-------------+------------------+
			| NameNode 内部通信端口 	 | 8020 / 9000 | 8020 / 9000/9820 |
			+----------------------------+-------------+------------------+
			| NameNode HTTP U 			 | 50070	   | 9870			  |
			+----------------------------+-------------+------------------+
			| MapReduce 查看执行任务端口 | 8088 	   | 8088			  |
			+----------------------------+-------------+------------------+
			| 历史服务器通信端口		 | 19888	   | 19888			  |
			+----------------------------+-------------+------------------+
	11. 常用的配置文件（面试题）
			+-------------------+-----------------+-----------------------+
			| 配置文件名称		| Hadoop2.x   	  | Hadoop3.x		   	  |
			+-------------------+-----------------+-----------------------+
			| 核心配置文件 core	| core-site.xml   | core-site.xml   	  |
			+-------------------+-----------------+-----------------------+
			| HDFS				| hdfs-site.xml	  |  hdfs-site.xml		  |
			+-------------------+-----------------+-----------------------+
			| YARN				| yarn-site.xml   | yarn-site.xml 		  |
			+-------------------+-----------------+-----------------------+
			| MapReduce			| mapred-site.xml | mapred-site.xml 	  |
			+-------------------+-----------------+-----------------------+
			| 集群				| slaves		  |	workers				  |
			+-------------------+-----------------+-----------------------+
	12. 集群时间同步
		① 说明：
			A. 如果服务器在公网环境（能连接外网），可以不采用集群时间同步，因为服务器会定期和公网时间进行校准；
			B. 如果服务器在内网环境，必须要配置集群时间同步，否则时间久了，会产生时间偏差，导致集群执行任务时间不同步。
		② 需求：找一个机器，作为时间服务器，所有的机器与这台集群时间进行定时的同步，生产环境根据任务对时间的准确程度要求周期同步。
		测试环境为了尽快看到效果，采用 1 分钟同步一次。
		③ 时间服务器配置（必须 root 用户）
			A. 查看所有节点 ntpd 服务状态和开机自启动状态
				systemctl status ntpd
				systemctl start ntpd
				systemctl is-enabled ntpd
			B. 修改 hadoop101 的 /etc/ntp.conf 配置文件
				vim /etc/ntp.conf
			C. 修改内容如下
				a. 修改 1（授权 192.168.10.0-192.168.10.255 网段上的所有机器可以从这台机器上查询和同步时间）
					restrict 192.168.10.0 mask 255.255.255.0 nomodify notrap
				b. 修改 2（集群在局域网中，不使用其他互联网上的时间）
					#server 0.centos.pool.ntp.org iburst
					#server 1.centos.pool.ntp.org iburst
					#server 2.centos.pool.ntp.org iburst
				c. 添加 3（当该节点丢失网络连接，依然可以采用本地时间作为时间服务器为集群中的其他节点提供时间同步）
					server 127.127.1.0
					fudge 127.127.1.0 stratum 10
			D. 修改 hadoop102 的/etc/sysconfig/ntpd 文件
				vim /etc/sysconfig/ntpd
			E. 增加内容如下（让硬件时间与系统时间一起同步）
				SYNC_HWCLOCK=yes
			F. 重新启动 ntpd 服务
				systemctl start ntpd
			G. 设置 ntpd 服务开机启动
				systemctl enable ntpd
		④ 其他机器配置（必须 root 用户）
			A. 关闭所有节点上 ntp 服务和自启动
				systemctl stop ntpd
				systemctl disable ntpd
			B. 在其他机器配置 1 分钟与时间服务器同步一次
				crontab -e
			C. 编写定时任务如下
				*/1 * * * * /usr/sbin/ntpdate hadoop101
			D. 修改任意机器时间
				date -s "2021-9-11 11:11:11"
			E. 1 分钟后查看机器是否与时间服务器同步
				date
	13. 常见错误及解决方案
		① 解决HDFS网页删除文件权限不足的问题
			A. 问题：
				Permission denied: user=dr.who, access=WRITE, inode="/":root:supergroup:drwxr-xr-x
			B. 解决方法：在核心配置文件 core-site.xml 中新增以下配置
				<!-- 配置 HDFS 网页登录使用的静态用户为 atguigu -->
				<property>
					<name>hadoop.http.staticuser.user</name>
					<value>root</value>
				</property>
			C. 将 core-site.xml 分发到其他集群
				xsync /opt/module/hadoop-3.1.3/etc/hadoop/core-site.xml
			D. 重启集群
				myhadoop.sh stop
				myhadoop.sh start


















