一、TCL语言：Transaction Control Language 事务控制语言
	1. 事务的概念：
		事务由单独单元的一个或一组SQL语句组成，在这个单元中，每个SQL语句都是相互依赖的。而整个单独单元
		作为一个不可分割的整体，如果单元中某条SQL语句一执行失败或产生错误，整个单元将会回滚。所有受到影响的数据
		将返回到事务开始以前的状态；如果单元中的所有SQL语句执行成功，则事务将顺利执行
	2. 事务的特点（事务的ACID属性）
		①原子性（Atomicity）：原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生
		②一致性（Consistency）：事务必须使数据库从一个一致性状态变换到另一个一致性状态
		③隔离性（Isolation）：事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据
								对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰
		④持久性（Durability）：持久性是指一个事务一旦被提交，它对数据中数据的改变就是持久性的，接下来的其他操作和数据库
								故障不应该对其有任何影响
	3. MySQL中的存储引擎
		①概念：在MySQL中的数据用各种不同的技术存储在文件或者内存中。
		②通过show engines来查看MySQL支持的储存引擎
		③在mySQL中用的最多的存储引擎有：innodb、myisam、memory等。其中innodb支持事务，而myisam和memory
		  等不支持事务
	4. 事务的创建：
		①隐式事务：事务没有明显的开启和结束的标记，比如insert、delete、update
		②显式事务：
			A. 前提：必须先设置自动提交功能为禁用，因为每条SQL语句可以看做是一个事务，如果不先禁用自动提交功能，则无法将
			一组SQL语句看做是一个事务，比如：set autocommit = 0;，该语句只针对当前事务。
			B. 步骤：
				步骤一：开启事务：
					set autocommit=0; 
					start transaction;(可选的)
				步骤二：编写事务中的SQL语句（比如：insert、delete、update）
					语句一;
					语句二;
				步骤三：结束事务
					commit;（提交事务，事务提交到文件上并无法撤销）
					rollback;（回滚事务，回到起初的状态，事件并没有提交到文件而是提交内存中）
	5. 数据库的隔离级别
		①对于同时运行的多个事务，当这些事务访问数据库中相同的数据时，如果没有采取必要的隔离机制，就会导致各种并发问题：
			A. 脏读：对于两个事务T1，T2，T1读取了已经被T2更新但还是没有被提交的字段之后，若T2回滚，T1读取的内容时暂时且无效的
			B. 不可重复读：对于两个事务T1，T2，T1读取了一个字段，然后T2更新了该字段之后，T1再次读取该字段，值就不同了
			C. 幻读：对于对于两个事务T1，T2，T1读取了一个字段，然后T2在表中插入一些新的行之后，若T1再次读取同一个字段，就会多出几行
		②数据库事务的隔离性：数据库系统必须具有隔离并发运行各个事务的能力，使他们不会相互影响，避免各个并发问题
		③一个事务与其他事务隔离的程度称为隔离级别，数据库规定了多种事务隔离级别，不同隔离级别对于不同的干扰程度，隔离级别越高，数据
			一致性就越好，但并发行性就越弱
		④数据库提供四种事务隔离级别：
			A. read uncommitted(读未提交数据)：允许事务读取未被其他事务提交的更新。脏读、不可重复读、幻读等问题都会出现
			B. read committed(读已提交数据)：只允许事务读取已经被其他事务提交变更的数据，可避免脏读、但不可重复读和幻读问题仍然可能出现
			C. repeatable read(可重复读)：确保事务可以多次从一个字段中读取相同的值，在这个事务持续期间，禁止其他事物对这个字段进行更新
											可以避免脏读和不可重复读，但幻读的问题依然存在
			D. serializable(串行化)：确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入，更新和删除操作
										所有并发性问题都可以解决，但是性能十分低下
		⑤Oracle支持两种事务隔离级别：read committed和serializable。默认的事务级别为read committed
		⑥MySQL支持四种事务隔离级别：默认的事务隔离级别为repeatable read。
		⑦在MySQL中设置隔离级别：
			A. 每启动一个mysql程序，就会获得一个单独的数据库连接。每个数据库连接都有一个全局变量@@tx_isolation，表示当前的事务隔离级别
			B. 查看当前的隔离级别：select @@tx_isolation
			C. 设置当前MySQL连接的隔离级别：set session transaction isolation level + 事务隔离级别
			D. 设置数据库系统的全局隔离级别：set global transaction isolation level + 事务隔离级别
	6. 保存点：savepoint
		①savepoint搭配rollback使用，意思是事务回滚时只能回滚到保存点，保存点之前的事务已经执行完毕，而保存点之后的事务回滚。
		②举例
	7. delete和truncate在事务中的区别
		①delete语句在事务中支持回滚，即当事务回滚后数据不会被删除
		②truncate语句在事务中不支持回滚，即当事务回滚后数据仍然被删除
	show variables：查看变量
		比如：show variables like 'autocommit'，查看事务的提交，默认是开启的
二、视图
	1. 视图：
		MySQL从5.1版本开始提供视图功能。一种虚拟存在的表，行和列的数据自定义视图的查询中使用的表，
			并且是在使用视图时动态生成的，只保存了sql逻辑，不保存查询结果
	2. 应用场景：
		①多个地方用到同样的查询结果
		②该查询结果使用的sql语句比较复杂
	3. 示例：
		create view my_v1 as 
		select studentname, majorname from student s inner join major m on s.majorId = m.id where s.majorId = 1;
	4. 视图的好处
		①重复使用sql语句
		②简化复杂的sql操作，不必知道他的查询细节
		③保护数据，提高安全性
	5. 视图的创建：
		语法：create view 视图名 as 查询语句
	6. 视图的修改：
		①语法一：create or replace view 视图名 as 查询语句
		②语法二：alter view 视图名 as 查询语句
	7. 视图的删除
		语法：drop view 视图名,视图名,...;
	8. 查看视图
		①语法一：desc 视图名;
		②语法二：show create view 视图名;
		③语法三：select 字段名 from 视图名;
	9. 视图具备以下特点不能更新
		①包含以下关键字的sql语句：分组函数、distinct、group by、having、union或者union all
		②常量视图
		③select中包含子查询
		④join
		⑤from一个不能更新的视图
		⑥where子句的子查询引用了from子句中的表
	注：一旦允许更新视图，name视图更新的数据将会影响表中的数据
	10. 视图与表的对比
		①视图创建的关键字为create view，而表创建的关键字为create table
		②视图在实际的物理空间中只保留了sql逻辑，而表则是在实际的物理空间中保存了数据
		③视图和表都能增删改查，而视图一般不支持增删改。
三、变量
	1. 系统变量：
		①说明：
				变量是由系统提供的，不是用户定义的，属于服务器层面
		②全局变量：
			A. 全局变量作用域：服务器每次启动，将为所有的全局变量赋初始值，针对于所有的会
					话（连接）有效，但是不能跨重启，如果需要修改跨重启则必须修改配置文件
			B. 示例：
				#1. 查看所有的全局变量
				SHOW GLOBAL VARIABLES;
				#2. 查看部分全局变量
				SHOW GLOBAL VARIABLES LIKE '%char%';
				#3. 查看指定的全局变量
				SELECT @@global.autocommit;
				SELECT @@global.tx_isolation;
				#4. 为全局变量赋值
				SET GLOBAL autocommit = 0;
				SET @@global.autocommit = 1;
		③会话变量：
			A. 会话变量作用域：服务器每次启动，将为所有的会话变量赋初始值，针对于一个会
					话（连接）有效，但是不能跨连接
			B. 示例
				#1. 查看所有的会话变量
				SHOW SESSION VARIABLES;
				SHOW VARIABLES;
				#2. 查看部分会话变量
				SHOW SESSION VARIABLES LIKE '%char%';
				SHOW VARIABLES LIKE '%char%';
				#3. 查看指定的会话变量
				SELECT @@session.autocommit;
				SELECT @@autocommit;
				SELECT @@session.tx_isolation;
				SELECT @@tx_isolation;
				#4. 为会话变量赋值
				SET tx_isolation = 'read-committed';
				SET session.tx_isolation = 'read-committed';
				SET @@session.tx_isolation = 'repeatable-read';
		④使用的语法：
			A. 查看所有的系统变量：show global|[session] variables;
			B. 查看满足条件的部分系统变量：show global|[session] variables like 模糊查询;
			C. 查看指定的某个系统变量的值：select @@global|[session].系统变量名;
			D. 为某个系统变量赋值：
				方式一：set global|[session] 系统变量名 = 值;
				方式二：set @@global|[session].系统变量名 = 值;
		⑤注意：
			如果是全局级别，则必须加global
			如果是会话级别，则需要加global
			如果没有写，则默认是session	
	2. 自定义变量：
		①说明：变量是用户自定义的，而不是由系统定义的
		②使用步骤：声明并赋值、修改、使用（查看、比较、运算等）
		③用户变量：相当于Java中的全局变量
			A. 作用域：针对当于当前会话（连接）有效，等同于会话
						变量的作用域，应用在任何地方，包括begin...end范围内和范围外
			B. 赋值的操作符：=或者:=
			C. 变量声明并初始化
				(1)set @用户变量名 = 值;
				(2)set @用户变量名 := 值;
				(3)select @用户变量 := 值;
			D. 赋值（更新用户变量的值）
				(1)方式一：通过set或者select
					set @用户变量名 = 值;
					set @用户变量名 := 值;
					select @用户变量 := 值;
				(2)方式二：通过select into
					select 字段名 into @用户变量名 from 表
			E. 查看用户变量的值
				select @用户变量名
			F. 示例：
				#声明并初始化
				SET @id = 26;
				SET @name := 'Li';
				SELECT @gender := '男';
				SET @count = 0;

				#赋值（更新用户变量的值）
				SELECT COUNT(*) INTO @count FROM employees;

				#查看变量
				SELECT @id, @name, @gender, @count;
		④局部变量：相当于Java中的局部变量
			A. 作用域：仅仅在定义它的begin...end中有效，应用在begin...end的第一句
			B. 声明：
				declare 变量名 类型;
				declare 变量名 类型 default 值;
			B. 赋值：
				(1)方式一：通过set或者select
					set 变量名 = 值;
					set 变量名 := 值;
					select @变量名 := 值;
				(2)方式二：
					select 字段名 into 变量名 from 表;
			C. 使用：select 变量名;
			D. 示例：
				#变量声明
				DECLARE id INT DEFAULT 26;
				DECLARE NAME VARCHAR(20);
				SELECT @name := 'Li';
				DECLARE gender VARCHAR(1);
				SET gender := '男';
		⑤用户变量和局部变量的对比
			A. 用户变量的作用域是当前会话（连接），局部变量的作用域是定义它的begin...end中。
			B. 用户变量的定义是在当前会话（连接）的任意位置，局部变量的定义是在begin...end中的第一句。
			C. 用户变量的声明、赋值和使用都需要加@但不需要限定类型，局部变量一般不需要加@并且需要限定类型
四、存储过程和函数：类似于Java中的方法
	1. 存储过程
		①含义：一组预先编译好的SQL语句的集合，理解成批处理语句
		②好处：
			A. 提高代码的重用性
			B. 简化操作
			C. 减少了编译的次数并且减少了和数据库服务器的连接次数，提高了效率
		③创建语法：
			create procedure 存储过程名(参数列表)
			begin
				存储过程体（一组合法的SQL语句）
			end
		④调用语法：call 存储过程名（实参列表）；
		⑤注意：
			A. 参数列表包含三部分：参数模式、参数名、参数类型
			B. 参数模式
				(1)in:该参数可以作为输入，也就是该参数需要调用方传入值
				(2)out:该参数可以作为输出，也就是该参数可以作为返回值
				(3)inout:该参数既可以作为输入又可以作为输出
			C. 存储过程体：
				(1)如果该存储过程体仅仅只有一条SQL语句，则begin...end可以省略
				(2)存储过程体中的每条SQL语句的结尾要求添加分号
				(3)存储过程体的结尾可以使用delimiter重新设置
					语法：delimiter 结束标记
		⑥空参存储过程示例
			#创建空参存储过程
			DELIMITER $ #重新设置存储过程的结尾标志
			CREATE PROCEDURE my_p1()
			BEGIN
				INSERT INTO stuinfo(`name`, gender)
				VALUES('Ke', '女'),('Lin', '男'),('wang', '女');
			END $
			#调用
			CALL my_p1()$
		⑦带in模式的存储过程示例
			 #验证登录名和密码
			 CREATE PROCEDURE my_p3(IN username VARCHAR(20), IN `password` VARCHAR(20))
			 BEGIN
				DECLARE result INT DEFAULT 0;#声明并初始化
				SELECT COUNT(*) INTO result#赋值
				FROM admin
				WHERE admin.`username` = username
				AND admin.`password` = `password`;
				SELECT IF(result>0, '成功', '失败');#使用
			 END $
			CALL my_p2('john', '8888')$
		⑧带out模式的存储过程示例
			#查看女生名对应男朋友的的名字和魅力值

			CREATE PROCEDURE my_p4(IN `beautyName` VARCHAR(20), OUT boyName VARCHAR(20), OUT userCP INT)
			BEGIN
				SELECT bo.boyName, bo.userCP INTO boyName, userCP
				FROM beauty b
				LEFT JOIN boys bo
				ON b.boyfriend_id = bo.id
				WHERE b.name = beautyName;
			END $
			CALL my_p4('赵敏', @boyName, @userCP)$
			SELECT @boyName, @userCP$
		⑨带inout模式的存储过程示例
			CREATE PROCEDURE my_p5(INOUT a INT, INOUT b INT)
			BEGIN
				SET a = a*2;
				SET b := b*2;
			END $
			#定义全局变量
			SET @m = 26$
			SET @n := 48$
			#调用存储过程
			CALL my_p5(@m, @n)$
			SELECT @m, @n$
		⑩删除存储过程:
			语法：drop procedure 存储过程名
			注：不能一条语句删除多个存储过程
		⑩①查看存储过程
			show create procedure 存储过程名
			注：不能修改存储过程的内容
	2. 函数
		①含义：一组预先编译好的SQL语句的集合，理解成批处理语句
		②好处：
			A. 提高代码的重用性
			B. 简化操作
			C. 减少了编译的次数并且减少了和数据库服务器的连接次数，提高了效率
		③区别：
			A. 储过程：可以没有返回，也可以有多个返回，适合批量插入、批量更新
			B. 函数：必须要有一个返回，适合做数据处理后返回一个结果
		④创建语法：
			create function 函数名(参数列表) returns 返回值类型
			begin
				函数体
				return 语句;
			end 重新设置结束符号
		⑤注意：
			A. 参数列表包含两部分：参数名 参数类型
			B. 函数体中return 语句放在函数体中不报错，但是不建议
			C. return 语句必须存在，否则会编译异常
			D. 如果函数体只有一句话，则begin和end可以省略
			E. 使用delimiter语句设置结束标记符号
		⑥调用语法：select 函数名(实参列表)
		⑦示例
			#根据部门查询部门的平均工资
			CREATE FUNCTION my_f1(deptName VARCHAR(20)) RETURNS DOUBLE
			BEGIN
				DECLARE avg_sal DOUBLE DEFAULT 0;
				SELECT AVG(salary) INTO avg_sal
				FROM employees e
				INNER JOIN departments d
				ON e.department_id = d.department_id
				WHERE d.department_name = deptName;
				RETURN avg_sal;
			END $
			SELECT my_f1('IT')$
		⑧查看函数：show create function 函数名;
		⑨删除函数：drop function 函数名;
五、流程控制语句
	1. 顺序结构：程序从上到下依次执行
	2. 分支结构：程序从两条或者多条路径中选择一条去执行
	3. 循环结构：程序在满足一定条件的基础上，去重复执行一段代码
六、分支结构
	1. if函数
		①功能：实现简单的双分支
		②语法：if(表达式1, 表达式2, 表达式3)
		③执行顺序：如果表达式1成立，则if函数返回表达式2的值，否则返回表达式3的值
		④应用：任何位置
	2. case结构————作为表达式
		①类似于Java中的switch语句，一般用于等值判断
			A. 语法
				case 要判断的变量|表达式|字段名
				when 要判断的值 then 返回的值1
				when 要判断的值 then 返回的值2
				......
				else 返回的值n
				end	
		②类似于Java中的if语句，一般用于实现区间判断
			A. 语法：
				case
				when 要判断的条件1 then 返回的值1
				when 要判断的条件2 then 返回的值2
				......
				else 返回的值n
				end
	3. case结构————作为独立语句
		①类似于Java中的switch语句，一般用于等值判断
			A. 语法
				case 要判断的变量|表达式|字段名
				when 要判断的值 then 返回的语句1;
				when 要判断的值 then 返回的语句2;
				......
				else 返回的语句n;
				end	case;
			
		②类似于Java中的if语句，一般用于实现区间判断
			A. 语法：
				case
				when 要判断的条件1 then 返回的语句1;
				when 要判断的条件2 then 返回的语句2;
				......
				else 返回的语句n;
				end case;
			B. 示例：
				#案例，传入成绩，90-100为A，80-90为B，60-80为C，60以下为D
				CREATE PROCEDURE my_p1(IN score DOUBLE)
				BEGIN
					CASE
					WHEN score >= 90 AND score <= 100 THEN SELECT 'A';
					WHEN score >= 80 THEN SELECT 'B';
					WHEN score >= 60 THEN SELECT 'C';
					ELSE SELECT 'D';
					END CASE;
				END $
	4. 特点：
		①作为表达式使用，嵌套在其他语句中使用，可以放在任何地方，begin end里面或者外面
		②作为独立语句使用，只能放在begin and里面
		③如果when中的值满足或者条件成立，则执行对应的then后面的语句，并且结束case，
		 如果都不满足或者成立，则执行else中的语句或者值
		④else可以省略，当else省略并且所有的when后面的值不满足或者条件不成立，则返回null
	5. if结构
		①语法：
			if 条件1 then 语句1;
			elseif 条件2 then 语句2；
			......
			[else 语句3;]
			end if;
		②应用：begin end中。
		③示例：
			#案例，传入成绩，90-100返回A，80-90返回B，60-80返回C，60以下返回D
			#存储过程
			CREATE PROCEDURE my_p2(IN score DOUBLE, OUT `level` CHAR(1))
			BEGIN
				IF score >= 90 AND score <=100 THEN SET `level` = 'A';
				ELSEIF score >= 80 THEN SET `level` = 'B';
				ELSEIF score >= 60 THEN SET `level` = 'C';
				ELSE SET `level` = 'D';
				END IF;
			END $
			CALL my_p2(60.0, @level)$
			#函数
			CREATE FUNCTION my_f1(score DOUBLE) RETURNS CHAR(1)
			BEGIN
				IF score >=90 AND score <= 100 THEN RETURN 'A';
				ELSEIF score >=80 THEN RETURN 'B';
				ELSEIF score >=60 THEN RETURN 'C';
				ELSE RETURN 'D';
				END IF;
			END $
			SELECT my_f1(59)&
七、循环结构
	1. 分类：while、loop、repeat
	2. 位置：begin end中。
	3. 循环控制
		①iterate：
			A. 类似于continue，表示跳过该次循环，进行下一步循环
			B. 示例：
				#案例三：向admin表中插入指定数目的记录，只插入偶数条
				CREATE PROCEDURE my_iterate(IN size INT)
				BEGIN
					DECLARE i INT DEFAULT 0;
					R: REPEAT
						SET i = i + 1;
						IF MOD(i, 2) != 0 THEN ITERATE R;
						END IF;
						INSERT INTO admin(username, `password`) VALUES(CONCAT('Li', i), '2648');
					UNTIL i >= size
					END REPEAT R;
				END $
				CALL my_iterate(100)$
		②leave：
			A. 类似于break，表示结束当前循环体
			B. 示例：
				#案例二：向admin表中插入指定数目的记录，超过20条结束插入
				CREATE PROCEDURE my_leave(IN size INT)
				BEGIN
					DECLARE i INT DEFAULT 1;
					W:WHILE i <= size DO
						IF i > 20 THEN LEAVE W;
						END IF;
						INSERT INTO admin(username, `password`) VALUES(CONCAT('admin', i), '2648');
						SET i = i + 1;
					END WHILE W;
				END $
				CALL my_leave(100)$
	4. while：类似于Java中的while循环（MySQL中最常用的循环结构）
		①语法
			[标签:] while 循环条件 do
				循环体;
			end while [标签];
		②特点：先判断，后执行，while后面加循环进行条件
		③示例：
			CREATE PROCEDURE my_while1(IN size INT)
			BEGIN
				DECLARE i INT DEFAULT 1;
				WHILE i <= size DO
					INSERT INTO admin(username, `password`) VALUES(CONCAT('admin', i), '2648');
					SET i = i + 1;
				END WHILE;
			END $
			CALL my_while1(20)$
	5. loop
		①语法：
			[标签;] loop
				循环体;
			end loop [标签];
		②特点：该循环是死循环，必须搭配循环控制使用，需要定义循环标签，必要时可以模拟简单的死循环
		③示例：
			CREATE PROCEDURE my_loop1(IN size INT)
			BEGIN
				DECLARE i INT DEFAULT 1;
				L:LOOP
					IF i > size THEN LEAVE L;
					END IF;
					INSERT INTO admin(username, `password`) VALUES(CONCAT('admin', i), '2648');
					SET i = i + 1;
				END LOOP L;
			END $
			CALL my_loop1(20)$
	6. repeat：类似于Java中do...while，循环体至少执行一次
		①语法：
			[标签:] repeat
				循环体;
			until 循环结束条件
			end repeat [标签];
		②特点：先执行后判断，util后加循环结束条件
		②示例：
			TRUNCATE TABLE admin$
			CREATE PROCEDURE my_repeat1(IN size INT)
			BEGIN
				DECLARE i INT DEFAULT 1;
				REPEAT
					INSERT INTO admin(username, `password`) VALUES(CONCAT('admin', i), '2648');
					SET i = i + 1;
				UNTIL i > size
				END REPEAT;
			END $
			CALL my_repeat1(20)$
八. 用户管理与授权
	1. 创建用户
		① 语法：CREATE USER 'username'@'host' IDENTIFIED BY 'password';
		② 参数说明：
			A. username：将创建的用户名
			B. host：指定该用户在哪个主机上可以登陆，此处的"localhost"，是指该用户只能在本地登录，不能在另外一台机器上远程登录；如果想远程登录的话，
			将"localhost"改为"%"，表示在任何一台电脑上都可以登录；也可以指定某台机器的IP，表示只有那台机器可以远程登录;
			C. password：该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器。
		③ 举例：CREATE USER 'admin'@'%' IDENTIFIED BY '123456';
	2. 授权
		① 语法：GRANT privileges ON databasename.tablename TO 'username'@'host'
		② 参数说明：
			A. privileges：用户的操作权限,如SELECT , INSERT , UPDATE 等，如果要授予所的权限则使用ALL;
			B. databasename：数据库名
			C. tablename：表名
			D. 如果要授予该用户对所有数据库和表的相应操作权限则可用*表示, 如*.*
		③ 举例：GRANT all privileges ON test.* TO 'admin'@'%'
	3. 创建用户同时授权
		① 语法：GRANT privileges ON databasename.tablename TO 'username'@'host' IDENTIFIED BY 'password';
		② 举例：GRANT all privileges ON test.* TO 'admin'@'%' IDENTIFIED BY '123456';
		③ 执行完成后，必须执行flush privileges; 
	4. 设置与更改用户密码
		① 语法：SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');
		② 举例：SET PASSWORD FOR 'admin'@'%' = PASSWORD('2648');
	5. 撤销用户权限
		① 语法：REVOKE privilege ON databasename.tablename FROM 'username'@'host';
		② 说明：privilege, databasename, tablename 同授权部分.
		③ 举例：REVOKE all privilege ON test.* FROM 'admin'@'%';
		④ 假如你在给用户'admin'@'%'授权的时候是这样的(或类似的)：GRANT SELECT ON test.user TO 'admin'@'%'，则在使用REVOKE SELECT ON *.* FROM 'admin'@'%';
		命令并不能撤销该用户对test数据库中的user表的SELECT 操作。相反，如果授权使用的是GRANT SELECT ON *.* TO 'admin'@'%';则REVOKE SELECT ON test.user FROM 'admin'@'%';
		命令也不能撤销该用户对test数据库中user表的Select 权限。
		⑤ 具体信息可以用命令SHOW GRANTS FOR 'username'@'host'; 查看。
	6. 删除用户
		① 语法：DROP USER 'username'@'host';
		② 举例：DROP USER 'admin'@'%';
	7. 查看用户的授权
		① 语法：SHOW GRANTS FOR 'username'@'host'
		② 举例：SHOW GRANTS FOR 'admin'@'%'
	8. GRANT USAGE：mysql usage权限就是空权限，默认create user的权限，只能连库，啥也不能干
	9. 刷新权限：flush privileges
		