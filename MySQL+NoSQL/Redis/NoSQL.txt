一、NoSQL入门和概述：
	1. 互联网时代背景下大机遇，为什么用nosql
		①单机MySQL的美好年代
		 	在90年代，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付，不过在那个时候，更多的都是静态网页，动态交互类型的网站不多
			APP			==》		DAL			=》MySQL Instance
			在上述架构中，数据存储的瓶颈是：
				A.  数据量的总大小，一个机器放不下时
				B. 数据的索引（B + Tree），一个机器的内存放不下时
				C. 访问量（读写混合），一个实例不能承受。
				D. 如果满足了上述1或者3，则需要进行优化
		②Memcached（缓存）+ MySQL + 垂直拆分
			后来，随着访问量的上升，几乎大部分使用MySQL架构的网站在数据库上都开始了性能的问题，web程序不在仅仅专注功能上的研究，同时也再追求性能上的研究。
			程序员们开始大量的使用缓存技术缓解数据库的压力，优化数据库的结构和索引。开始比较流行是通过文件缓存来缓解数据库的压力。但是当访问量继续增长的时候，多台
			web机器通过文件缓存不能共享，大量的小文件缓存也带了比较到的IO压力，在这个时候，Memcached就自然的成为一个非常时尚的技术产品
																		=》MySQL Instance
			APP			==》		DAL			=》			cache		=》MySQL Instance
																		=》MySQL Instance
		③MySQL主从读写
			由于数据库的写入压力增加，Memcached只能缓解数据库的读取压力，读写几种在一个数据库上让数据库不堪重负，大部分网站开始使用主从复制技术来达到肚读写分离，
			以提高读写性能和读写的可扩展性。MySQL的Master-Slave模式成为这个时候额网站标配了
																		=》Slave
			APP			==》		DAL			=》			cache	=》Master
																		=》Slave
		④分库分表 + 水平拆分 + mysql集群
			在Memcached的高速缓存，MySQL的主从复制，读写分离的基础之上，这是的MySQL主库的读写压力开始出现瓶颈，而数据量的持续猛增，由于MyISAM（数据库引擎）使用表锁
			在高并发下会出现严重的锁问题，大量的高并发MySQL应用开始使用InnoDB引擎代替MyISAM
			同时，开始流行使用分表分库来缓解写压力和数据增长的扩展问题，这个时候，分库分表成了一个热门技术，是面试的热门问题也是业界讨论的热门技术问题，也就在这个时候，MySQL
			推出了还不太稳定的表分区，这也给技术实力一般的公司带来了希望，虽然MySQL推出了MySQL Cluster集群，但性能也不能很好满足互联网的要求，只是在高可靠的性能上提供了非常大的保证。
																		=》Slave
																	=》Master
																		=》Slave
																		
																		=》Slave
			APP			==》		DAL			=》			cache	=》Master
																		=》Slave
																		
																		=》Slave
																	=》Master
																		=》Slave
		⑤MySQL的扩展性瓶颈
			MySQL数据库也经常存储一些大文本字段，导致数据库非常的大，在做数据库恢复时就导致非常慢的问题，不容易快速恢复数据库。比如1000万4KB大小的文本接近40GB的大小，如果能把这些数据从MySQL省去，
			MySQL将变得非常小。关系数据库很强大，但是它并不是很好的应付所有的应用场景，MySQL的扩展性差（需要复杂的技术实现），大数据下IO压力大，表结构更改困难，正是当前使用MySQL的开发人员面临的问题
		⑥如今的网站部署是：
			应用服务器集群、数据库集群、移动服务器集群
		⑦为什么要用NoSQL
			今天我们可以通过第三方平台（如：Google、Facebook等）可以很容器的访问和抓取数据，用户的个人信息，社交网络、地理位置、用户生成的数据和用户操作日志已经程培的增加，我们如果要对这些用户数据进行
			挖掘，那SQL数据已经不适合这些应用了，NoSQL数据库的发展也却很好的处理这些大的数据
	2. NoSQL是什么
		①NoSQL（NoSQL = Not Only SQL），意即“不仅仅是SQL”，泛指非关系的数据库（经典公式ACID：原则一致，独立隔离），随着互联网WEB2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的
		SNS类型的web2.0纯动态网站已经是显得力不从心，暴露了很多难以克服的问题，而非常关系型数据库则是由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据库种类带来的挑战
		尤其是大数据应用难题，包括大规模数据的存储。
		②（例如谷歌或脸书每天为他们的用户收集万亿比特的数据），这些典型的数据存储不在需要固定的模式，无需多余操作就可以横向扩展。 
	3. NoSQL能干嘛
		①易扩展：
			A. NoSQL数据库种类繁多，但是一个共同的特点就是去掉关系数据库的关系型特性
			B. 数据之间无关系，这样就非常容易扩展，也无形之间，在架构层面上带来了可扩展的特点
		②大数据高性能
			A. NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀，这得益于他的无关系性，数据库的结构简单
			B. 一般MySQL使用Query Cache，每次更表单的更新Cache就失效，是一种大粒度的Cache
			C. 针对web2.0的交互频繁的应用，Cache性能不高，而NoSQL的Cache是记录级的，是一种细粒度的Cache，所以NoSQL在这个层面上来说就要性能高很多了
		③多样灵活的数据模型
			NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。
			如果是非常大数据量的表，增加字段简直就是一个噩梦。
		④传统RDBMS VS NoSQL
			A. RDBMS（关系型数据库管理系统）
				a. 高度组织化结构化数据
				b. 结构化查询语言（SQL）
				c. 数据可关系都存储在单独的表中
				d. 数据操纵语言，数据定义语言
				e. 严格的一致性
				f. 基础事务
			B. NoSQL
				a. 代表着不仅仅是SQL
				b. 没有声明性查询语言
				c. 没有预定义的模式
				d. 键值对存储、列存储、文档存储、图形数据库
				e. 最终一致性，而非ACID属性
				f. 非结构化和不可预知的数据
				g. CAP定理
				h. 高性能，高可用性和可伸缩性
	4. NoSQL的下载
		①Redis：一专多能，数据类型丰富
		
		②Memcache：专注高速缓存
		
		③Mongdb：最像关系型数据库的非关系型数据库
	5. NoSQL的重点内容
		①KV：键值对
		②Cache：缓存
		③Persistence：持久化
二、互联网中的3V+3高
	1. 大数据时代下的3V
		①海量VoLume
		②多样Variety
		③实时Velocity
	2. 互联网需求的3高
		①高并发
		②高可扩
		③高性能
三、当下的NoSQL经典应用：
	1. 当下的应用是SQL与NoSQL一起使用的
	2. 阿里巴巴中文站商品信息如何存放
		①阿里巴巴中文网站的首页
			A. 架构发展历程
				a. 演变过程
					（1）1999第一代网站架构：Perl、CGI、Oracle
					（2）2000进入Java时代：Java、Servlet
					（3）2001-2004EJB时代：ELB（SLSB、CMP、MDB）Pattern（ServiceLocator、Delegate、Facade、DAO、DTO）
					（4）2005-2007Without EJB重构：去EJB重构：spring+iBatis+Webx、Antx；底层架构：ISearch、MQ+ESB、数据挖掘、CMS
					（5）2008-2009海量数据：Memcached集群、MySQL+数据切分=Cobar、分布式存储、Hadoop、KV、CDN
					（6）2010安全、镜像：安全、镜像、应用服务器升级、秒杀、NoSQL、SSD
				b. 第5代
					第四代网站解决了：
						性能和海量数据问题
							（1）大规模的Memcached集群、高性能应用服务器升级、KV、CDN、一定程度解决了网站的性能问题
							（2）数据切分和分布式存储解决了网站海量数据的问题
						安全问题：
							（1）镜像站解决了网站的灾备问题
							（2）网站架构的安全性升级透明的过滤了常见的网站漏洞
					到了2010年底，第五代网站架构开始改造
				c. 第5代架构的使命
					敏捷
						（1）业务快速增长，每天都要上线大量的小需求
						（2）应用系日益膨胀、耦合恶化、架构越来越复杂，会带来更高的开发成本。如何保持业务开发敏捷性
					开放
						Facebook和App Store带来的启示，如何提升网站的开放性，吸引第三方开发者加入到网站的共建来
					体验
						网站的并发性压力快速增长，用户却对体验提出了更高的要求
			B. 和我们相关的，多数据源多数据类型的存储问题
				在不同的场景采用了多种类型的数据源
					a. 关系型数据库
					b. 搜索引擎，提供商业搜索服务
					c. Cache、KV，高性能场景
					d. 外部数据接口：淘宝/支付宝接口
					e. 文档数据库，Schema free的结构化数据检索/管理场景
					f. 列数据库，后台大规模计算场景
				业务模型的各个字段分布在不同的数据源
					a. 基本信息：SQL 关系型数据库
					b. 商品SPU属性：Document DB 文档数据库
					c. 图片：图片银行接口
					d. 相关关键字：Search Engine
		②商品基本信息
			A. 名称、价格。出厂日期、生产厂商等
			B. 商品基本信息一般存储在关系型数据库即MySQL或Oracle，目前淘宝在去O化（即去掉Oracle）
			C. 注意：淘宝内部使用的MySQL也是自己改造过的
			D. 为什么去掉IOE
				a. 去除IBM小型机
				b. 去除Oracle数据库
				c. EMC存储设备
		③商品的描述、详情、评价信息（多文字类的）
			A. 多文字信息描述类，IO读写性能变差
			B. 存储在文档数据库MongoDB中
		③商品的图片
			A. 商品图片展现类
			B. 分布式的文件系统中
				a. 淘宝自己的TFS
				b. Google的GFS
				c. Hadoop的HDFS
		④商品的关键字
			A. 搜索引擎，淘宝内用
			B. 存储在ISearch中，是阿里自己开发的
		⑤商品的波段性的热点高频信息
			A. 内存数据库
			B. Tais、Redis、Memcached
		⑥商品的交易、价格计算、积分累计
			A. 外部系统，外部第三方支付接口
			B. 支付宝
	3. 总结大型互联网应用（大数据、该并发、多样数据类型）的难点和解决方案
		①难点
			A. 数据类型多样性
			B. 数据类型多样性和变化重构
			C. 数据源改造而数据服务平台不需要大面积重构
		②解决方法：统一数据服务层UDSL
			A. EAI和统一数据平台服务层
			B. 在网站应用集群和底层数据源之间，构建一层代理，统一数据层
			C. 统一数据平台服务层的特性
				a. 模型数据映射
					（1）实现业务模型各属性与底层不同数据类型数据源的模型数据映射
					（2）目前支持关系型数据库：ISearch redis MongoDB
				b. 统一的查询和更新API
					提供了基于业务模型的统一查询和更新的API，简化网站应用跨不同数据源的开发模型
				c. 性能优化策略
					（1）字段延迟加载，按需返回设置
					（2）基于热点缓存平台的二级缓存
					（3）异步并行的查询数据：异步并行加载模型来自不同数据源的字段
					（4）并发保护：拒绝访问频率过高的主机IP或者IP段
					（5）过滤高位的查询：例如会导致数据库崩溃的全表扫描
四、NoSQL数据模型简介
	1. 以一个电商客户、订单、订单详情、地址模型来对比关系型数据库和非关系型数据库
		①传统的关系型数据库时如何设计：ER图（1:1/1:N/N:N,主外键等）
		②NoSQL如何设计
			A. 什么是BSON：一种类似于JSON的二进制的存储格式，简称Binary JSON，它heJSON一样，支持内嵌的文档对象和数组对象
			B. 构建BSON数据模型：....
		③两者对比，问题和难点
			A. 为什么上述的情况可以用聚合模型来处理 
				a. 高并发的操作是不太建议有关联查询的，互联网公司用冗余数据来避免关联查询
				b. 分布式事务是支持不了太多的并发的
			B. 关系型数据库查询语JSON查询对比，JSON更有优势
	2. 聚合模型
		①KV键值
		②BSON
		③列族
			顾名思义，是按照列存储数据的，最大的特点是方便存储结构化和半结构数据，方便做数据压缩，对针对某一列或者某几列的查询非常有优势
		④图形
五、 非关系型数据库的四大分类
	1. KV键值对典型介绍：
		①新浪：BerkeleyDB + redis
		②美团：redis + tair
		③阿里、百度：Memcached + redis
	2. 文档型数据库（BSON格式比较多）典型介绍：
		①CouchDB
		②MongoDB：
			A. MongoDB是一个基于分布式文件存储的数据库。由C++语言编写，旨在为WEB应用提供可扩展的高性能数据存储解决方案
			B. MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库中功能最丰富、最像关系型数据库的非关系型数据库
	3. 列存储数据库
		①Cassandra、HBase
		②分布式文件系统
	4. 图关系数据库
		①它不是存储图形的，存储额是关系比如：朋友圈社交网络、广告推荐系统
		②社交网络、推荐系统等。专注于构建关系图谱
		③Neo4J、InfoGrid 
	5. 四大非关系型数据库的比价
		分类			举例							典型应用场景								数据类型					优点									缺点
		KV键值对		Tokyo、Cabinet/Tyrant			内存缓存，主要用于处理大量数据的高			Key指向Value的键值对		查找速度快								数据无结构化，通常只被
						Redis、Voldmort、Oracle BDB		访问负载也用于一些日志系统等				通常用Hash Table来实现												当做字符串或者二进制数据
							
		列存储数据库	Cassandra、HBase、Riak			分布式的文件存储系统						以列簇存储，将同一列		查找速度快，可扩展性强，				功能相对比较局限
																									数据存储在一起				更容易进行分布式扩展
		
		文档型数据库	CouchDB、MongoDB				Web应用（与Key-Value类似，Value是结构		Key-Value对应的键值对，		数据结构要求不严格，表结构可变，不需	查询性能不高，而且缺乏
														化的，不同的是数据库能够了解Value的内容）	Value为结构化数据			要像关系型数据库需要预先定义表结构		统一的查询语法
																
		图关系数据库	Neo4J、InfoGrid、Infinite Graph	社交网络，推荐系统等。专注于构建关系图谱	图结构						利用图结构相关算法。比如最短路径寻址	很多时候需要对整个图做计算
六、分布式数据库中的CAP原理：CAP+BASE																																	才能得出需要的信息N度关系查找
	1. 传统RDB的ACID分别是（通常必须同时满足四个原则）
		①A（Atomicity）原子性
			原子性很容易理解，也就是事务里的所有操作要么全部操作，要么都不做，事务成功的条件时事务里的所有操作都成功，只要有一个操作失败
			整个事务就失败了，需要回滚。
		②C（Consistency）一致性
			一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束
		③I（Isolation）独立性
			所谓的独立性是指并发的事务之间互相不会影响，如果一个事务要访问的数据正在被另一个事务修改，只要另一个事务未提交，它所访问的数据
			就不受未提交的事务影响。
		④D（Durability）持久性
			持久性是指一旦事务被提交后，它所做的修改会永久的保存在数据库上，即使出现宕机也不会丢失
	2. CAP
		 ①C（Consistency）强一致性：数据提交后会被立即存储在数据库中
		 ②A（Availability）可用性：
		 ③P（Partition tolerance）分区容错性
	3. 经典的CAP图
		①CAP理论的核心是：一个分布式系统不可能同时满足一致性、可用性和分区容错性这个三个需求，最多只能同时较好的满足两个
		②根据CAP原理将NoSQL数据库分成了满足CA原则、满足CP原则、满足AP原则三大类：
			A. CA-单点集群：满足一致性，可用性的系统通常在可扩展性上不太强大
			B. CP-满足一致性、分区容错性的系统，通常性能不是特别高
			C. AP-满足可以性、分区容错性的系统，通常可能对一致性要求低一些
	4. CAP的3进2：指三个原则只能满足两个
		①CAP理论就是说在分布式存储系统中，最多只能实现上面两点。
		②由于当前网硬件肯定会出现延迟丢包等问题，所以分区容错性是必须要求实现的
		③因此只能在一致性和可用性之间进行权衡，没有NoSQL系统能够同时保证这三点
		④C:强一致性 A: 高可用性 P: 分区容错性
			A. CA：传统Oracle数据库
			B. AP：大多数网站架构的选择
			C. CP：Redis、MongoDB
		⑤注意：分布式架构的时候必须做出取舍
			A. 一致性和可用性之间取一个平衡。大多数web应用，起始并不需要强一致性。
			B. 因此牺牲C换取P，这是目前分布式数据库产品的方向
		⑥一致性与可用性的抉择
			A. 对于Web2.0网站来说，关系型数据库的很多主要特征却往往无用武之地
			B. 数据库一致性需求
				很多web实时系统并不要求严格的数据库事务，对读一致性的要求很低，有些场合对写一致性要求也并不高。允许实现最终一致性
			C. 数据库的写实时性和读实时性需求
				对关系型数据库来说，插入一条数据之后立刻查询，是肯定可以读出来这条数据的，但是对于很多web应用来说，并不要求这么高的
				实时性，比方来说发一条消息之后，过几秒甚至几十秒之后，我的订阅者才看到这条动态是完全可以接受的。
			D. 对复杂的SQL查询，特别是多表关联查询的需求
				任何大数据量的web系统，都非常忌讳多个达标关联查询，以及复杂的数据分析类型的报表查询，特别是SNS类型的网站，从需求以及产品
				设计角度，就避免了这种情况的发生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL的功能被极大的弱化了。
	5. BASE是什么
		①BASE就是为了解决关系型数据库强一致性引起的问题而引起的可用性降低而提出的解决方案
		②BASE其实是下面三个术语的缩写
			A. 基本可以性（Basically Available）
			B. 软状态（Soft state）
			C. 最终一致性（Eventually consistent）
		③它的思想是通过让系统放松对某一时刻数据的一致性的要求来换取系统整体伸缩性和性能上的改观，为什么这么说，缘由就在于大型系统往往由于地域
		分布和极高的性能要求，不可能采用分布式事务来完成这些指标，想要获得这些指标，就必须采用另外一种方式来完成，这里BASE就是解决这个问题的办法
	6. 分布式+集群简介
		①分布式系统（distributed system）
			由多台计算机和通信的软件自检通过计算机网络连接（本地网络和广域网）组成。分布式系统是建立在网络之上的软件系统。正是因为软件的特性，所以
			分布式系统具有高度的内聚性和透明性。因此，网络和分布式系统之间的区别更多的在于高层软件（特别是操作系统），而不是硬件。分布式系统可以
			应用在不同的平台上如：PC、工作站、局域网和广域网上等。
		②简单来说
			A. 分布式：不同的多台服务器上部署不同的服务模块（工程），他们之间通过RPC/RMI之间通信和调用，对外提供服务和组内协作
			B. 集群：  不同的多台服务器上部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问


















		