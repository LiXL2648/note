一、Redis入门介绍
	1. 入门概述
		①Redis是什么
			A. Redis:REmote DIctionary Server(远程字典服务器)
			B. 是完全开源免费的，用C语言编写的，遵守BSD协议，是一个高性能的(key/value)分布式内存数据库，基于内存运行
			并支持持久化的NoSQL数据库，是当前最热门的NoSql数据库之一,也被人们称为数据结构服务器
			C. Redis 与其他 key - value 缓存产品有以下三个特点
				a. Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用
				b. Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储
				c. Redis支持数据的备份，即master-slave模式的数据备份
		②Redis能干嘛
			A. 内存存储和持久化：redis支持异步将内存中的数据写到硬盘上，同时不影响继续服务
			B. 取最新N个数据的操作，如：可以将最新的10条评论的ID放在Redis的List集合里面
			C. 模拟类似于HttpSession这种需要设定过期时间的功能
			D. 发布、订阅消息系统
			E. 定时器、计数器
		③Redis去哪下
			A. 官网：http://redis.io/
			B. 中文网站：http://www.redis.cn/
		④Redis怎么玩
			A. 数据类型、基本操作和配置
			B. 持久化和复制，RDB/AOF
			C. 事务的控制
			D. 复制
	2. Redis的安装
		①Windows版的安装
			A. Window 下载安装
				下载地址：https://github.com/dmajkic/redis/downloads
				下载到的Redis支持32bit和64bit。根据自己实际情况选择，将64bit的内容cp到自定义盘符安装目录取名redis。 如 C:\reids
				打开一个cmd窗口 使用cd命令切换目录到 C:\redis 运行 redis-server.exe redis.conf 。
				如果想方便的话，可以把redis的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个redis.conf可以省略，
				如果省略，会启用默认的。输入之后，会显示如下界面：
				这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。
				切换到redis目录下运行 redis-cli.exe -h 127.0.0.1 -p 6379 。
				设置键值对 set myKey abc
				取出键值对 get myKey
			B.  重要提示：由于企业里面做Redis开发，99%都是Linux版的运用和安装，几乎不会涉及到Windows版
		②Linux版安装（以CentOS为例）
			A. 官网下载以redis-5.0.4.tar.gz放入到Linux目录/opt
			B. /opt目录下，解压命令:tar -zxvf redis-5.0.4.tar.gz
			C. 进入目录:cd redis-5.0.4
			D. 在redis-5.0.4目录下执行make命令
				a. 运行make命令时可能出现的错误解析：
				b. 能上网：yum install gcc-c++
				c. 不上网：手动安装gcc-c++
				d. 二次make
				e. jemalloc/jemalloc.h：没有那个文件或目录
				f. 运行make distclean之后再make
				g. Redis Test(可以不用执行)
			E. 如果make完成后继续执行make install(省略了...)
				执行该步骤，可以省略F步骤。
			F. 进入源目录src
				a. 复制 Redis 的服务器和客户端到 /usr/local/bin。
				b. 也把 sentinel，benchmark 和 check 复制过去。
				c. cp redis-server redis-cli redis-sentinel redis-benchmark redis-check-aof /usr/local/bin
			G. 查看默认安装目录：usr/local/bin
				a. redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何(服务启动起来后执行)
				b. redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲
				c. redis-check-dump：修复有问题的dump.rdb文件
				d. redis-cli：客户端，操作入口
				e. redis-sentinel：redis集群使用
				f. redis-server：Redis服务器启动命令
			H. 启动redis服务
				a. 将默认的redis.conf拷贝到自己定义好的一个路径下，比如/myconf
				b. 修改redis.conf文件将里面的daemonize no 改成 yes，让服务在后台启动
				c. /usr/local/bin目录下运行使用命令redis-server /myconf/redis.conf开启服务
				d. /usr/local/bin目录下运行使用命令redis-cli -p 6379获取redis连接
				e. helloworld：设置：set hello world，获取：get hello
				f. 单实例关闭：redis-cli shutdown
				g. 多实例关闭，指定端口关闭:redis-cli -p 6379 shutdown
				h. 退出exit
		③Redis启动后杂项基础知识讲解
			A. redis是一个单进程
				a. 单进程模型来处理客户端的请求。对读写等事件的响应
				是通过对epoll函数的包装来做到的。Redis的实际处理速度完全依靠主进程的执行效率
				b. epoll是Linux内核为处理大批量文件描述符而作了改进的epoll，是Linux下多路复用IO接口select/poll的增强版本，
				它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。
			B. 默认16个数据库，类似数组下表从零开始，初始默认使用零号库
			C. select命令切换数据库
			D. dbsize查看当前数据库的key的数量
			E. flushdb：清空当前库
			F. Flushall；通杀全部库
			G. Redis索引都是从零开始
			H. 默认端口是6379
			I. 统一密码管理，16个库都是同样密码，要么都OK要么一个也连接不上
二、Redis数据类型
	1. Redis的五大数据类型	
		①string（字符串）		
			A. string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。
			B. string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。
			C. string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M	
		②hash（哈希，类似java里的Map）		
			A. Redis hash 是一个键值对集合。
			B. Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。
			C. 类似Java里面的Map<String,Object>	
		③list（列表）有序有重复	
			A. Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。
			B. 它的底层实际是个链表	
		④set（集合）无序不重复		
			A. Redis的Set是string类型的无序集合。它是通过HashTable实现实现的
		⑤zset(sorted set：有序集合)
			A. Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。
			B. 不同的是每个元素都会关联一个double类型的分数。
			C. redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。
	2. 哪里去获得redis常见数据类型操作命令			
		A. 最全的操作命令：http://redisdoc.com/	
		B. 常见的操作命令：https://www.runoob.com/redis/redis-tutorial.html
	3. Redis 键(key)
		A. keys *：查看所有的key
		B. exists key的名字，判断某个key是否存在
		C. move key db   --->将当前库的key剪切到另一个库中，当前库就被移除了
		D. expire key 秒钟：为给定的key设置过期时间	
		E. ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期		
		F. type key 查看你的key是什么类型		
	4. Redis字符串(String)			
		A. 单值单value		
		B. set/get/del/append/strlen：写入/读取/删除/拼串/获取字符串长度		
		C. Incr/decr/incrby/decrby：value加一/减一/加几/减几，Value一定要是数字才能进行加减		
		D. getrange/setrange
			a. getrange:获取指定区间范围内的值，类似between......and的关系
			b. 从零到负一表示全部
			c. setrange设置指定区间范围内的值，格式是setrange key 具体值
		E. setex(set with expire)键秒值/setnx(set if not exist)
			a. setex:设置带过期时间的key，动态设置。
			b. setex 键 秒值 真实值
			c. setnx:只有在 key 不存在时设置 key 的值。
		F. mset/mget/msetnx
			a. mset:同时设置一个或多个 key-value 对。
			b. mget:获取所有(一个或多个)给定 key 的值。
			c. msetnx:同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。
		G.  getset(先get再set)
			a. getset:将给定 key 的值设为 value ，并返回 key 的旧值(old value)。
			b. 简单一句话，先get然后立即set
	5. Redis列表(List)
		①性能总结
			A. 单值多value
			B. 它是一个字符串链表，left、right都可以插入添加；
			C. 如果键不存在，创建新的链表；
			D. 如果键已存在，新增内容；
			E. 如果值全移除，对应的键也就消失了。
			F. 链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了。
		②lpush/rpush/lrange：从左入栈（先入后出）/从右入栈（先入先出）/输入下标范围中的元素
		③lpop/rpop：从左弹出栈/从右弹出栈
		④lindex：按照索引下标获得元素(从上到下)
		⑤llen：查看value的元素个数
		⑥lrem key n value：删N个value
		⑦ltrim key 开始index 结束index：截取指定范围的值后再赋值给该key
		⑧rpoplpush 源列表 目的列表:在源列表的栈底弹出一个值压到目的列表中的栈顶
		⑨lset key index value：修改某个下标的值
		⑩linsert key  before/after 值1 值2：在某个值的前面或者后面插入一个值
	6. Redis集合(Set)
		① 单值多value
		② sadd/smembers/sismember：往集合中添加/遍历集合/判断是否是集合的元素
		③ srem key value：删除集合中元素
		④ scard：获取集合里面的元素个数
		⑤ srandmember key 某个整数：随机出几个数
		⑥ spop key 随机出栈
		⑦ smove key1 key2 在key1里某个值：作用是将key1里的某个值赋给key2
		⑧ 数学集合类
			A. 差集：sdiff
			B. 交集：sinter
			C. 并集：sunion
	7. Redis哈希(Hash)
		① KV模式不变，但V是一个键值对
		② hset/hget/hmset/hmget/hgetall/hdel（重中之重）：
			添加或者更新value中k/v\获取value中的value\添加或者更新多个\获取多个\获取所有的k/v\删除value中的某个k/v
		③ hlen：查看value中的元素个数
		④ hexists key 在key里面的某个值的key：判断value中某个key是否存在
		⑤ hkeys/hvals：获取所有的key/value
		⑥ hincrby/hincrbyfloat：value中的某个数字型或者小数型的value增加多少
		⑦ hsetnx：如果value中存在k则不添加，否则添加
	8. Redis有序集合Zset(sorted set)
		① 在set基础上，加一个score值。之前set是k1 v1 v2 v3，现在zset是k1 score1 v1 score2 v2
		② zadd/zrange（withscores）：添加或者更新一个有序集合/遍历一个有序集合（可以输出分数）
		③ zrangebyscore key 开始score 结束score：输出一个分数范围内的元素
			A. withscores：可以输出带分数的元素
			B. (：不包含该元素
			C. limit 作用是返回限制： limit 开始下标 大小
		④ zrem key 某score下对应的value值：作用是删除元素
		⑤ zcard/zcount key score区间：获取集合的元素个数/获取分数范围内元素的个数
		⑥ zrank key values值：作用是获得下标值/zscore key 对应值,获得分数
		⑦ zrevrank key values值，作用是逆序获得下标值
		⑧ zrevrange：逆序遍历集合
		⑨ zrevrangebyscore  key 结束score 开始score：逆序遍历分数范围内的元素














			