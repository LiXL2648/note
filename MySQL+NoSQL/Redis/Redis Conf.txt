一、解析配置文件redis.conf
	1. 通用配置
		① redis.conf的位置
			A. 在/opt/中解压缩redis-5.0.4.tar.gz后会出现一个redis-5.0.4目录，在目录中执行安装操作之后将其中的redis.conf复制到一个专门
			存放配置文件的目录下
			B. 为什么我将它拷贝出来单独执行？原因是避免修改redis.conf文件出现错误而无法复原的问题
		②units单位
			A. 单位转换
				1k => 1000 bytes
				1kb => 1024 bytes
				1m => 1000000 bytes
				1mb => 1024*1024 bytes
				1g => 1000000000 bytes
				1gb => 1024*1024*1024 bytes
			B. 配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit
    		C. 对大小写不敏感
		③INCLUDES包含
			和Struts2配置文件类似，可以通过includes包含，redis.conf可以作为总闸，包含其他
		④GENERAL通用
			A. daemonize：
				a. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程
				b. 配置项：daemonize no
			B. pidfile
				a. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定
				b. 配置项：pidfile /var/run/redis.pid
			C. port
				a. 指定Redis监听端口，默认端口为6379
				b. 配置项：port 6379
			D. tcp-backlog
				a. 设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。
				b. 在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值，所以需要确认增大somaxconn和tcp_max_syn_backlog两个值
				来达到想要的效果
			E. timeout：
				a. 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能，建议设置为300
				b. 配置项：timeout 0
			F. tcp-keepalive
				a. 单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60 
				b. 配置项：p-keepalive 300
			G. loglevel
				a. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose
				b. 配置项：loglevel verbose
			H. logfile
				a. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null
				b. 配置项：logfile ""
			I. syslog-enabled
				a. 是否把日志输出到syslog中
				b. 配置项：syslog-enabled no
			J. syslog-ident
				a. 指定syslog里的日志标志，默认标志位redis
				b. 配置项：syslog-ident redis
			K. syslog-facility
				a. 指定syslog设备，值可以是USER或LOCAL0-LOCAL7
				b. 配置项：yslog-facility local0
			L. databases
				a. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id
  				b. 配置项：databases 16
			M. bind 
				a. 绑定的主机地址，默认为本机IP地址
				b. 配置项：bind 127.0.0.1
		⑤ SECURITY安全：redis更注重性能而降低安全策略
			A. 访问密码的查看
				a. 默认redis登录时的密码为空，即不需要密码即可访问redis
				b. 查看密码命令：config get requirepass
			B. 设置
				a. 命令config set requirepass "2648"
				b. 再次访问时需要输出密码命令为：auth 2648
			C. 取消
				a. config set requirepass ""
			D. 获取当前开启redis服务的路径
				a. 命令：config get dir
				b. redis服务可以在任意目录下开启，因此通过config get dir获取的目录是开启redis服务的那个目录
			E. 在其他目录下开启redis服务和获取连接（有时，在某个路径下启动redis服务，其配置即保存在当前路径）
				a. shutdown：断开当前连接
				b. exit：退出当前redis服务
				c. cd /tmp/：进入tmp目录
				d. redis-server /myredis/redis.conf：开启redis服务
				e. redis-cli -p 6379：获取redis连接
				f. config get dir
				g. 得到的当前开启redis服务的目录是tmp目录
		⑥LIMITS限制
			A. maxclients
				a. 设置redis同时可以与多少个客户端进行连接。默认情况下为10000个客户端。当你
				无法设置进程文件句柄限制时，redis会设置为当前的文件句柄限制值减去32，因为redis会为自
				身内部处理逻辑留一些句柄出来。如果达到了此限制，redis则会拒绝新的连接请求，并且向这
				些连接请求方发出“max number of clients reached”以作回应。
				b. 配置项：maxclients 10000
			B. maxmemory
				a. 设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，
				移除规则可以通过maxmemory-policy来指定。如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，
				那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。
				b. 但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），
				那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素
				c. 配置项：maxmemory <bytes>
			C. maxmemory-policy
				a. volatile-lru：使用LRU算法移除key，只对设置了过期时间的键
				b. allkeys-lru：使用LRU算法移除key
				c. volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键
				d. allkeys-random：移除随机的key
				e. volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key
				f. noeviction：不进行移除。针对写操作，只是返回错误信息
				g. 配置项：
					# volatile-lfu -> Evict using approximated LFU among the keys with an expire set.
					# allkeys-lfu -> Evict any key using approximated LFU.
					# volatile-random -> Remove a random key among the ones with an expire set.
					# allkeys-random -> Remove a random key, any key.
					# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)
					# noeviction -> Don't evict anything, just return an error on write operations.
					默认配置项为不移除：maxmemory-policy noeviction
			D. maxmemory-samples
				a. 设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，
				redis默认会检查这么多个key并选择其中LRU的那个
				b. 配置项：maxmemory-samples 5
		⑦常见配置redis.conf介绍
			redis.conf 配置项说明如下：
			1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程
			  daemonize no
			2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定
			  pidfile /var/run/redis.pid
			3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字
			  port 6379
			4. 绑定的主机地址
			  bind 127.0.0.1
			5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能
			  timeout 300
			6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose
			  loglevel verbose
			7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null
			  logfile stdout
			8. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id
			  databases 16
			9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合
			  save <seconds> <changes>
			  Redis默认配置文件中提供了三个条件：
			  save 900 1
			  save 300 10
			  save 60 10000
			  分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。
			 
			10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大
			  rdbcompression yes
			11. 指定本地数据库文件名，默认值为dump.rdb
			  dbfilename dump.rdb
			12. 指定本地数据库存放目录
			  dir ./
			13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步
			  slaveof <masterip> <masterport>
			14. 当master服务设置了密码保护时，slav服务连接master的密码
			  masterauth <master-password>
			15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭
			  requirepass foobared
			16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息
			  maxclients 128
			17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区
			  maxmemory <bytes>
			18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no
			  appendonly no
			19. 指定更新日志文件名，默认为appendonly.aof
			   appendfilename appendonly.aof
			20. 指定更新日志条件，共有3个可选值： 
			  no：表示等操作系统进行数据缓存同步到磁盘（快） 
			  always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） 
			  everysec：表示每秒同步一次（折衷，默认值）
			  appendfsync everysec
			 
			21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）
			   vm-enabled no
			22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享
			   vm-swap-file /tmp/redis.swap
			23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0
			   vm-max-memory 0
			24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值
			   vm-page-size 32
			25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。
			   vm-pages 134217728
			26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4
			   vm-max-threads 4
			27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启
			  glueoutputbuf yes
			28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法
			  hash-max-zipmap-entries 64
			  hash-max-zipmap-value 512
			29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）
			  activerehashing yes
			30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件
			  include /path/to/local.conf
	2. 模块配置
		①SNAPSHOTTING快照
			A. Save
				a. save 秒钟 写操作次数
					RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，默认
					是1分钟内改了1万次，
					或5分钟内改了10次，
					或15分钟内改了1次。
				b. 配置项：
					save 900 1
					save 300 10
					save 60 10000
				c. 禁用
					如果想禁用RDB持久化的策略，只要不设置任何save指令，或者给save传入一个空字符串参数也可以
			B. stop-writes-on-bgsave-error
				a. 如果配置成no，表示你不在乎数据不一致或者有其他的手段发现和控制，默认是yes
				b. 配置项：stop-writes-on-bgsave-error yes
			C.  rdbcompression
				a. rdbcompression：对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用
				LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。Redis默认设置为yes
				b. 配置项：rdbcompression yes
			D.  rdbchecksum
				a. rdbchecksum：在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约
				10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。Redis默认设置为yes
				b. 配置项：rdbchecksum yes
			E.  dbfilename
				a. 默认将磁盘上的文件读到内存中的文件是dump.rdb
				b. 配置项：dbfilename dump.rdb
			F.  dir
				a. 生成备份文件的存放位置是开启Redis服务的路径
				b. 配置项：dir ./
		②REPLICATION复制
		③APPEND ONLY MODE追加
			A.  appendonly
				a. 是否开启AOF，默认为不开启，将该redis.conf备份并将appendonly该为yes
				b. 配置项：appendonly no
			B.  appendfilename
				a. 默认备份的名字，建议不要修改
				b. 配置项：appendfilename "appendonly.aof"
			C. appendfsync
				a. 备份机制，默认选择everysec
				b. always：同步持久化 每次发生数据变更会被立即记录到磁盘  性能较差但数据完整性比较好
				c. everysec：出厂默认推荐，异步操作，每秒记录   如果一秒内宕机，有数据丢失
				d. no：写入aof文件，不等待磁盘同步。
				e. 配置项：
					# appendfsync always
					appendfsync everysec
					# appendfsync no
			D. no-appendfsync-on-rewrite：
				a. 重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性。
				b. 如果该参数设置为no，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题
				c. 如果设置为yes呢？这就相当于将appendfsync设置为no，这说明并没有执行磁盘操作，只是写入了缓冲区，因此这样并不会造成阻塞
				但是如果这个时候redis挂掉，就会丢失数据，最多会丢失30s的数据。
				d.  如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为yes。如果应用系统无法忍受数据丢失，则设置为no。
				e.  配置项：no-appendfsync-on-rewrite no
			E. auto-aof-rewrite-min-size：
				a. 设置重写的基准值
				b. 触发aof rewrite的最小文件尺寸
				c. 配置项：auto-aof-rewrite-min-size 64mb
			F. auto-aof-rewrite-percentage：
				a. 设置重写的基准值
				b. 当前写入日志文件的大小超过上一次rewrite之后的文件大小的百分之100时就是2倍时触发Rewrite
				auto-aof-rewrite-percentage 100
				c. auto-aof-rewrite-percentage 100
			G. 企业级开发，一般设置AOF最小文件尺寸为3GB
二、redis的持久化
	1. RDB（Redis DataBase）
		①RDB是什么
			A. 在指定的时间间隔内将内存中的数据集快照写入磁盘，
			也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里
			B. Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到
			一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。
			整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能
			如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方
			式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。
		②Fork
			fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）
			数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程
		③rdb 保存的是dump.rdb文件
		④配置位置：详见一、解析配置文件redis.conf中2. 模块配置中的①SNAPSHOTTING快照
		⑤如何触发RDB快照
			A. 配置文件中默认的快照配置
				a. 冷拷贝后重新使用
					一般可可以cp dump.rdb dump_new.rdb在两台机器上备份，防止机器出现处理损坏
				b. 可以使用config get dir获取备份文件dump.rdb的存放位置，即开启了redis服务的路径
			B. 命令save或者是bgsave
				a. Save：save时只管保存，其它不管，全部阻塞
				b. BGSAVE：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过lastsave
				命令获取最后一次成功执行快照的时间
			C. 执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义
		⑥如何恢复
			A. 将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可
		⑦优势
			A. 适合大规模的数据恢复
			B. 对数据完整性和一致性要求不高
		⑧劣势
			A. 在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改
			B. fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑
		⑨如何停止RDB快照
			A. 动态所有停止RDB保存规则的方法：redis-cli config set save ""
			B. 在redis.conf中删除RDB快照的配置信息
			C. 所有的快照配型信息替换为save ""
		⑩小总结
			A. RDB持久化的转化过程
										  rdbSave
				内存中的数据对象		===========》		磁盘中的RDB文件
										《==========	
										  rdbLoad
			B. 与AOF相比优势和劣势
				a. 优势
					（1）RDB是一个非常紧凑的文件
					（2）RDB在保存RDB文件时父进程唯一需要做的就是fork出一个子进程，接下来的工作全部都由子进程来做
					父进程不在需要做其他的IO操作，所以RDB持久化方式可以最大化redis的性能
					（3）与AOF相比，在恢复大的数据集的时候，RDB方式会更快一些
				b. 劣势：
					（1）数据丢失风险大
					（2）RDB需要经常fork子进程来保存数据集到磁盘中，当数据集比较大的时候，fork的过程是非常耗时的，
					可能会导致redis在一些毫秒级上不能响应客户的请求 
	2. AOF（Append Only File）
		①AOF是什么
			以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，
			只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis
			重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作
		②Aof保存的是appendonly.aof文件
		③配置位置：详见一、解析配置文件redis.conf中2. 模块配置中的③APPEND ONLY MODE追加
		④AOF启动/修复/恢复
			A. 正常恢复
				a. 启动：设置Yes，修改默认的appendonly no，改为yes
				b. 将有数据的aof文件复制一份保存到对应目录(config get dir)
				c. 恢复：重启redis然后重新加载
			B. 异常恢复
				a. 启动：设置Yes，修改默认的appendonly no，改为yes
				b. 备份被写坏的AOF文件
				c. 修复：redis-check-aof --fix进行修复
				d. 恢复：重启redis然后重新加载
		⑤rewrite
			A. rewrite是什么
				a. AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制,
				当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，
				b. 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof
			B. 重写原理
				a. AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，
				遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，
				而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似
			C. 触发机制
				a. Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发
		⑥优势
			a. 每修改同步：appendfsync always，同步持久化，每次发生数据变更会被立即记录到磁盘  性能较差但数据完整性比较好
			b. 每秒同步：appendfsync everysec，异步操作，每秒记录，如果一秒内宕机，有数据丢失
			c. 不同步：appendfsync no，从不同步
		⑦劣势
			a. 相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb
			b. aof运行效率要慢于rdb,每秒同步策略效率较好，不同步效率和rdb相同
		⑧小总结
			A. RDB持久化的转化过程
						命令请求					网络协议格式
			客户端		--------》		服务器		---------》AOF文件
													的命令内容
			B. AOF文件是一个只追加的日志文件
			C. Redis可以在AOF文件体积变得过大时，自动地在后台对AOF进程重写
			D. AOF文件有序地保存了对数据库的所有写入操作，这些写入操作作为Redis协议的格式保存，因此AOF文件的内容非常容易被人读懂
			对文件进行分析也很容易
			F. 对于相同提及的数据集来说，AOF文件的体积通常要大于RDB文件的体积
			G. 根据使用的fsync策略，AOF的速度可能会低于RDB
	3. 总结(Which one)
		① 官网建议：同时开启两种持久化方式
			A. 在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据,
			因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.
			B. RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？
			作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)，
			快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。
		② RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储
		③ AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些
		命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.
		Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大
		④ 只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.
		⑤ 性能建议
			A. 因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。
			B. 如果Enalbe AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价一是带来了持续的IO，
			二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，
			AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。
			C.  如果不Enable AOF ，仅靠Master-Slave Replication 实现高可用性也可以。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，
			会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。新浪微博就选用了这种架构




				