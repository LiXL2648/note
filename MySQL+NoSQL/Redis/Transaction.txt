一、Redis的事务
	1. Redis的事务是什么
		可以一次执行多个命令，本质是一组命令的集合。一个事务中的
		所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞
	2. Redis的事务能干嘛
		一个队列中，一次性、顺序性、排他性的执行一系列命令
	3. Redis的事务怎么玩
		① 常用命令
			A. DISCARD
				取消事务，放弃执行事务块内的所有命令。
			B. EXEC
				执行所有事务块内的命令。
			C. MULTI
				标记一个事务块的开始。
			D. UNWATCH
				取消 WATCH 命令对所有 key 的监视。
			E. WATCH key [key ...]
				监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。
		② case1：正常执行，当队列中的所有命令均没有错误，并且最终使用EXEC执行所有命令时，事务正常执行
			127.0.0.1:6379> MULTI
			OK
			127.0.0.1:6379> set k1 v1
			QUEUED
			127.0.0.1:6379> set k2 v2
			QUEUED
			127.0.0.1:6379> set k3 v3
			QUEUED
			127.0.0.1:6379> get k3
			QUEUED
			127.0.0.1:6379> EXEC
			1) OK
			2) OK
			3) OK
			4) "v3"
		③Case2：放弃事务，在命令入队完毕后，最终使用DISCARD执行时，意为放弃事务
			127.0.0.1:6379> MULTI
			OK
			127.0.0.1:6379> set k4 v4
			QUEUED
			127.0.0.1:6379> set k5 v5
			QUEUED
			127.0.0.1:6379> set k6 v6
			QUEUED
			127.0.0.1:6379> get k6
			QUEUED
			127.0.0.1:6379> DISCARD
			OK
		④Case3：全体连坐，当事务中有一条或者多条命令入队错误时，会导致最终所有命令执行失败
			127.0.0.1:6379> MULTI
			OK
			127.0.0.1:6379> set k4 v4
			QUEUED
			127.0.0.1:6379> set k5 v5
			QUEUED
			127.0.0.1:6379> set k6 v6
			QUEUED
			127.0.0.1:6379> getset k1
			(error) ERR wrong number of arguments for 'getset' command
			127.0.0.1:6379> EXEC
			(error) EXECABORT Transaction discarded because of previous errors.
		⑤Case4：冤头债主，即事务中若出现入队成功，而执行时才出现错误时，仅该命令无法执行，而其他命令正常执行
		该模块也说明Redis只部分支持事务。
			127.0.0.1:6379> MULTI
			OK
			127.0.0.1:6379> incrby k1 10
			QUEUED
			127.0.0.1:6379> set k4 v4
			QUEUED
			127.0.0.1:6379> set balance 100
			QUEUED
			127.0.0.1:6379> set debt 0
			QUEUED
			127.0.0.1:6379> EXEC
			1) (error) ERR value is not an integer or out of range
			2) OK
			3) OK
			4) OK
		⑥Case5：watch监控，类似于乐观锁
			A. 悲观锁/乐观锁/CAS(Check And Set)
				a. 悲观锁
					悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在
					拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了
					很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁
				b. 乐观锁
					乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，
					但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读
					的应用类型，这样可以提高吞吐量，乐观锁策略:提交版本必须大于记录当前版本才能执行更新
				c. CAS(Check And Set)
			B. 实例
				a. 初始化信用卡可用余额和欠额
				b. 无加塞篡改，先监控再开启multi，保证两笔金额变动在同一个事务内
				c. 有加塞篡改，监控了key，如果key被修改了，后面一个事务的执行失效
				d. unwatch取消所有对key的监控
				e. 一旦执行了exec之前加的监控锁都会被取消掉了
			C. 小结
				a.  Watch指令，类似乐观锁，事务提交时，如果Key的值已被别的客户端改变，
				比如某个list已被别的客户端push/pop过了，整个事务队列都不会被执行
				b. 通过WATCH命令在事务执行之前监控了多个Keys，倘若在WATCH之后有任何Key的值发生了变化，
				EXEC命令执行的事务都将被放弃，同时返回Nullmulti-bulk应答以通知调用者事务执行失败
	4. Redis的事务3阶段
		①开启：以MULTI开始一个事务
		②入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面
		③执行：由EXEC命令触发事务
	5. Redis的事务3特性
		①单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。
		②没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，
		也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题
		③不保证原子性：redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚，因此Redis是部分支持事务。
二、Redis的发布订阅
	1. 是什么
		进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。
	2. 命令
		① PSUBSCRIBE pattern [pattern ...]
			订阅一个或多个符合给定模式的频道。
		② PUBSUB subcommand [argument [argument ...]]
			查看订阅与发布系统状态。
		③ PUBLISH channel message
			将信息发送到指定的频道。
		④ PUNSUBSCRIBE [pattern [pattern ...]]
			退订所有给定模式的频道。
		⑤ SUBSCRIBE channel [channel ...]
			订阅给定的一个或多个频道的信息。
		⑥ UNSUBSCRIBE [channel [channel ...]]
			指退订给定的频道。
	3. 案列
		① 先订阅后发布后才能收到消息
		② 可以一次性订阅多个，SUBSCRIBE c1 c2 c3
		消息发布，PUBLISH c2 hello-redis
		
		③ 订阅多个，通配符*， PSUBSCRIBE new*
		收取消息， PUBLISH new1 redis2015
	4. 实际工作中不会使用Redis作为消息中间件
三、Redis的主从复制(Master/Slave)
	1. Redis的复制是什么
		行话：也就是我们所说的主从复制，主机数据更新后根据配置和策略，
		自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主
	2. Redis的复制能干嘛
		① 读写分离
		② 容灾恢复
	3. Redis的复制怎么玩
		① 配从(库)不配主(库)
		② 修改配置文件细节操作
			A. 拷贝多个redis.conf文件
			B. 开启daemonize yes
			C. pid文件名字
			D. 指定端口
			E. log文件名字
			F. dump.rdb名字
		③ 从库配置：执行 slaveof 主库IP 主库端口 命令
			A. 每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件
			B. 使用 info replication 命令查看当前数据库状态
		④ 常用3招
			A. 一主二仆
				a. Init配置并查看
				b. 一个Master两个Slave
				c. 日志查看，只查看命令：cat 文件
					（1）主机日志
					（2）备机日志
					（3）info replication
				d. 主从问题演示，五个常见问题
					（1）当在79进程中新增k5 v5，在80、81进程中无法获取，当80、81进程执行slaveof 127.0.0.1 6379命令之后，立即对主进程进行复制，从而可以获取k5的值
					（2）当80、81进程声明为79进程的Slave时，在79进程中执行任何命令，都会立即被80、81进程复制
					（3）声明为slave的进程不能执行写的操作，从而实现读写分离。
					（4）当主进程宕机了，从进程会保持原地待命，等待主进程从新连接，并且连接状态为down。当主机重新连接时，主从依旧。
					（5）当从机与主机断开连接了，主从体系被破坏，需要重新执行slaveof 127.0.0.1 6379命令，实现主从。如果要自动连接主机，需要在redis.conf中配置
			B. 薪火相传
				a. 上一个Slave可以是下一个slave的Master，Slave同样可以接收其他
				slaves的连接和同步请求，那么该slave作为了链条中下一个的master,
				可以有效减轻master的写压力。
				b. 中途变更转向:会清除之前的数据，重新建立拷贝最新的
				c. slaveof 新主库IP 新主库端口
				d. 薪火相传模式也是仅有一个master(旗下只有一个slave)，其余都是slave（其中一个slave下挂靠着一个slave）
			C. 反客为主
				a. 当master宕机后，其余的slave原地待命，并不会反客为主，等待master的重新上线，此时的连接状态为down
				b. 当slave执行 SLAVEOF no one 命令时， 当前数据库停止与其他数据库的同步，转成主数据库
				c. 而没有执行 SLAVEOF no one 命令的slaver以及挂靠在原先的master上，等待连接
				d. 当原先的master重新上线时，此时有两个master共存
	4. 复制原理			
		① slave启动成功连接到master后会发送一个sync命令
		② Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，
		在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步
		③ 全量复制（第一次连接上master时的同步）：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。
		④ 增量复制（第一次连接上master后的同步）：Master继续将新的所有收集到的修改命令依次传给slave,完成同步
		⑤ 但是只要是重新连接master,一次完全同步（全量复制)将被自动执行
	5. 哨兵模式(sentinel)
		① 是什么
			反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库
		② 怎么玩(使用步骤)
			A. 调整结构，6379带着80、81
			B. 自定义的/myredis目录下新建sentinel.conf文件，名字绝不能错
			C. 配置哨兵,填写内容
				A. sentinel monitor 被监控数据库名字(自己起名字) 127.0.0.1 6379 1
				B. 上面最后一个数字1，表示主机挂掉后salve投票看让谁接替成为主机，得票数多少后成为主机
			D. 启动哨兵
				A. redis-sentinel /myredis/sentinel.conf 
				B. 上述目录依照各自的实际情况配置，可能目录不同
			E. 正常主从演示
			F. 原有的master挂了
			G. 投票新选
			H. 重新主从继续开工,info replication查查看
			I. 问题：如果之前的master重启回来，会不会双master冲突？
				不会，重启之后的master会被哨兵监控，但是其会变成slave，挂靠在新的master下，重新主从继续复制
		③ 一组sentinel能同时监控多个Master
	6. 复制的缺点：复制延时
		由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，
		当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。



		