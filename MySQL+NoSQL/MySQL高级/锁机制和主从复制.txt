一、MySQL锁机制
	1. 概述
		① 定义
			A. 锁是计算机协调多个进程或线程并发访问某一资源的机制
			B 在数据库中，除传统的计算机资源（如：CPU、RAM、I/O等）的争用以外，数据也是一种供多用户共享的资源，如何保证数据鬓发访问的一致性、有效性是所有数据库必须解决的一个问题
			所冲突也是影响数据库并发访问的一个重要因素。从这个角度上来说，所对数据库而言显得尤其重要，也更加复杂
		② 锁的分类
			A. 从对数据操作类型（读/写）分
				a. 读锁（共享锁）：针对同一数据，多个读操作可以同时进行而不会互相影响
				b. 写锁（排他锁）：当前写操作没有完成之前，它会阻断其他写锁和读锁
			B. 从对书库操作的粒度分
				a. 表锁
				b. 行锁
	2. 三锁：开销、加锁速度、死锁、粒度、并发性能只能就具体应用的特点来说哪种锁更合适。
		① 表锁（偏读）
			A. 特点：偏向于MyISAM存储引擎，开销小，加锁快，无死锁。锁定粒度大，发生冲突的概率最高，并发性最低
			B. 案例分析：
				a. 建表SQL：
					CREATE TABLE mylock(
						id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
						`name` VARCHAR(20)
					)ENGINE MYISAM;

					INSERT INTO mylock(`name`) VALUES('a');
					INSERT INTO mylock(`name`) VALUES('b');
					INSERT INTO mylock(`name`) VALUES('c');
					INSERT INTO mylock(`name`) VALUES('d');
					
					手动增加表锁
					lock table 表名字 read（write）, 表名字2 read（write）, 其他；
					lock table mylock read,user write
					
					查看表上增加的表锁
					show open tables;
					
					释放表锁
					unlock tables;
				b. 加读锁
					（1）当前session可以读自身加了锁的表，无法读取其他未加了锁的表，无法更新已经加了锁的表
					（2）其他session可以读取其他未加了锁的表，可以读取以及加了锁的表，当修改以及加了锁的表时，会发生阻塞，直到该表的锁释放时
				c. 加写锁
					（1）当前session可以读取已经加了锁的表，也可以修改该表，无法读取其他未加了锁的表
					（2）其他session可以读取其他未加了锁的表，当读取其他session已经加了锁的表时会发生阻塞，直到该表的锁释放。
			C. 案例结论：
				a. myisam在执行查询语句（select）前，会自动给涉及的所有表加读锁，在执行增删改操作前，会自动给涉及的表加写锁
				b. MySQL的表级锁有两种模式；表共享读锁（table read lock）和表独占写锁（table write lock）
				c. 结论：对MyISAM表进行操作时，会有以下情况；
					（1）对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读操作，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其他进程的写操作
					（2）对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其他的读和写操作
					（3）简而言之，就是读锁会阻塞写，但是不会阻塞读。而写锁会把读和写都阻塞。
			D. 表锁分析
				a. 查看表锁：show open tables;
				b. 如何分析表锁定
					（1）可以通过检查table_locks_waited和table_locks_immediate状态变量来分析系统上的表锁定
					SQL：show status like 'table%';
					+----------------------------+---------+
					| Variable_name              | Value   |
					+----------------------------+---------+
					| Table_locks_immediate      | 1000190 |
					| Table_locks_waited         | 1       |
					| Table_open_cache_hits      | 53      |
					| Table_open_cache_misses    | 3       |
					| Table_open_cache_overflows | 0       |
					+----------------------------+---------+
				c. 这里有两个状态变量记录MySQL内部表级锁定的情况，两个变量说明如下：
					（1）table_locks_immediate：产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取取值加1
					（2）出现表级锁定争用而发生等待的次数（不能立即获取锁的次数，每等待一次锁值加1），此值越高则说明存在着较严重的表级锁争用的情况。
				d. 此外，MyISAM的读写锁调度是写优先，这也是MyISAM不适合做写为主的引擎，因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永久阻塞
		② 行锁（偏写）
			A. 特点：偏向InnoDB存储引擎，开销大，加锁慢，会出现死锁，锁的粒度最小，发生冲突概率最小，并发度也最高
			InnoDB与MyISAM的最大不同有两点：支持事务（Transaction）和采用了行锁
			B. 由于行锁支持事务，复习老知识
				a. 事务（Transaction）及其ACID属性（必考）
				b. 并发事务处理带来的问题
					（1）更新丢失（Lost Update）
						当两个或多个事务选择同一行，然后基于最初选定放入值更新该行，由于每个事务不知道其他事务的存在，就会发生丢失更新问题--最后的更新覆盖了有其他事务所做的更新。
						例如：两个程序员修改同一Java文件。每个程序员独立地修改其副本，然后保留更改后的副本，这样就覆盖了原始文档，最后保存其更改副本的编辑人员覆盖前一个程序员所做的更改
						如果在一个程序员完成并提交事务之前，另一个程序员不能访问该文件，则可不避免此问题。
					（2）脏读（Dirty Reads）
						一个事务正在对一条记录做修改，子这个事务完成并提交前，这条记录的数据就处于不一致的状态；这时，另一个事务也来读取同一条记录，
						如果不加以控制，第二个事务读取了这些”脏“数据，并据此做进一步的处理，就会产生未提交的数据依赖关系，这种现象形象地叫做“脏读”。
						一句话：事务A读取了事务B已修改但尚未提交的数据，还在这个数据基础上做了操作，此时，如果事务B回滚，A读取的数据无效，不符合一致性要求。
					（3）不可重复读（Non-Repeatable Reads）
						一个事务在读取某些数据后的某个时间，再次读取以前的读过的数据，却发现其读出的数据已经发生了改变，或某些记录已经被删除了
						这种现象就叫做“不可重复读”。
						一句话：事务A读取了事务B以已经提交的修改数据，不符合隔离性。
					（4）幻读（Phantom Reads）
						一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。
						一句话：事务A读取了事务B的新增数据，不符合隔离性。
						脏读是事务B读取了事务A的修改数据
						幻读是事务B读取了事务A的新增数据
				c. 事务的隔离级别
					（1）脏读、不可重复读和幻读，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。
					读数据一致性及允许的并发副作用隔离级别	读数据一致性							脏读	不可重复读	幻读
					未提交读（Read uncommitted）			最低级别，自能保证不读物理上孙欢的数据	是		是			是
					已提交读（Read committed）				语句级									否		是			是
					可重复读（Repeatable Read）				事务级									否		否			是
					可序列化（Serializable）				最高级别，事务级						否		否			否
					（2）数据库的事务级别越严格，并发副作用越小，担付出的代价也就越高，因为事务各级实质上就是使事务在一定程度上“串行化”
					进行，这显然与“并发”是矛盾的。同时，不同的应用对读一致性和事务隔离程度的要求也是不同的，比如许多应用对“不可重复读”和
					“幻读”并不敏感，可能更关心数据并发访问的能力
					（3）常看当前数据库的事务隔离级别：show variables like 'tx_isolation';
					+---------------+-----------------+
					| Variable_name | Value           |
					+---------------+-----------------+
					| tx_isolation  | REPEATABLE-READ |
					+---------------+-----------------+
			C. 案例分析：
				a. 建表SQL：
				b. 行锁定基本演示
					（1）将当前session的自动提交修改为set autocommit = 0;,
					（2）当对当前表进行的某一行进行写操作并为提交时，其他session可以对当前表进行读的操作，并且读的是未修改前的值，符合了避免脏读
					（3）当对当前表进行的某一行进行写操作并为提交时，其他session同一行进行写操作时，会发生阻塞，指定当前session提交修改。
					（4）当对当前表进行的某一行进行写操作并为提交时，其他session可以对其他行进行写操作，两者并不干扰。
				c. 无索引行锁升级为表锁
					当前session对某一行进行写操作时造成了索引失效，而其他session对其他行进行写操作时会发生阻塞，此时行锁升级表锁。
				d. 间隙锁的危害
					（1）什么是间隙锁。
					当我们用范围条件而不是相等条件检索数据，并请求共享锁或排它锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范
					围内并不存在的记录，叫做“间隙（GAP）”
					InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（Next-Key锁）。
					（间隙锁的危害）
					因为Query执行过程中通过范围查找的haul，则会锁住整个范围内的所有索引键值，即使这个键值并不存在。
					间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键
					值范围内的任何数据，在某些场景下可能对性能造成很大的危害。
				e. 面试题：常考如何锁定一行
					（1）begin
					（2）select * from table where 行 for update
					（3）commit
					（4）当‘锁定该行之后，其他会话对同一行写的操作会被阻塞，直到加锁的session会话提交为止。
			D. 案例结论：
				a. Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来的性能可能比表级锁定会更高一些，但是整体并发处理能力方面要远远优于
				MyISAM的标记锁定的。当系统并发量较高的时候，Innodb的整体性能和MyISAM相比就会有比较明显的优势了。
				b. 但是，Innodb的行级锁定同样有其脆弱的一面，当我们使用不当的时候，可能会让Innodb的整体性能表现不仅不能比MyISAM高，甚至可能会更差。
			E. 行锁分析
				a. 如何分析行锁定
					通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况：show status like 'InnoDB_row_lock%';
				b. 对各个变量分析如下：
					（1）Innodb_row_lock_current_waits：当前正在等待锁定的数量
					（2）Innodb_row_lock_time：从系统启动到现在锁定总时间长度
					（3）Innodb_row_lock_time_avg：每次等待所花平均时间
					（3）Innodb_row_lock_time_max：从系统启动到现在等待最长的一次所花的时间
					（4）Innodb_row_lock_waits：系统启动后到现在总共等待的次数
					（5）对于这五个状态变量，比较重要的主要是：
						Innodb_row_lock_time_avg（等待平均时长）
						Innodb_row_lock_waits（等待总次数）
						Innodb_row_lock_waits（等待总时长）这三项
					（6）尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手指定优化计划。
			F. 优化建议：
				a. 尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁。
				b. 合理设计索引，尽量缩小锁的范围
				c. 尽可能较少检索条件，避免间隙锁
				d. 控制事务大小，减少锁定资源量和时间长度
				e. 尽可能低级别事务隔离
		③ 页锁 
			A. 特点：开销和加锁时间介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般
			B. 了解一下即可。
二、主从复制
	1. 复制的基本原理
		① slave会从master读取binlog进行数据同步
		②三步骤+原理示意图
			A. MySQL 复制过程分成三步：
				a. Master将改变记录到二进制日志（binaty log）。这些记录过程叫做二进制日志事件，binary log events;
				b. slave将master的binaty log events拷贝到它的中继日志（relay log）
				c. slave重做中继日志中的事件，将改变应用到自己的数据库中。MySQL复制是异步的且串行化的。
	2. 复制的基本原则
		① 每个slave只有一个master
		② 每个salve只能有一个唯一的服务器ID
		③ 每个Master可以有多个slave
	3. 复制的最大问题--延时
	4. 一主一从的常见配置
		① mysql版本一致且后台以服务运行，并且网络要互通即在同一网段。
		② 主从配置在[mysqld]节点下，都是小写
		③ 主机修改my.ini配置文件
			A. 主机服务器唯一ID（必须）: server-id=1
			B. 启用二进制日志（必须）：log-bin=%MYSQL_HOME%/mysqlbin，log-bin=D:\Program Files (x86)\MySQL\MySQL Server 5.5/data/mysqlbin
			C. 启用错误日志（可选）：log-err=%MYSQL_HOME%/mysqlerr，log-err=D:\Program Files (x86)\MySQL\MySQL Server 5.5/data/mysqlerr
			D. 根目录（可选）：basedir="%MYSQL_HOME%/"，basedir="D:\Program Files (x86)\MySQL\MySQL Server 5.5/"
			E. 临时目录（可选）：tmpdir="%MYSQL_HOME%/"，tmpdir="D:\Program Files (x86)\MySQL\MySQL Server 5.5/"
			F. 数据目录（可选）：datadir="%MYSQL_HOME%/data/"，datadir="D:\Program Files (x86)\MySQL\MySQL Server 5.5/data/"
			G. 主机，读写都可以：read-only=0
			H. 设置不要复制的数据库（可选）：binlog-ignore-db=不需要复制的数据库名，binlog-ignore-db=mysql
			I. 设置需要复制的数据库（可选）：binlog-do-db=需要复制的主数据库名
		④ 从机修改my.cnf配置文件
			A. 从机服务器唯一ID（必须）：server-id=1
			B. 启用二进制日志（可选，建议打开）：log-bin=mysql-bin
		⑤ 因修改过配置文件，主机+从机都需要重启后台MySQL服务
		⑥ 主机从机都关闭防火墙
			A. windows手动关闭防火墙
			B. Linux：service iptables stop
		⑦ 在Windows主机上建立账户并授权slave
			A. 授权给账户为root，密码为2648的从机登录到主机： GRANT REPLICATION SLAVE ON *.* TO 'root'@'192.168.107.29' IDENTIFIED BY '2648';
			B. 为确保安全，需要重新刷新命令：flush privileges;
			C. 查询master的状态
				a. 命令：show master status；
				b. 记录下file和Position的值
				+-----------------+----------+--------------+------------------+
				| File            | Position | Binlog_Do_DB | Binlog_Ignore_DB |
				+-----------------+----------+--------------+------------------+
				| mysqlbin.000003 |      107 |              | mysql            |
				+-----------------+----------+--------------+------------------+
				File：二进制文件名
				Position：主机文件中开始复制的行数
				Binlog_Do_DB：需要复制的数据库
				Binlog_Ignore_DB：不需要复制的数据库
			D. 执行完此步骤后不要再操作主服务器MySQL，防止主服务器状态值变化
		⑧ 在Linux从机上配置需要复制的主机，主机新建数据库、新建表、inset，从机复制
			A. 从机登录到主机: 
			CHANGE MASTER TO MASTER_HOST='192.168.0.102', MASTER_USER='root', MASTER_PASSWORD='2648', MASTER_LOG_FILE='mysqlbin.000003', MASTER_LOG_POS=107;
			B. 启动从服务器复制功能：start slave;
			C. 查询slaver放入状态：show slave status\G，以下两个参数都是yes，则说明主从配置成功
				a. Slave_IO_Running: Yes
				b. Slave_SQL_Running: Yes
			D. 如何停止主从复制功能 stop slave
			E. 当配置主从复制出错时，从新配置时需要注意:
				a. 由于从机已经开启了复制，需要停止复制
				b. 由于主机已经开始增删查改，二进制文件复制的位置发生了改变，需要重新查看master的状态


















			