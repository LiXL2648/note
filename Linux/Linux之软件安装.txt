一. 安装Docker的
	1. 步骤
		① 删除原有的Docker
			yum remove docker \
			docker-client \
			docker-client-latest \
			docker-common \
			docker-latest \
			docker-latest-logrotate \
			docker-logrotate \
			docker-engine
		② 安装Docker的依赖
			yum install -y yum-utils
		③ 指定Docker的安装地址
			yum-config-manager \
			--add-repo \
			https://download.docker.com/linux/centos/docker-ce.repo
		④ 安装Docekr的客户端和容器
			yum install docker-ce docker-ce-cli containerd.io
		⑤ 启动Docker
			systemctl start docker
		⑥ 设置Docker的开机自启动
			systemctl enable docker
	2. 使用阿里云的镜像加速器
		mkdir -p /etc/docker
		
		tee /etc/docker/daemon.json <<-'EOF'
		{
		  "registry-mirrors": ["https://y8blvi1l.mirror.aliyuncs.com"]
		}
		EOF
		
		systemctl daemon-reload
		systemctl restart docker
二. 使用Docker安装MySQL
	1. 下载MySQL镜像
		docker pull mysql:5.7.30
	2. 启动MySQL容器，并挂载目录
		docker run -p 3306:3306 --name mysql \
		-v /usr/local/mydata/mysql/log:/var/log/mysql \
		-v /usr/local/mydata/mysql/data:/var/lib/mysql \
		-v /usr/local/mydata/mysql/conf:/etc/mysql \
		-e MYSQL_ROOT_PASSWORD=2648 -d mysql:5.7.30
	3. 进入MySQL容器
		docker exec -it mysql /bin/bash
	4. 退出容器
		exit;
	5. 在/usr/local/mydata/mysql/conf/my.cnf中配置MySQL
		vim /usr/local/mydata/mysql/conf/my.cnf
	6. 在my.cnf中输入以下配置内容
		[client]
		default-character-set=utf8

		[mysql]
		default-character-set=utf8

		[mysqld]
		init_connect='SET collation_connection=utf8_unicode_ci'
		init_connect='SET NAMES utf8'
		character-set-server=utf8
		collation-server=utf8_unicode_ci
		skip-character-set-client-handshake
		skip-name-resolve
		default-time_zone='+8:00'
		
		sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
	7. 保存退出并重新启动MySQL容器
	8. 设置MySQL容器在docker重启时自启动：docker update mysql --restart=always
	9. MySQL在虚拟主机中得安装位置为：/etc/mysql， /usr/local/mysql， /usr/local/mysql/bin/mysql
三. docker安装redis
	1. 下载镜像
		docker pull redis
	2. 创建实例并启动
		mkdir -p /mydata/redis/conf
		touch /mydata/redis/conf/redis.conf

		docker run -p 6379:6379 --name redis \
		-v /usr/local/mydata/redis/data:/data \
		-v /usr/local/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \
		-d redis redis-server /etc/redis/redis.conf
	3. 使用redis-cli连接redis
		docker exec -it redis redis-cli
	4. 设置redis容器在docker重启时自启动
		docker update redis --restart=always
	5. 设置redis的持久化，在/usr/local/mydata/redis/conf/redis.conf中添加配置：appendonly yes（必须在启动容器后才能在配置文件中添加配置）
		
四. 异常解决
	1. 解决报错WARNING: IPv4 forwarding is disabled. Networking will not work.
		① 第一步：在宿主机上执行 echo "net.ipv4.ip_forward=1" >>/usr/lib/sysctl.d/00-system.conf
		② 第二步：重启network和docker服务 systemctl restart network && systemctl restart docker

五. 修改虚拟机网络
	1. 设置虚拟机网络适配器为桥接模式：右键虚拟机，选择设置，在硬件选项中选择网络适配器，将网络连接切换为桥接模式
	2. 使用命令nmtui打开网络配置，选择编辑连接，选择以太网ens33，选择编辑模式
	3. 编辑以太网的IPv4
		① 输入IP地址，该地址的网段需要和网关的网段保持一致，具体可以在本机中进行查看ipconfig /all
		② 输入网关和DNS
		③ 选择确认，返回，确定完成最终修改
	4. 先ping网关再ping本地，如果ping同证明配置成功
	5. 第二，三和第四可以在虚拟机的右上方的网络连接处修改
		① 点击网络连接，选择网络连接，选择有线设置
		② 在左边菜单栏选择网络，在右边面板选择设置按钮
		③ 选择IPv4，设置IP，网关和DNS
		④ 选择应用完成设置修改
	6. Windows下ping IP+端口的方法
		① 下载tcping.exe 然后把下载好的工具放到电脑的C盘>Windows>System32 下
		② tcping IP 端口
六. 源码编译安装Redis
	1. 下载Redis：
		① 官网下载：https://redis.io/download
		② 选择Download 6.0.6，右键选择复制地址
		③ 在虚拟机上下载redis: wget http://download.redis.io/releases/redis-6.0.6.tar.gz
	2. 安装Redis:
		① 解压下载的redis到指定的路径：tar -zxvf redis-6.0.6.tar.gz -C /usr/local/，解压得到后得到/usr/local/redis-6.0.6文件目录
		② 进入redis-6.0.6，执行make，运行make命令时可能出现的错误解析
		③ 安装gcc-c++：yum install gcc-c++ -y
		④ 二次make，可能报jemalloc/jemalloc.h异常，没有那个文件或目录，运行make distclean之后再make
		⑤ 三次make，报struct redisServer等错误，
			A. 原因是安装6版本的redis，gcc版本一定要5.3以上，centos6.6默认安装4.4.7；centos7.5.1804默认安装4.8.5，这里要升级gcc了。
			B. 查看gcc版本，命令：gcc -v，结果：gcc 版本 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC)
			C. 升级gcc版本, 命令：yum -y install centos-release-scl && yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils && scl enable devtoolset-9 bash
			D. 再次查看gcc版本，结果：gcc version 9.3.1 20200408 (Red Hat 9.3.1-2) (GCC)
		⑥ 四次make，结果Hint: It's a good idea to run 'make test' ;)，编译成功
		⑦ 编译成功之后，进入src目录，执行：make install PREFIX=/usr/local/redis，结果Hint: It's a good idea to run 'make test' ;)，安装成功
		⑧ 进入/usr/local/redis，该目录存在一个bin文件存放这可执行文件，在/usr/local/redis中新建一个conf目录用于存放redis的配置文件，并将/usr/local/redis-6.0.6中的redis.conf复制到
		/usr/local/redis/conf中
	3. 修改 redis.conf
七. IDEA的使用
	1. 快捷键的使用
		① 快速补全返回对象和返回类型：ctrl + alt + v
		② 代码大小写切换快捷键：ctr + shift + u
		③ 代码格式化：ctrl + alt + L
		④ 重写父类的方法：ctrl + o

八. 解决 ping 不通 github 的解决方法
	1. 点击打开这个网站：http://github.global.ssl.fastly.net.ipaddress.com/，查询IP，将查询到的IP复制到hosts文件里。
	   在C:\Windows\System32\drivers\etc\hosts中添加以下信息
		199.232.69.194 github.com，保存即可。
	2. 访问 https://site.ip138.com/github.com/
一、搭建JavaEE 环境
	1. 概述
		① 原理：在Windows系统下，如果想通过浏览器访问Linux系统下的服务器，必须构建JavaEE环境
		包括：JDK、Tomcat、MySQL、Eclipse等
		② 准备工作
			A. 下载JDK：jdk-8u211-linux-i586.tar.gz，官网为：http://www.oracle.com
			B. 下载Tomcat：apache-tomcat-9.0.20.tar.gz，官网为：http://tomcat.apache.org/
			C. 下载eclipse：eclipse-inst-linux64.tar.gz，官网为：https://www.eclipse.org/
			D. 下载MySQL：mysql-5.6.14.tar.gz
		③ 将软件安装包上传到/opt 下：使用Xftp6
	2. 安装JDK：
		① 解压JDK到 /opt/下：tar -zxvf jdk1.7.0_79.tar.gz
		② 配置环境变量的配置文件vim /etc/profile
			export JAVA_HOME=/opt/jdk1.7.0_79
			export JAVA_BIN=/opt/jdk1.7.0_79/bin
			export PATH=$PATH:$JAVA_HOME/bin
			export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
		③ 需要注销用户，环境变量才能生效。
		⑥ 至此在任何目录下都可以执行javac 和 java 命令
	3. 安装Tomcat：
		① 解压Tomcat 到/opt/ 下：tar -zxvf apache-tomcat-7.0.70.tar.gz 
		② 进入 bin/下开启服务： cd /opt/apache-tomcat-7.0.70/bin → ./startup.sh
		③ 测试在本地进入Tomcat主页：在本地浏览器输入：http://localhost:8080，一般可以成功
		④ 使用dos命令行：telnet CentOS的ip 8080，发现无法连接成功，进入CentOS6终端查看端口号
		netstat -anp | grep 8080，发现其端口号没有开放
		⑤ 开放端口8080 ,这样外网才能访问到tomcat，进入：vim /etc/sysconfig/iptables，复制一行
		并修改其端口号为8080，重启防火墙：service iptables restart，在使用dos命令行：telnet CentOS的ip 8080，连接成功。
		⑥ 使用Windows浏览器访问虚拟机地址：CentOSip:8080，一般也可以访问成功
		⑦ 配置Tomcat的环境变量（不知有什么用），进入：vim /etc/profile，输入
		export TOMCAT_HOME=/usr/local/tomcat
		export PATH=$PATH:$TOMCAT_HOME/bin
		保存退出，并重启
	4. 安装eclipse：
		① 解压eclipse到 /opt/ tar -zxvf eclipse-jee-mars-2-linux-gtk-x86_64.tar.gz
		② 进入 eclipse/ 目录，打开eclipse：./eclipse
	5. CentOS 6.8下编译安装MySQL 5.6.14：
		① 概述：通过源代码安装高版本的5.6.14。
		② 正文：
			A. 卸载旧版本：使用下面的命令检查是否安装有MySQL Server
			rpm -qa | grep mysql
				a. 目前我们查询到的是这样的：
					mysql-libs-5.1.73-7.el6.x86_64
				b. 如果查询到了，就删除它
					rpm -e mysql_libs   //普通删除模式
					rpm -e --nodeps mysql_libs    // 强力删除模式，如果使用上面命令删除时，
					提示有依赖的其它文件，则用该命令可以对其进行强力删除
			B. 安装MySQL：
				a. 安装编译代码需要的包
				yum -y install make gcc-c++ cmake bison-devel  ncurses-devel
				b. 下载MySQL 5.6.14
				c. 解压MySQL 5.6.14.tar.gz: tar xvf mysql-5.6.14.tar.gz
				d. 进入mysql-5.6.14/ 目录编译源码，如下(直接复制):
				cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DMYSQL_TCP_PORT=3306 -DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci
				e. 编译并安装: make && make install(&&：指的是先执行make再执行make install，也可以分开执行)
				f. 整个过程需要30分钟左右……漫长的等待
			C. 配置MySQL
				a. 设置权限
					(1) 使用下面的命令查看是否有mysql用户及用户组
						cat /etc/passwd 查看用户列表
						cat /etc/group  查看用户组列表
					(2) 如果没有就创建
						groupadd mysql
						useradd -g mysql mysql
					(3) 修改/opt/mysql-5.6.14权限: chown -R mysql:mysql /usr/local/mysql（安装版一般都是在/usr/local/目录下）
				b. 初始化配置，进入安装路径（cd /usr/local/mysql，在执行下面的指令），执行初始化配置脚本，创建系统自带的数据库和表
					(1) cd /usr/local/mysql
					(2) scripts/mysql_install_db --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --user=mysql
				c. 注意：
					(1) 在启动MySQL服务时，会按照一定次序搜索my.cnf，先在/etc目录下找，找不到则会搜索"$basedir/my.cnf"，
					在本例中就是 /usr/local/mysql/my.cnf，这是新版MySQL的配置文件的默认位置！
					(2) ：在CentOS 6.8版操作系统的最小安装完成后，在/etc目录下会存在一个my.cnf，需要将此文件更名为其他的名字，
					如：/etc/my.cnf.bak，否则，该文件会干扰源码安装的MySQL的正确配置，造成无法启动。
					(3) 修改名称，防止干扰(如果不存在该文件，则不需要修改)：mv /etc/my.cnf /etc/my.cnf.bak
				d. 启动MySQL
					(1) 添加服务，拷贝服务脚本到init.d目录，并设置开机启动(以下命令在/usr/local/mysql 下执行)
						cp support-files/mysql.server /etc/init.d/mysql
						chkconfig mysql on
						service mysql start(启动MySQL)
					(2)执行下面的命令修改root密码
						cd /usr/local/mysql/bin
						./mysql -u root -p
						 SET PASSWORD = PASSWORD('root');

				e. 至此MySQL安装步骤结束，MySQL可以正常使用
			D. 简单使用：
				a. 查看数据库：show databases
				b. 创建一个数据库：create database myemployees
				c. 退出mysql服务：quit
				!
				!
			E.  配置MySQL的环境变量		
				export PATH=$PATH:/usr/local/mysql/bin
			F.  使环境变量配置生效
				source /etc/profile
二、安装git
	1. yum安装
		① 在Linux上是有yum安装Git，只需要一行命令：yum -y install git
		② 输入 git --version查看Git是否安装完成以及查看其版本号，yum安装git被安装在/usr/libexec/git-core目录下
		③ 使用yum安装的Git版本低并且不能控制版本
	2. 从GitHub上下载最新的源码编译后安装
		① 下载Git源码
			wget https://github.com/git/git/archive/v2.27.0.tar.gz
		② 解压下载得到的v2.27.0.tar.gz压缩包
			tar -zxvf v2.27.0.tar.gz -C /usr/local/src/
		③ 进入解压后得到的文件夹
			cd /usr/local/src/git-2.27.0/
		④ 安装编译所需要的依赖：
			yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker -y
		⑤ 安装编译源码所需依赖的时候，yum自动帮你安装了git，这时候你需要先卸载这个旧版的git：
			yum -y remove git
		⑥ 编译git源码
			make prefix=/usr/local/git all
		⑦ 安装git至/usr/local/git路径
			make prefix=/usr/local/git install
		⑧ 配置环境变量，在底部加上
			vim /etc/profile 
			export PATH=$PATH:/usr/local/git/bin
		⑨ 刷新环境变量
			source /etc/profile
		⑩ 查看Git是否安装完成
			git --version
	3. 至此，从github上下载最新的源码编译后安装git完成。
三、安装docker-compose
	1 下载：docker-compose
		sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	2 将下载得到的docker-compose赋予执行权限
		sudo chmod +x /usr/local/bin/docker-compose
	3. 在/usr/bin/中创建docker-compos的快捷方式
		sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
	4 查看docker-compose版本信息
		docker-compose -v
四、CentOS7（Linux）源码安装 MySQL5.7.30
	1. 下载
		① MySQL官网下载链接：https://downloads.mysql.com/archives/community/
		② 选择自己合适的版本号，选择.tar.gz文件下载。
		③ 下载页
			A. Product Version: 5.7.30
			B. Operating System: Source Code
			C. OS Version: Generic Linux(Architecture Independent)
			D. 选择带Boost的版本，点击Download开始下载。
		④ 注：Mysql5.7版本更新后有很多变化，连编译安装都有变化，而MySQL5.7的安装必须要boost库，不过MySQL的官网源码有带boost库的源码和不带boost库的源码两种，
		因此有两种安装方式，其实都是一样的，如果选择不带boost库源码的需要在安装MySQL之前单独安装boost，并在编译时指定boost的安装目录，选择带boost的版本，
		则不需要提前安装boost，只需要在cmake编译时带上参数-DWITH_BOOST=boost即可。
	2. yum报错[Errno 256] No more mirrors to try
		① 清理客户端yum源配置的缓存
			yum clean all
		② 将Linux服务器的包信息下载到本地电脑缓存起来，makecache来建立一个缓存，后边yum安装在缓存中搜索，提高了速度
			yum makecache
	3. 安装环境		
		① 安装 libaio， libaio 包的作用是为了支持同步I/O，对于数据库之类的系统特别重要。
			yum install -y libaio
		② 安装 cmake，CMake是一个跨平台的安装（编译）工具。
			yum install -y cmake
		③ 安装依赖
			yum install -y gcc-c++ bison-devel  ncurses-devel  bison perl perl-devel  perl perl-devel
		④ 安装mysql5.7.30遇到的问题
			A. Could NOT find Git (missing: GIT_EXECUTABLE)
				yum -y install git
			B. Cannot find appropriate system libraries for WITH_SSL=system.
				yum -y install openssl openssl-devel
			C. cmake编译会有缓存，每次编译前要清下缓存
				rm CMakeCache.txt
	4. 安装
		① 创建一个资源目录把 MySQL 安装包 上传到这个目录下
			mkdir /usr/local/resource
		② 解压安装包
			A. 进入MySQL安装包存在的路径
				cd /opt
			B. 将MySQL安装包解压到资源目录中
				tar -zxvf mysql-boost5.7.30.tar.gz -C /usr/local/resource
		③ 添加mysql组及用户
			A. 添加组
				groupadd mysql
			B. 添加用户
				useradd -r -g mysql mysql
			C. 查看用户组列表
				cat /etc/group  
			D. 查看用户列表
				cat /etc/passwd 
		④ 新建MySQL的安装目录
			mkdir /usr/local/mysql
		⑤ 新建MySQL的数据存储目录
			mkdir /usr/local/mysql/data
	5. 编译安装
		A. 进入解压的目录
			cd /usr/local/resource/mysql-5.7.30
		B. cmake编译
			cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DWITH_BOOST=boost -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DMYSQL_TCP_PORT=3306 -DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci
		C. make编译，此处时间比较长，约半小时
			make
		D. make安装
			make install
		E. 设置权限
			chown -R root /usr/local/mysql
			chown -R mysql:mysql /usr/local/mysql
			chown -R mysql /usr/local/mysql/data
		F. 初始化MySQL
			cd /usr/local/mysql/bin
			./mysqld --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data/ --initialize
		G. 复制mysql服务启动脚本
			cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld
		H. 启动MySQL服务
			service mysqld start
		I. 登录
			cd /usr/local/mysql/bin
			./mysql -u root -p
			输入刚刚的密码
		J. 修改MySQL用户root的密码
			 set password for root@localhost = password('0730')
	6. 启动MySQL服务出现的问题及解决方案
		① mysqld_safe error: log-error set to '/var/log/mariadb/mariadb.log', however file don't exists. Create writable for user 'mysql'.
			A. 原因：因为没有路径也没有权限
			B. 创建此路径并授权给mysql用户
				mkdir /var/log/mariadb
				touch /var/log/mariadb/mariadb.log
				chown -R mysql:mysql /var/log/mariadb/
		② mysqld_safe Directory '/var/lib/mysql' for UNIX socket file don't exists.
			A. “var/lib/mysql”目录不存在，首要先创建
				mkdir /var/lib/mysql
			B. 给目录 /var/lib/mysql 付予写入权限或者最大权限
				chmod 777  /var/lib/mysql
		③ The server quit without updating PID file (/var/lib/mysql/localhost.localdomain.pid).
			A. 修改/etc/my.cnf，将[mysqld]节点下的databir修改为/usr/local/mysql/data
				vim /etc/my.cnf
			B. 创建/var/lib/mysql/localhost.localdomain.pid，并赋予权限
				touch /var/lib/mysql/localhost.localdomain.pid
				chown -R mysql:mysql /var/lib/mysql/localhost.localdomain.pid
			C. 初始化权限表
				a. cd /usr/local/mysql
				b. chown -R mysql.mysql .
				c. su - mysql
				d. cd /usr/local/mysql/bin
				e. ./mysql_install_db
					(1) 出现mysql_install_db is deprecated. Please consider switching to mysqld --initialize错误
						a. 初始化mysql
							./mysqld --initialize --datadir=/usr/local/mysql/data --user=mysql --basedir=/usr/local/mysql
						b. 出现--initialize specified but the data directory has files in it. Aborting.错误，删除data目录重新初始化
							rm -rf data
					(2) 切换到root 用户
						su root
		④ 重新初始化后重新启动MySQL，启动成功
			service mysqld start
	7. 设置MySQL开机自启
		① centos7与centos6相比有什么不同：在centos7中服务不在是用service这个命令来启动与停止，也不再用chkconfig来设置开机启动与否！
		在centos7中所有对服务的管理都集中到了systemctl当中；systemctl不再是合之前一样依赖/etc/init.d/下的脚本，它是通过配置文件来完成对服务的管理的；
		② 创建systemctl管理mysql的配置文件：systemctl对配置文件的后缀名有所要求、这个文件的后缀名要是以.service结尾的；当然由于它默认可以省略后缀，
		所以你也可以不指定后缀名。
			touch /usr/lib/systemd/system/mysql.service
		③ 配置文件样例：
			[Unit]
			Description=MySQL Server
			Documentation=man:mysqld(8)
			Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html
			After=network.target
			After=syslog.target

			[Install]
			WantedBy=multi-user.target

			[Service]
			User=mysql
			Group=mysql
			ExecStart=/usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf
			LimitNOFILE = 5000
			#Restart=on-failure
			#RestartPreventExitStatus=1
			#PrivateTmp=false
		④ 通过systemctl来启动mysql：
			systemctl start mysql
		⑤ 通过systemctl 来设置mysql开机启动：
			systemctl enable mysql
	8. 配置MySQL的环境变量
		① 修改 /etc/profile文件
			vim /etc/profile
		② 在/etc/profile文件新增以下配置
			export MYSQL_HOME=/usr/local/mysql
			export PATH=$PATH:$MYSQL_HOME/bin
		③ 保存退出后重载/etc/profile文件
			source /etc/profile
	9. 授权用户，为所有用户开放root权限
		grant all on *.* to 'root'@'%' identified by '0730';
五、源码编译安装Redis
	1. 下载Redis：
		① 官网下载：https://redis.io/download
		② 选择Download 6.0.6，右键选择复制地址
		③ 在虚拟机上下载redis: wget http://download.redis.io/releases/redis-6.0.6.tar.gz
	2. 安装Redis:
		① 解压下载的redis到指定的路径：tar -zxvf redis-6.0.6.tar.gz -C /usr/local/，解压得到后得到/usr/local/redis-6.0.6文件目录
		② 进入redis-6.0.6，执行make，运行make命令时可能出现的错误解析
		③ 安装gcc-c++：yum install gcc-c++ -y
		④ 二次make，可能报jemalloc/jemalloc.h异常，没有那个文件或目录，运行make distclean之后再make
		⑤ 三次make，报struct redisServer等错误，
			A. 原因是安装6版本的redis，gcc版本一定要5.3以上，centos6.6默认安装4.4.7；centos7.5.1804默认安装4.8.5，这里要升级gcc了。
			B. 查看gcc版本，命令：gcc -v，结果：gcc 版本 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC)
			C. 升级gcc版本, 命令：yum -y install centos-release-scl && yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils && scl enable devtoolset-9 bash
			D. 再次查看gcc版本，结果：gcc version 9.3.1 20200408 (Red Hat 9.3.1-2) (GCC)
		⑥ 四次make，结果Hint: It's a good idea to run 'make test' ;)，编译成功
		⑦ 编译成功之后，进入src目录，执行：make install PREFIX=/usr/local/redis，结果Hint: It's a good idea to run 'make test' ;)，安装成功
		⑧ 进入/usr/local/redis，该目录存在一个bin文件存放这可执行文件，在/usr/local/redis中新建一个conf目录用于存放redis的配置文件，并将/usr/local/redis-6.0.6中的redis.conf复制到
		/usr/local/redis/conf中，并备份一份
			mkdir conf
			cp /usr/local/redis-6.0.6/redis.conf /usr/local/redis/conf
			cp redis.conf redis_bk.conf
	3. 修改 redis.conf
		① 将配置项 daemonize no 修改为 yes，让服务在后台启动
		② 将配置项 appendonly no 修改为 yes，实现数据的持久化
		③ 注释bind 127.0.0.1,解除本机绑定(否则不能远程连接)
		④ protected-mode yes 修改为 protected-mode no
	4. 启动redis 服务
		① 以后台的方式启动redis
			./redis-server /usr/local/redis/conf/redis.conf
		② 启动客户端
			./redis-cli -p 6379
		③ 单实例关闭redis服务
			./redis-cli shutdown
		④ 多实例关闭，指定端口关闭
			./redis-cli -p 6379 shutdown
	5. 配置Redis的环境变量
		① 编辑 /etc/profile文件
			vim /etc/profile
		② 在/etc/profile文件新增以下配置
			export REDIS_HOME=/usr/local/redis
			export PATH=$PATH:$REDIS_HOME/bin
		③ 保存退出后重载/etc/profile文件
			source /etc/profile
	6. 设置redis开机自启（失败）
		① 新建redis.service服务文件
			touch  /etc/systemd/system/redis.service
			vim /etc/systemd/system/redis.service
		② 修改redis.service文件内容
			[Unit]
			Description=redis-server  
			After=network.target

			[Service]
			Type=simple
			PIDFile=/var/run/redis.pid
			ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/conf/redis.conf
			ExecReload=/bin/kill -USR2 $MAINPID
			ExecStop=/lib/kill -SIGINT $MAINPID

			[Install]
			WantedBy=multi-user.target
		③ 创建软连接
			ln -s /usr/lib/systemd/system/redis.service /etc/systemd/system/multi-user.target.wants/redis.service
		④ 刷新systemctl
			systemctl daemon-reload
		⑤ 设置开机自启动
			systemctl enable redis
			systemctl disable redis
		⑥ 启动redis
			systemctl start redis
			systemctl stop redis
	7. 设置开机自启
		① 复制启动文件
			cp /usr/local/redis-6.0.6/utils/redis_init_script /etc/init.d/redisd
		② 编辑启动脚本
			A. 打开脚本
				vim /etc/init.d/redisd
			B. 添加
				# chkconfig: 2345 10 90
				# description: Start and Stop redisd
			C. 修改
				EXEC=/usr/local/redis/bin/redis-server
				CLIEXEC=/usr/local/redis/bin/redis-cli
				PIDFILE=/var/run/redis_${REDISPORT}.pid
				CONF="/usr/local/redis/conf/redis.conf"
		③ 分配权限
			chmod +x /etc/init.d/redisd
		④ 增加系统服务
			chkconfig --add redisd
			chkconfig --list redisd
		⑤ 启动/关闭服务
			service redisd start
			service redisd stop
六、Windows设置Nginx开机自启
	1. 下载windows版nginx （http://nginx.org/download/nginx-1.10.0.zip）
	2. 将Nginx设置为Windows服务
		① 需要借助"Windows Service Wrapper"小工具
		② 下载地址： http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/1.18/winsw-1.18-bin.exe
		③ 下载该工具后，将其放在 Nginx安装目录下，并重命名为nginx-service.exe，创建配置文件nginx-service.xml（名字要和工具名一样）	
			<?xml version="1.0" encoding="UTF-8" ?>
			<service>
			 <id>Nginx</id>
			 <name>Nginx</name>
			 <description>本服务用于加载Nginx服务，请确保开机启动。</description>
			 <logpath>D:\OpenSource\nginx\nginx-1.18.0\logs</logpath>
			 <executable>nginx.exe</executable>
			 <stopexecutable>nginx.exe</stopexecutable>
			 <stopargument>-s</stopargument> 
			 <stopargument>stop</stopargument>
			 <logmode>rotate</logmode>
			</service>
		④ 创建nginx-service.exe.config（为支持NET 4.0 runtime，默认只支持NET 2.0 runtime）
			<configuration>  
				<startup>    
					<supportedRuntime version="v2.0.50727" />    
					<supportedRuntime version="v4.0" />  
				</startup>  
				<runtime>    
					<generatePublisherEvidence enabled="false"/>   
				</runtime>
			</configuration>
		⑤ 在cmd中运行如下命令安装windows服务
			nginx-service.exe install
七. 搭建Gitlab 服务器
	1. 下载并安装Gitlab：https://mirrors.tuna.tsinghua.edu.cn/
		① 开启拍摄拍照
		② 将下载完成的gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm复制到 /opt中，该gitlab服务器为社区版
		③ 在 /opt 中创建可执行文件install.sh: vim install.sh
		④ 将以下复制到可执行文件中
			sudo rpm -ivh /opt/gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm
			sudo yum install -y curl policycoreutils-python openssh-server cronie
			sudo lokkit -s http -s ssh
			sudo yum install postfix
			sudo service postfix start
			sudo chkconfig postfix on
			curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash
			sudo EXTERNAL_URL="http://gitlab.example.com" yum -y install gitlab-ce
		⑤ 修改可执行文件install.sh的权限：chmod 755 install.sh 
		⑥ 执行install.sh可执行文: ./install.sh
		⑦ 等待服务器的安装，安装成功后重启虚拟机：reboot
		⑧ 初始化配置gitlib: gitlab-ctl reconfigure
		⑨ 修改Gitlib的默认默认端口号以及开放防火墙
			A. 首先需要先备份/etc/gitlab/gitlab.rb与/var/opt/gitlab/nginx/conf/gitlab-http.conf 至 /myconfig
				mkdir -p /usr/local/gitlib/myconfig/
				cp /etc/gitlab/gitlab.rb /usr/local/gitlib/myconfig/
				cp /var/opt/gitlab/nginx/conf/gitlab-http.conf /usr/local/gitlib/myconfig/
			A. gitlab 默认的端口号是80 ，通常会被其他服务占用，所以要更改端口号，防止冲突
			B. 修改gitlib的配置文件：vim /etc/gitlab/gitlab.rb
			C. 添加以下内容，注意 external_url 可能会有默认配置，修改即可。本人的（localhost = 192.168.107.26，端口号为48）
				external_url 'http://localhost:端口号'
				nginx['listen_port'] = 端口号
				nginx['listen_https'] = false
			D. 修改nginx 端口号：vim /var/opt/gitlab/nginx/conf/gitlab-http.conf
			E. 按照以下配置，修改端口号，该服务已经存在gitlab-http.conf文件中，只需要修改配置项即可
				server {

					listen *:端口号;
					if ($http_host = "") {
					   set $http_host_with_default "localhost:端口号";
					}
				}
			F. 重新启动：sudo gitlab-ctl restart
			G. 开放端口号：
				a. 执行查看zones firewall-cmd --get-active-zones 
				firewall-cmd --permanent --zone=public --list-ports指令
				b. 执行开放端口号 firewall-cmd --zone=public --add-port=端口号/tcp --permanent 指令
				c. 执行重启防火墙 firewall-cmd --reload 指令
				d. 执行查看端口号是否开启 firewall-cmd --query-port=端口号/tcp 指令
	2. 登录gitlab服务器：
		① 输入ip地址:防火墙：192.168.107.26:48
		② 为gitlab设置登录密码
		③ 本人gitlab账号密码为：root/i1633491328
		④ gitlab的使用与GitHub大同小异。 
	3. gitlab开启和关闭的问题
		① 重新启动gitlab服务: sudo gitlab-ctl restart
		② 启动gitlab服务：sudo gitlab-ctl start
		③ 停止gitlab服务：sudo gitlab-ctl stop
		④ 禁止gitlab开机自启动：sudo systemctl disable gitlab-runsvdir.service
		⑤ 开启gitlab开机自启动：sudo systemctl enable gitlab-runsvdir.service
		⑥ 查看gitlab的状态：sudo gitlab-ctl status
八、离线安装MySQL 5.7
	1. 下载地址：https://downloads.mysql.com/archives/community/
	2. 安装
		① 创建用户
			A. 添加mysql用户组：groupadd mysql
			B. 添加mysql用户：useradd -g mysql mysql -d /home/mysql
			C. 修改mysql用户的登陆密码：passwd mysql
		② 解压缩 mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz到/usr/local/，并改名为mysql
			tar -zxvf mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz
			mv mysql-5.7.30-linux-glibc2.5-x86_64 mysql
		③ 并赋予用户读写权限
			chown -R mysql:mysql mysql/
	3. 创建配置文件
		① vim /etc/my.cnf
			[client]
			port = 3306
			socket = /tmp/mysql.sock

			[mysqld]
			character_set_server=utf8
			init_connect='SET NAMES utf8'
			basedir=/usr/local/mysql
			datadir=/usr/local/mysql/data
			socket=/tmp/mysql.sock
			log-error=/var/log/mysqld.log
			pid-file=/var/run/mysqld/mysqld.pid
			#不区分大小写
			lower_case_table_names = 1

			sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION

			max_connections=5000

			default-time_zone = '+8:00'
	4. 初始化文件
		① 初始化log文件，防止没有权限。
			cd /var/log/
			vim mysqld.log
			：wq

			chmod 777 mysqld.log
			chown mysql:mysql mysqld.log
		② 初始化pid文件，防止没有权限
			#手动编辑一下日志文件，什么也不用写，直接保存退出
			cd /var/run/
			mkdir mysqld
			cd mysqld
			vi mysqld.pid
			：wq
			# 给权限
			cd ..
			chmod 777 mysqld
			chown -R mysql:mysql /mysqld
		③ 初始化数据库
			# 初始化数据库，并指定启动mysql的用户，否则就会在启动MySQL时出现权限不足的问题
			/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --lc_messages_dir=/usr/local/mysql/share --lc_messages=en_US
			初始化完成后，在my.cnf中配置的datadir目录（/var/log/mysqld.log）下生成一个error.log文件，里面记录了root用户的随机密码。
			cat /var/log/mysqld.log
			执行后记录最后一点：root@localhost: xxxxx 。 这里的xxxxx就是初始密码。
	5. 启动数据库
		① 源目录启动：/usr/local/mysql/support-files/mysql.server start
		② 并设置开机自启动服务：
			# 复制启动脚本到资源目录
			cp /usr/local/mysql/support-files/mysql.server /etc/rc.d/init.d/mysqld

			# 增加mysqld服务控制脚本执行权限
			chmod +x /etc/rc.d/init.d/mysqld

			# 将mysqld服务加入到系统服务
			chkconfig --add mysqld

			# 检查mysqld服务是否已经生效
			chkconfig --list mysqld

			# 切换至mysql用户，启动mysql，或者稍后下一步再启动。
			service mysqld start 
		③ 从此就可以使用service mysqld命令启动/停止服务：service mysqld start/stop/restart
	6. 配置环境变量
		为了更好的操作mysql，配置环境变量。
		# 切换至mysql用户
		su mysql

		vi .bash_profile
		# 修改配置文件，增加export PATH=$PATH:/usr/local/mysql/bin

		# 立即生效
		source .bash_profile
	7. 登陆，修改密码
		必须修改初始的随机密码：
		# 系统默认会查找/usr/bin下的命令;建立一个链接文件。
		ln -s /usr/local/mysql/bin/mysql /usr/bin

		# 登陆mysql的root用户
		mysql -uroot -p
		# 输入2.4生成的 随机密码

		# 修改root用户密码为123456
		set password for root@localhost=password("123456");
九、离线升级gcc g++
	1. 下载地址：https://ftp.gnu.org/gnu/gcc/
	2. 下载gcc依赖包
		① 用压缩工具打开下载好的 gcc-9.10.tar.gz ，进入 contrib 目录查看 download_prerequisites文件
		② 找到所需要下载的依赖配置
			A. gmp='gmp-6.1.0.tar.bz2'
			B. mpfr='mpfr-3.1.4.tar.bz2'
			C. mpc='mpc-1.0.3.tar.gz'
			D. isl='isl-0.18.tar.bz2'
		③ 下载依赖：
			A. gmp：https://ftp.gnu.org/pub/gnu/gmp/gmp-6.1.0.tar.bz2
			B. mpfr：http://mirror.hust.edu.cn/gnu/mpfr/mpfr-3.1.4.tar.bz2
			C. mpc：https://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz
			D. isl：http://www.mirrorservice.org/sites/sourceware.org/pub/gcc/infrastructure/isl-0.18.tar.bz2
	3. 升级gcc
		① 上传 gcc-9.10.tar.gz 到服务器，解压 gcc-9.10.tar.gz 到 /usr/local 目录下
			tar -zvxf gcc-9.10.tar.gz --directory=/usr/local/
		② 进入 gcc-9.10 安装目录
			cd gcc-9.10
		③ 上传依赖包到 /usr/local/gcc-9.10 目录下，并解压
			A. tar -xf gmp-6.1.0.tar.bz2
			B. tar -xf mpfr-3.1.4.tar.bz2
			C. tar -xf mpc-1.0.3.tar.gz
			D. tar -xf isl-0.18.tar.bz2
		④ 建立软链接 
			ln -sf gmp-6.1.0 gmp
			ln -sf mpfr-3.1.4 mpfr 
			ln -sf mpc-1.0.3 mpc
			ln -sf isl-0.18 isl
		⑤ 升级
			# 创建build目录
			mkdir build && cd build

			# 配置
			../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib

			# 执行安装（大约两小时）
			make && make install
	4. 解决升级后还是原先版本的问题
		① 升级后使用 gcc -v 查看版本，发现仍然是原先版本
		② 使用 find / -name gcc 全局搜 gcc
			A. /usr/local/lib/gcc：对应新版本gcc
			B. /usr/bin/gcc：对应旧版本gcc
		③ 解决方法
			mv /usr/bin/gcc /usr/bin/gcc4.8
			ln -s /usr/local/bin/gcc /usr/bin/gcc
十、MinIO的安装与基础用法
	1. MInIO在linux服务器上安装
		① 下载及准备工作
			A. 下载地址：https://min.io/download#/linux
				cd /root/minio  //自定义一个minio软件操作目录
				wget https://dl.min.io/server/minio/release/linux-amd64/minio
				chmod +x minio
			B. 创建minio文件存储目录及日志目录
				mkdir -p /root/data/minio;
				mkdir -p /root/logs/minio;
		② 启动MinIO，将下面的内容保存为/root/minio/run.sh,与minio下载文件放在同一个目录下面。并为其赋予执行权限chmod u+x run.sh
			#!/bin/bash
			export MINIO_ACCESS_KEY=fight
			export MINIO_SECRET_KEY=fight2021
			# nohup启动服务 指定文件存放路径 /root/data 还有设置日志文件路径 /root/minio/log
			nohup ./minio server /root/data/minio > /root/logs/minio/minio.log 2>&1 &
		③ 访问 http://192.168.161.3:9000/ 进行登录。
	2. 设置minio开机自启
		① 设置minio开机自启
			vi /etc/rc.local
		② 添加自启脚本位置
			/root/minio/run.sh
	3. MinIO系统的基本用法
		① 创建 bucket
			A. 登录之后在浏览器上面，点击右下角“红色的加号”创建 bucket 来存储对象。我们要了解什么是bucket，说白了就是上传的对象文件的分类
			B. 你可以按这个图片或者其他资源文件属于哪个系统创建一个bucket，比如说我创建一个boot-launch的bucket给boot-launch应用使用
			C. 你也可以按照资源的类型去创建bucket，比如：image，video，audio分别放在不同的bucket中存放
		② 上传资源，bucket 创建好之后，我们就可以向这个bucket里面上传资源文件对象了
		③ 资源分享，MinIO 默认的策略是分享地址的有效时间最多是7天，点击Copy link可以获得资源的访问链接
		④ 永久资源分享
			A. MinIO 默认的策略是分享地址的有效时间最多是7天，要突破这种限制，可以在 bucket 中进行策略设置。
			B. 点击对应的 bucket ，edit policy添加策略*.*，Read Only
			C. 如此就放开了访问，并且没有时间限制，同时只需要按http://${MINIO_HOST}:${MINIO_PORT}/${bucketName}/${fileName}的格式可直接访问资源（不需要进行分享操作）。
	4. 在 html 文件中引用静态资源
		① 通过上面的设置与运行，MinIO 作为静态资源服务器已经完成，可以写个 html 来引用 MinIO 中的静态资源
		② 格式：<img src="http://${MINIO_HOST}:${MINIO_PORT}/image/test.jpg" alt="图片">
		③ 实例：<img src="http://192.168.161.3:9000/boot-launch/java9-streamapi.png" alt="图片">
十一、部署SpringBoot项目时，在后台持续运行
	1. 使用nohup命令，让SpringBoot项目不挂断地在Linux后台运行
		① 语法：nohup Command [ Arg … ][ & ]
		② 示例：nohup java -jar xxx.jar &
		③ 执行上述命令，nohup会把执行结果中的日志默认输出到当前文件夹下面的nohup.out文件中。
		④ 可以手动指定日志输出到哪个文件中：nohup java -jar xxx.jar > nohup.log  2>&1 & 
	2. 具体示例
		① 创建目录/usr/local/fight-manage-system，将SpringBoot的jar包上传到该目录
		② 在 /usr/local/fight-manage-system 目录中创建 startup.sh 文件，并输入以下内容，并保存退出
			vi startup.sh
			
			#! /bin/bash
			nohup java -jar /usr/local/fight-manage-system/fight-manage-system-1.0-SNAPSHOT.jar --spring.profiles.active=prod
			> /usr/local/fighr-manage-system/log/fighr-manage-system.log 2>&1 &
			
			:wq!
		③ 将startup.sh设为可执行文件：chmod +x startup.sh
		④ 启动后在/usr/local/fight-manage-system目录中新增log文件夹，并生成日志文件fighr-manage-system.log
	3. 关闭 SpringBoot项目后台程序
		ps -ef | grep java
		kill -9 PID






