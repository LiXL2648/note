一、盒子模型的简介：
	1. CSS处理网页时，它认为每个元素都包含在一个不可见的盒子里。
	2. 为什么要想象成盒子呢？因为如果把所有的元素都想象成盒子，那么我们对网页的布局就相当于摆放盒子
	3. 我们只需要将相应的盒子摆放在网页中相应的位置即可完成网页的布局
	4. 一个盒子会分为以下几个部分：
		①内容区（content）
		②内边距（padding）
		③边框（border）
		④外边距（margin）
二、边框：
	1. 使用width和height来设置盒子内容区的宽度和高度，而不是设置整个盒子的大小
	2. 为元素设置边框，必须指定三个样式，缺一不可：
		①border-width：边框的宽度
		②border-color：边框的颜色
		③border-style：边框的样式
	3. 盒子的大小由内容区+内边距+边框决定、
	4. 使用border-width可以分别指定四个边框的值
		①举例：border-width：10px 20px 30px 40px
		②如果在border-width指定四个值时，则四个值会按照上/右/下/左的顺序设置
		③如果在border-width使用三个值时，则三个值会按照上/左右/下的顺序设置
		④如果在border-width使用两个值时，则两个个值会按照上下/左右的顺序设置
		⑤如果在border-width使用一个值时，则四个边框的宽度都采用该像素值设置
	5. 除了border-width，CSS中还提供了四个边框，专门用来设置指定的边框
		①border-left-width
		②border-right-width
		③border-top-width
		④border-bottom-width
	6. 设置边框的颜色，使用的方式与设置边框的宽度完全一致
	7. 边框的可选值
		①none：默认值，没有边框
		②solid：实线
		③dotted：点状边框
		④dashed：虚线
		⑤double：双实线
		注：边框设置与宽度和颜色完全一致
	8. 大部分浏览器中，边框的宽度与颜色都有默认值，而边框的样式默认为none
	9. border：边框的简写样式，通过它可以同时设置四个边框的样式，颜色和宽度
		①举例：border:1px red solid
		②border的三个样式没有顺序的要求
		③border一指定就是同时指定四个边框不能分别指定
		④CSS提供了四个样式可以对四个边框进行分别设置
			A.border-left
			B.border-right
			C.border-top
			D.border-bottom
三、内边距（padding）：盒子边框与内容区的边距
	1. 内边距一共有四个方向的内边距，分别为
		①padding-top
		②padding-bottom
		③padding-left
		④padding-right
	2. 盒子的大小由盒子的内容区、内边距和边框共同决定
	3. padding：内边距简写，该方式与border-width完全一致
四、外边距（margin）：当前盒子与其他盒子之间的距离，可以调整元素的位置
	1. 外边距不会影响到盒子的大小，但是会影响到盒子的位置，通过改变外边距可以调整盒子的位置
	2. 盒子有四个方向的外边距，分别是
		①margin-top
		②margin-bottom
		③margin-left
		④margin-right
		注：由于盒子都是靠左靠上摆放的，所以当设置上边距或者左边距，会导致盒子自身的位置发生改变
			而如果右边距或下右边距，由于右边距和下边距远大于自身设置的右边距和下边距，因此盒子不会发生移动，只会导致其他盒子位置的变化
	3. 外边距可以指定为正值和负值
		①当设置为正值时，则元素向右移动
		②当设置为负值时，则元素向左移动
	4. 外边距还可以设置为auto（自动），auto一般只会设置给水平方向 
		①如果只指定左外边距或者右外边距为auto时，则会将左边距或者右边距设置为最大
		②如果设置垂直方向外边距为auto时，则默认上下外边距为0.
		③当同时将左右外边距设置为auto，则会将两侧的外边距设置为相同，所以可以使得元素在父元素中居中
		④一般左右外边距都设置为auto，以使得子元素在父元素中水平居中
	5. margin：外边距简写，可以同时设置四个方向的外边距，与padding完全一致
	6. margin 0 auto：设置元素水平居中显示
	7. 垂直外边距的重叠
		在网页中垂直方向的相邻外边距会发生外边距的重叠
			①所谓的外边距重叠值兄弟元素之间的相邻外边距会取最大值而不是取和
			②如果父子元素的垂直外边距相邻了，则子元素的外边距会设置给父元素
			③如果想实行子元素下移，有以下两种方法：
				A.取消父子元素相邻状态
					给父元素添加一个上外边框
					给父元素添加一个上内边距
					注：以上两种方法都会使得盒子的大小发生变化，需要通过改变其他决定因素的宽度，保证盒子的大小不会发生变化
					在子元素的上方添加一个元素，会使得子元素与父元素的外边距超过设置的像素，原因子元素相对于新添加的元素的外边距再加上新添加元素的盒子宽度
				B.取消设置垂直外边距的方式
					给父元素添加一个垂直内边距
					注，该方法同样会改变盒子的大小，需要改变其他决定因素，使得盒子的大小保持原样
四、浏览器默认样式		
	1. 浏览器为了让页面没有样式时，也可以提供一个比较好的显示效果，所以为很多元素都设置了一些默认的margin和padding
	2. 而它的这些默认样式，正常情况下我们是不需要使用的，所以我们往往在编写样式之前需要把浏览器中的默认margin和padding去掉
	3. 使用通配选择器清除默认样式
	 举例：*{margin:0；padding:0;}
五、内联元素的盒模型（内容区/内边距/外边距/边框）
	1. 内联元素不能设置内容区的width和height
	2. 内联元素可以设置水平方向的内边距，会影响到布局，也可以设置垂直方向上的内边距，但是不会影响布局
	3. 内联元素可以设置边框，但是垂直方向上的边框不会影响到布局
	4. 内联元素可以设置水平方向上的外边距，水平方向上的外边距不会重叠，外边距会进行求和，内联元素不能支持垂直方向上的外边距
六、display和visibility	
	1. display：可以修改元素的类型
		①inline：可以将一个元素设置为行内元素
		②block：可以将一个元素设置为块元素
		③inline-block：可以将一个元素设置为行内块元素，既可以将一个元素设置既有内联元素的特点，又有块元素的特点
		④none：不显示元素，并且元素不会在页面中占有位置
	2. visibility：规定元素是否可见
		①visible：默认值，元素会默认在页面中显示
		②hidden：元素不会在页面中显示，但是仍会占有原有的位置
七、overflow：
	1. 理论上子元素默认是存在于父元素的内容区中，理论上讲子元素的最大可以等于父元素内容区大小
	2. 如果子元素的大小超过了父元素的内容区大小，则超出的大小会在父元素以外的位置显示，超出父元素的内容则称为溢出的内容
	3. 父元素默认是将溢出的内容，在父元素外边显示
	4. 通过设置父元素的样式属性为overflow，可以对溢出的内容进行处理
		①visible：默认值，不会对超出的内容进行处理，元素溢出的内容会在父元素以外显示
		②hidden：对超出内容进行隐藏，不会被显示
		③scroll：会为父元素添加滚动条，通过拖动滚动条来查看完整的内容，该属性无论内容是否会溢出，都会添加垂直和水平方向的滚动条
		④auto：会根据需求自动添加滚动条。
八、文档流
	1. 文档：一个页面都是一个文档
	2. 文档流：就是处在网页中的最底层，它表示的是一个页面中的位置，我们创建的元素默认都处在文档流里
	3. 元素在文档流中的特点；
		①块元素
			A. 块元素在文档流中会独占一行，元素自上向下排列
			B. 块元素在文档流中默认宽度的百分之百，宽度值是auto
			注：当元素的宽度和高度为auto时，设置内边距时不会改变盒子的可见框大小，而是会自动修改宽度，以适应内边距
			C. 块元素在文档流中的高度会默认被内容撑开
		②内联元素
			A. 内联元素在文档流中只占自身的大小，会默认从左到右排列，如果一行无法容纳所有的元素，则会换到下一行。
			B. 内联元素在文档流中宽度和高度都会默认被内容撑开
	4. 元素在文档流中的特点前提是必须在文档流中，且值为默认值。	
九、浮动
	1. 块元素在文档流中默认是垂直排列，所以所有块元素会自上而下排列
	2. 如果希望块元素在页面中水平排列，可以使块元素脱离文档流
	3. 使用float块元素浮动，从而脱离文档流
		①none：默认值，元素默认在文档流中排列
		②left：元素会立即脱离文档流，向页面左侧浮动
		③right：元素会立即脱离文档流，向页面右侧浮动
	4. 当为一个元素设置浮动以后（float属性是一个非none的值）
		①元素会立即脱离文档流，元素脱离文档流以后，它下边的元素会立即向上移动
		②元素浮动以后，会尽量向页面的左上或者右上浮动，直到遇到父元素的边框或者其他的元素
		③如果浮动元素的上边是一个非浮动的块元素，则浮动元素不会超过非浮动块元素
		④浮动元素不会超过它的上兄弟元素，最多一边对其 
		⑤浮动的元素不会盖住文字，文字会自动环绕在浮动的周围，所以可以通过浮动来设置文字环绕图片的效果
		⑥在文档流中，子元素的宽度默认占父元素的全部，当元素脱离文档流后，子元素默认宽度和高度为0，并且高度和宽度会被内容撑开
		⑦当内联元素脱离文档流以后会变成块元素
十、高度塌陷问题
	1. 在文档流中，父元素的高度是默认被子元素撑开的，也就是说子元素多高，父元素就有多高
	2. 但是当为子元素设置浮动以后，子元素会完全脱离文档流，此时将会导致子元素无法撑开父元素，导致父元素的高度塌陷
	3. 由于父元素的高度塌陷了，则父元素下的所以元素都会向上移动，这样会导致页面布局混乱
	4. 解决高度塌陷的问题
		①将父元素高度写死，以避免塌陷的问题，但父元素的高度不能自适应子元素的高度，因此不推荐使用
		②根据W3C标准，在页面中元素都有一个隐含的属性叫做Block Formatting Context，简称BFC，该属性可以设置打开或者关闭，默认是关闭
		③当元素开启BFC以后，元素将有以下特点
			A. 父元素的垂直外边距不会和子元素重叠
			B. 开启BFC的元素不会被浮动元素所覆盖
			C. 开启BFC的元素可以包含浮动的子元素，解决父元素高度塌陷的重点
		④如何开启元素的BFC
			A. 设置父元素也为浮动元素
				-使用这种方式开启，虽然可以撑开父元素，但是会导致父元素宽度丢失，下边的元素上移，不能解决布局的严重问题，不推荐使用
			B. 设置元素的绝对定位
				-该方式与设置元素浮动类似
			C. 设置元素为inline-block
				-可以解决问题，该方式会使得父元素丢失宽度，但副作用较小，不推荐使用
			D. 设置元素的overflow属性为一个非visible的值
				-可以解决问题，推荐使用，使用方式为：将父元素的overflow设置为hidden，该方式是开启BFC副作用最小的方式
			注：在IE6中虽然没有BFC，但是具有另一个隐含的属性叫做hasLayout，该属性和BFC类似，所以IE6浏览器可以通过开启hasLayout来解决问题
				开启的方式很多种，但是直接使用副作用最小的方式
				-直接将元素的zoom设置为1即可
				zoom表示放大的意思，后边的数字是多少就代表放大多少倍
十一、消除浮动
	1. 我们有时候希望清除浮动元素对当前元素产生的影响，这个时候可以使用clear
	2. clear可以用来清除浮动元素对当前元素的影响
		①none：默认值，默认不清除
		②left：清除左侧浮动元素对当前元素的影响
		③right：清除右侧浮动元素对当前元素的影响
		④both：清除两侧浮动元素对当前元素的影响，结果与影响最大的一侧相关
	3. 清除浮动以后，元素会回到其他元素浮动之前的位置
	4. 解决高度塌陷的方案二：
		①可以直接在高度塌陷的父元素的最后，添加一个空白的块元素，由于这个块元素并没有浮动，因此可以撑起父元素
		②然后对其进行清除浮动，这样可以通过这个空白的块元素来撑开父元素的高度
		③该方案基本没有副作用，但是会添加多余的元素
	5. 解决高度塌陷的最终方案：使用after伪类
		①通过after伪类向元素的最后添加一个空白的元素，然后对其清除浮动
		②原理与在html中添加一个块元素一样，但不会添加多余的元素，几乎没有副作用
		③举例:
			.clearfix:after{
				content: "";
				display: block;
				clear: both;
			}
		④为使更多元素共用，为高度塌陷的元素添加一个共同的类clearfix即可
		⑤在IE6中不支持after伪类，因此仍须使用hasLayout解决高度塌陷
			举例：.clearfix{zoom: 1;}
		
		
