三、vue组件化编码
	1. 使用vue-cli 创建模板项目
		① 说明：
			A. vue-cli 是vue 官方提供的脚手架工具
			B. github: https://github.com/vuejs/vue-cli
			C. 作用: 从https://github.com/vuejs-templates 下载模板项目
		② 创建vue 项目
			npm install -g vue-cli
			vue init webpack vue_demo
			cd vue_demo
			npm install
			npm run dev
			访问: http://localhost:8080/
		③ 下载脚手架模板时注意：
			A. Project name：单词不能以大写字母开头，单词与单词之间以_隔开
			B. Install vue-router：No
			C. Use on ESLint：Yes
			D. Set up unit test：No
			E. Set e2e tests：No
			F. 其他默认选项按enter键即可
		④ 模板项目的结构
			|-- build : webpack 相关的配置文件夹(基本不需要修改)
				|-- dev-server.js : 通过express 启动后台服务器
			|-- config: webpack 相关的配置文件夹(基本不需要修改)
				|-- index.js: 指定的后台服务的端口号和静态资源文件夹
			|-- node_modules
			|-- src : 源码文件夹
				|-- components: vue 组件及其相关资源文件夹
				|-- App.vue: 应用根主组件
				|-- main.js: 应用入口js
			|-- static: 静态资源文件夹
			|-- .babelrc: babel 的配置文件
			|-- .eslintignore: eslint 检查忽略的配置
			|-- .eslintrc.js: eslint 检查的配置
			|-- .gitignore: git 版本管制忽略的配置
			|-- index.html: 主页面文件
			|-- package.json: 应用包配置文件
			|-- README.md: 应用描述说明的readme 文件
	2. 项目的打包与发布
		① 打包：npm run build
		② 发布：
			A. 发布一：使用静态服务器工具包
				npm install -g serve
				serve dist
				访问: http://localhost:5000
			B. 发布二：使用动态web 服务器(tomcat)
				a. 修改配置: webpack.prod.conf.js
					output: {
						publicPath: '/xxx/' //打包文件夹的名称
					}
				b. 重新打包：npm run build
				c. 修改dist 文件夹为项目名称: xxx
				d. 将xxx 拷贝到运行的tomcat 的webapps 目录下
				e. 访问: http://localhost:8080/xxx
	3. eslint
		① 说明
			A. ESLint 是一个代码规范检查工具
			B. 它定义了很多特定的规则, 一旦你的代码违背了某一规则, eslint 会作出非常有用的提示
			C. 官网: http://eslint.org/
			D. 基本已替代以前的JSLint
		② ESLint 提供以下支持
			A. ES
			B. JSX
			C. style 检查
			D. 自定义错误和提示
		③ ESLint 提供以下几种校验
			A. 语法错误校验
			B. 不重要或丢失的标点符号，如分号
			C. 没法运行到的代码块（使用过WebStorm 应该了解）
			D. 未被使用的参数提醒
			E. 确保样式的统一规则，如sass 或者less
			F. 检查变量的命名
		④ 规则的错误等级有三种
			A. 0（off）：关闭规则。
			B. 1：打开规则，并且作为一个警告（信息打印黄色字体）
			C. 2：打开规则，并且作为一个错误（信息打印红色字体）
		⑤ 相关配置文件
			A. .eslintrc.js : 全局规则配置文件
				'rules': {
					'no-new': 1 // 
				}
			B. 在js/vue 文件中修改局部规则
				/* eslint-disable no-new */
				new Vue({
					el: 'body',
					components: { App }
				})
			C. .eslintignore: 指令检查忽略的文件
				*.js
				*.vue
	4. 组件定义与使用
		① vue 文件的组成(3 个部分)
			A. 模板页面
				<template>
					页面模板
				</template>
			B. JS 模块对象
				<script>
					export default {
						data() {return {}},
						methods: {},
						computed: {},
						components: {}
					}
				</script>
			3) 样式
				<style>
					样式定义
				</style>
		② 基本使用
			A. 引入组件
			B. 映射成标签
			C. 使用组件标签
			D. 代码：
				<template>
					<HelloWorld></HelloWorld>
					<hello-world></hello-world>
				</template>
				<script>
					import HelloWorld from './components/HelloWorld'
					export default {
						components: {
							HelloWorld
						}
					}
				</script>
			E. 关于标签名与标签属性名书写问题
				a. 写法一: 一模一样
				b. 写法二: 大写变小写, 并用-连接












































































