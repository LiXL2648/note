一、数组的简介（Array）：
	1. 数组与普通对象的区别：
		①共同点：
			A. 数组也是一个对象
			B. 它和普通的对象功能类似，也是用于储存一些值
		②不同点：
			A. 普通对象是使用字符作为属性名，而数组则是使用数字来作为索引而操作元素
			B. 数组的储存性能比普通对象要好，在开发中往往使用数组来存储一些数据
	2. 索引：从0开始的整数
	3. 创建一个数组：
		①语法：
			var 数组名 = new Array();
		②举例：
			var arr = new Array();
	4. 向数组中添加元素：
		①语法：
			arr[索引] = 值
		②举例：
			arr[0] = 26;
	5. 读取数组中的值：
		①语法：
			数组[索引]
		②举例：
			console.log(arr[0]);
		③如果读取不存在的索引，程序不会报错，而是返回undefined
	6. 读取数组的长度：
		①可使用length属性来获取数组的长度（元素的个数）
			A. 语法：数组.length
			B. 举例：console.log(arr.length);
		②对于连续的数组，使用length可以获取数组的长度
		③对于非连续的数组，使用length会获取到数组的最大索引+1
		④尽量不要创建非连续数组
	7. 修改length：
		①如果修改的length大于原来的长度，则多余的部分会空出来
		②如果修改的length小于原来的长度，则多出的元素会自动删除
	8. 向数组的最后一位添加元素：
		①语法：数组名[数组名.length] = 值
		②举例：arr[arr.length] = 48;
二、数组的创建方式：
	1. 使用new方式创建:
		语法：var arr = new Array();
	2. 使用字面量方式创建数组
		语法：var arr = [10,20,30,40];
	3. 使用new方式创建数组也可以传值：
		① var arr = new Array(10,20,30,40);
		②注：
			A. 当以这种方式创建数组，参数只有一个数时，表示数组的长度为该数的值
			B. 通过字面量方式创建数组时，当[]中只有一个元素时，表示的是当前数组中只有元素，且该元素的值为传进来的参数
	4. 数组中可以存储任意类型的数据
		①基本数据类型
			var arr = ["LK", 26, false, null, undefined];
		②对象
			var obj = {
				name:"Li",
				num:48
			};
			var arr = [obj, {name:"Li", num:48}];
		③函数
			var arr = [function(){console.log("我是一个函数")}];
		④数组：当数组中存储的是数组，则该数组表示为二维数组
			var arr = [[26],[26,48],[26,48,2648]]
三、数组方法：
	1. push()：向数组的末尾添加一个或者多个元素并且返回该数组的新的长度	
	2. pop()：在数组的末尾删除一个元素并将该元素作为返回值返回
	3. unshift()：向数组的开头添加一个或者多个元素并且返回该数组的新的长度
	4. shift()：在数组的开头删除一个元素并将该元素作为返回值返回
	5. slice()：
		①可以用来从数组中提取指定的元素
		②该方法不会改变原来的数组，而是将提取的元素封装到一个新的数组中并将新数组返回
		③参数：
			A. 第一个参数：截取开始位置的索引，包含开始索引
			B. 第二个参数：截取结束位置的索引，不包括结束索引
			C. 第二个参数可以省略不写，此时会默认从开始位置的索引截取到数组的尽头
			D. 索引也可以是负值，表示从数组的结尾开始算起
		④举例：
			arr.slice(0, 2);//该结果返回的是原数组索引为从0到2位置的元素组成的新数组
	6. splice():
		①可以用于删除数组中的指定元素
		②使用splice()方法会影响到原数组，会将指定的元素从原数组中删除
		③删除的元素会组成新的数组返回
		④参数：
			A. 第一个参数：表示开始位置的索引
			B. 第二个参数，表示删除元素的个数
			C. 第三个参数及其以后：表示传递新的元素，并将这些元素插入到开始位置索引的前面
		⑤举例：
			arr.splice(0, 2, 1,2,3);//表示在原数组arr中从0的索引位置开始删除2个元素，并将1，2，3三个值插入到0索引位置的前面
	7. concat():
		①可以连接两个或者多个数组，将需要连接的数组以参数的形式传递到concat()方法中
		②该方法可以连接元素，需要连接的元素同样以参数的形式传递到方法中
		③该方法不会影响原数组，并且将得到的新数组以返回值的形式返回
	8. join()：
		①该方法是将一个数组转换为一个字符串
		②该方法不会对原数组产生影响，而是将转换后的字符串作为返回值返回
		③在join()方法中可以指定一个参数，这个参数将会成为数组中各个元素的连接符
			如果不指定连接符，而是默认用逗号连接
	9. reverse()：
		①该方法是用于反转数组
		②该方法会影响到原数组
	10. sort()：
		①可以用来对数组中的元素进行排序
		②该方法会影响原数组
		③该方法会默认按照unicode编码进行排序
		④即使对于纯数字的数组，使用sort()方法进行排序时，也会按照unicode编码进行排序
		⑤指定sort()方法的排序规则：
			A. 我们可以在sort()中添加一个回调函数，来指定排序规则
			B. 回调函数需要定义两个形参
			C. 浏览器将会分别使用数组中的元素作为实参传递给回调函数
			D. 浏览器会根据回调函数的返回值来决定元素的顺序
				如果返回一个大于0的值，则元素会交换位置
				如果返回一个小于0的值，则元素不会交换位置
				如果返回的是0，则表示元素相等，默认不交换位置
			E. 举例：
				//按升序排序 
				arr.sort(function(a, b){
					return a - b;
				});
				//按降序排序
				arr.sort(function(a, b){
					return b - a;
				});
四、数组的遍历：数组遍历就是将数组的元素都提取出来
	1. 方式一：for循环
		for(var i = 0; i < arr.length; i++){
			console.log(arr[i]);
		}
	2. 方式二：forEach()方法
		①这个方法只支持IE8以上及其他浏览器，对于IE8及其以下版本浏览器均不支持，
			因此需要兼容IE8及其以下的浏览器则不能使用forEach()方法
		②forEach()方法需要一个函数作为参数
			A. 像这种函数，由我们创建但是不由我们调用，我们称之为回调函数
			B. 数组中有几个元素函数就会被执行几次
			C. 每次执行，浏览器都会将遍历到的元素、下标、数组对象以实参的形式传递到函数中
			D. 我们可以通过定义形参，来获取遍历数组的内容
		③语法：
			arr.forEach(function(value, index, obj){
			
			});
		④浏览器会在回调函数中传递三个参数：
			A. 第一个参数：就是当前遍历得到的元素
			B. 第二个参数：就是当前遍历得到的元素的索引
			C. 第三个参数：就是正在遍历的数组
五、Date对象：在JS中使用Date对象来表示一个时间
	1. 创建时间对象：
		①方式一：
			//直接使用构造函数创建时间对象，则返回当前代码执行的时间
			var d = new Date();
		②方式二：
			//创建一个指定的时间对象
			var str = "月份/日/年份 时:分:秒";
			var d = new Date(str);
			//需要在构造函数中传递一个表示时间的字符串作为参数
			//日期的格式为：月份/日/年份 时:分:秒
	2. date.getDate()：获取当前的日期对象是几日
	3. getDay():
		①获取当前日期对象的星期几
		②会返回一个0-6的值，0代表星期日
	4. getMonth():
		①获取当前时间对象的月份
		②会返回一个0-11的值，0代表一月，11代表12月
	5. getFullYear():获取当前时间对象的年份
	6. getTime()：获取当前日期对象的时间戳
		①时间戳：指的是从格林威治标准时间的1970年1月1日，0时0分0秒到当前日期所花费的毫秒数
		②计算机在底层保存的时间使用的都是时间戳
		③利用时间戳可以用于测试代码的执行性能
六、Math：
	1. Math和其他对象不同，它不是一个构造函数，而是属于工具类不需要被创建，它封装了数学运算相关的熟悉和方法
	2. Math.PI：表示圆周率
	3. Math.abs()：可以用于计算一个数的绝对值
	4. Math.ceil()：可以对一个数进行向上取整，小数点后只要有位数就自动进1
	5. Math.floor()：可以对一个数进行向下取整，小数部分会被舍掉
	6. Math.round()：可以对一个数进行四舍五入
	7. Math.random()：可以用于生成一个0-1之间的随机数
		①生成一个0-10之间的随机数：
			Math.roung(Math.random * 10)
		②生成一个0-x之间的随机数：
			Math.roung(Math.random * x)
		③生成一个x-y之间的随机数：
			Math.roung(Math.random * (y - x) + x)
	8. Math.max()：求多个值之间的最大值
	9. Math.min()：求多个值之间的最小值
	10. Math.pow()：求x的y次幂
	11. Math.sqrt()：求一个数的算术平方根
七、包装类：
	1. 在JS中提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对应包装类对象
		①String():可以将基本数据类型字符串转换为String对象
		②Number():可以将基本数据类型为数据转换为Number对象
		③Boolean():可以将基本数据类型为布尔值转换为Boolean对象
		④举例：
			A. var num = new Number(2648);
			B. var str = new String("hello");
			C. var bool = new String(true);
	2. 但是，我们在实际发开并不会使用基本数据类型的对象，因为使用对象得到的结果可能不符合要求
	
	3. 方法和属性只能添加给对象，不能添加给基本数据类型，所以当我们通过一些基本数据类型去调用属性和方法时
		浏览器会临时使用包装类将其转换为对象，然后调用对象的属性和方法，调用完之后，再将其转换为基本数据类型
	4. 当通过一个基本数据类型的值去创建一个属性或者方法时，浏览器先将该值转换为对应包装类的对象，通过对象去
		创建属性和方法，一旦创建完毕之后，该对象立即被销毁。当创建完毕之后，同该值去调用创建好的属性和方法时，
		此时，浏览器会再次将该值转换为对象，由于两次转换的对象不是同一个，因此输出结果为undefined
八、字符串（String）：字符串底层是用字符数组进行保存，可通过”字符串变量[index]“获取字符元素
	1. length属性：可以用于获取字符串的长度
	2. charAt()：与str[index]类似，可以返回字符串中指定索引位置的字符，根据索引获取字符
	3. charCodeAt()：获取指定索引位置的字符编码（Unicode编码）
	4. String.formCharCode()：可以根据字符编码去获取字符
	5. concat()：可以用来连接两个或者多个字符串，作用和+一样
	6. indexof()：
		①该方法可以检索一个字符串是否含有指定的字符
		②如果字符串含有该支付，会返回其第一次出现的索引
		③如果没有找到指定的内容，则返回-1
		④可以指定第二个参数，表示从指定的位置开始查找
	7. lastIndexOf()：
		①该方法的用法和indexOf()一样，
		②不同的是indexof()是从前往后查找，而lastIndexOf()是从后往前找
		③该方法也可以从指定的位置开始查找
	8. slice():
		①可以从字符串中截取指定的内容
		②该方法不会影响原字符串，而是将截取到的内容返回
		③参数：
			①第一个参数：开始位置的索引（包括开始的位置）
			②第二个参数：结束位置的索引（不包括结束位置）
			③也可以传递一个负数作为参数，负数则代表从后开始计算
			④第二个参数可以省略，默认截取到字符串的尽头
	9. subString():
		①可以用于截取一个字符串，和slice()类似
		②参数：
			第一个参数，开始截取位置的索引（包括开始位置）
			第二个参数：结束位置的索引（不包括结束位置）
			第二个参数可以省略，默认截取到字符串的尽头
		③不同的是：该方法不能接受负数作为参数，如果传递一个负数作为参数，则默认该参数为0
		④当传递的参数不是按照从小到大的顺序，则会自动调整参数的位置。
	10. subStr():
		①用于截取字符串
		②参数：
			截取开始位置的索引
			截取的长度
	11. split()：
		①可以将一个字符串拆分为一个数组
		②参数：需要一个字符串作为参数，将会根据该字符串去拆分数组
		③如果传递一个空字符串，则会将该字符串拆分为数组一个个字符
	12. toUpperCase()：将一个字符串转化为大写字母并且返回
	13. toLowerCase()：将一个字符串转换为小写字母并且返回
九、正则表达式：
	1. 含义：正则表达式用于定义一些字符的规则，计算机可以根据正则表达式，来检查一个字符是否符合规则，
				或者将字符串中符合规则的内容提取出来
	2. 创建正则表达式对象
		①方式一：使用构造方法创建正则表达式对象
			A. 语法：
				var 变量名 = new RegExp("正则表达式","匹配模式");
				使用typeof检查一个正则表达式对象时，返回的是object
			B. 正则表达式的方法：test()
				使用这个方法可以用来检查一个字符串是否符合正则表达式的规则
				如果符合则返回true，如果不符合则返回false
			C. 在构造函数中可以传递一个匹配模式作为第二个参数
				i：表示忽略字母的大小写
				g：表示全局匹配模式
				
		②方式二：使用使用字面量创建正则表达式对象
			A. 语法：
				var 变量名 = /正则表达式/匹配模式
			B. 字面量与构造器创建正则表达式的对比：
				使用字面量的方式更加简单
				使用构造器的方式更加灵活
	3. 正则表达式的语法：
		①使用”|“表示”或者“的意思
		②[]里面的内容表示“或者”的意思，[ab]==a|b
		③[a-z]：表示任意小写字母
		④[A-z]：表示任意字母
		⑤[^]：除了[]中的内容，其余的均成立
		⑥[0-9]：任意的数字
		⑦量词：
			A. 通过量词可以设置一个内容出现的次数
			B. 量词只对它前边的一个内容起作用，可以对内容添加()表示多个内容
			C. {n}：正好出现n次
			D. {m,n}：出现m-n次
			E. {m,}:m次以上
			F. +：至少一次，等价于{1,}
			G. *：至少0次，等价于{0,}
			H. ?：0次或者一次，等价于{0,1}
		⑧^：表示以某个内容开头
		⑨$：表示以某个内容结尾
			A. /^a&/：表示的是一个字符串只能出现指定的内容，其余的情况都不允许
			B. /^a|a&/：表示一个字符串只能以a开头或者以a结尾
		⑩转义字符：
			A. .：表示任意字符
			B. 可以使用转移字符“\”将特殊字符转换为一般字符，比如：\.表示.，\\表示\
			C. \w：表示任意字母、下划线、数字，等价于[A-z_0-9]
			D. \W：表示除了任意字母、下划线、数字，等价于[^A-z_0-9]
			E. \d：表示任意数字，等价于[0-9]
			F. \D：表示除了任意数字，等价于[^0-9]
			G. \s：表示空格
			H. \S：表示除了空格
			I. \b：表示单词边界
			J. \B：表示除了单词边界
	4. 字符串中和正则表达式相关的方法：
		①split()：
			A. 可以将一个字符串拆分为一个数组
			B. 方法中除了能传递字符串作为参数，也可以传递正则表达式作为参数，这样方法就会根据正则表达式去拆分数组
			C. 这个方法即使不指定匹配模式，也会全部拆分
		②search()：
			A. 可以搜索字符串中是否含有指定内容
			B. 如果搜索到指定内容，这会返回第一次出现该内容的索引，如果没有搜索到则返回-1
			C. 它可以接收一个正则表达式作为参数，然后会根据正则表达式去检索字符串
			D. 就算指定匹配模式为全局模式，该方法也只会查找第一个出现的索引
		③match()：
			A. 可以根据正则表达式，从一个字符串中将符合条件的内容提取出来
			B. 默认的情况下match只会将第一次找到的内容提取出来，一旦找到指定的内容立即停止检索
			C. 可以设置正则表达式为全局匹配模式，这样就会将所有匹配的内容提取出来
			D. 可以为一个正则表达式设置多个匹配模式，且与顺序无关
			E. 该方法会将所有匹配到的内容存储到数组中返回，即使只查询到一个结果
		④replace()：
			A. 可以将字符串中指定内容替换为新的内容
			B. 参数：
				参数一：被替换的内容，可以接收一个正则表达式作为参数
				参数二：替换原来内容的新内容
	5. 举例：
		①创建一个正则表达式检查一个字符串中是否含有单词child
			A. 分析：
				1. 当定义/child/用于检测一个字符串时，当字符串中含有child及返回true，比如children
				2. 因此需要定义child为单词边界
			C. var reg = /\bchild\b/;
		②当用户输入一个内容，而无意在内容的首尾多输入了多个空格，而内容中间的空格属于合法，如何定义
			A. 分析：
				1. 使用replace()方法可以将空格转换为空
				2. 可以使用^\s表示开头的空格，\s&表示结尾的空格
				3. 使用量词*或者+可以表示0到多或者1到多个空格
				4. 使用|和定义全局匹配模式可以同时去除内容首位的空格
			B. var result = result.replace(/^\s*|\s*&/g, "");
		③检查一个电话号码是否正确
			A. 分析：
				1. 开头为1：^1
				2. 结尾只能是数字：&
				3. 第二个数字只能是3-9：[3-9]
				4. 剩余9个数字为任意数字：[0-9]{9}
			B.  var reg = /^1[3-9][0-9]{9}&/
		④检查一个邮箱是否正确
			A. 分析：
				1. 首先@前面可以为任意字符下划线数字：.\w+(\.w+)*
				2. 邮箱必须出现@：@
				3. @后面紧跟着必须是字母或者数字：[A-z0-9]+
				4. 最后以.com或者.cn结尾：(\.[A-z]{3,5}){1,2}
			B. var reg = /^\w+(\.\w+)*@[A-z0-9]+(\.[A-z]{2,5}){1,2}$/
	
	
	
 