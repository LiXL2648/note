一、数组的简介（Array）：
	1. 数组与普通对象的区别：
		①共同点：
			A. 数组也是一个对象
			B. 它和普通的对象功能类似，也是用于储存一些值
		②不同点：
			A. 普通对象是使用字符作为属性名，而数组则是使用数字来作为索引而操作元素
			B. 数组的储存性能比普通对象要好，在开发中往往使用数组来存储一些数据
	2. 索引：从0开始的整数
	3. 创建一个数组：
		①语法：
			var 数组名 = new Array();
		②举例：
			var arr = new Array();
	4. 向数组中添加元素：
		①语法：
			arr[索引] = 值
		②举例：
			arr[0] = 26;
	5. 读取数组中的值：
		①语法：
			数组[索引]
		②举例：
			console.log(arr[0]);
		③如果读取不存在的索引，程序不会报错，而是返回undefined
	6. 读取数组的长度：
		①可使用length属性来获取数组的长度（元素的个数）
			A. 语法：数组.length
			B. 举例：console.log(arr.length);
		②对于连续的数组，使用length可以获取数组的长度
		③对于非连续的数组，使用length会获取到数组的最大索引+1
		④尽量不要创建非连续数组
	7. 修改length：
		①如果修改的length大于原来的长度，则多余的部分会空出来
		②如果修改的length小于原来的长度，则多出的元素会自动删除
	8. 向数组的最后一位添加元素：
		①语法：数组名[数组名.length] = 值
		②举例：arr[arr.length] = 48;
二、数组的创建方式：
	1. 使用new方式创建:
		语法：var arr = new Array();
	2. 使用字面量方式创建数组
		语法：var arr = [10,20,30,40];
	3. 使用new方式创建数组也可以传值：
		① var arr = new Array(10,20,30,40);
		②注：
			A. 当以这种方式创建数组，参数只有一个数时，表示数组的长度为该数的值
			B. 通过字面量方式创建数组时，当[]中只有一个元素时，表示的是当前数组中只有元素，且该元素的值为传进来的参数
	4. 数组中可以存储任意类型的数据
		①基本数据类型
			var arr = ["LK", 26, false, null, undefined];
		②对象
			var obj = {
				name:"Li",
				num:48
			};
			var arr = [obj, {name:"Li", num:48}];
		③函数
			var arr = [function(){console.log("我是一个函数")}];
		④数组：当数组中存储的是数组，则该数组表示为二维数组
			var arr = [[26],[26,48],[26,48,2648]]
三、数组方法：
	1. push()：向数组的末尾添加一个或者多个元素并且返回该数组的新的长度	
	2. pop()：在数组的末尾删除一个元素并将该元素作为返回值返回
	3. unshift()：向数组的开头添加一个或者多个元素并且返回该数组的新的长度
	4. shift()：在数组的开头删除一个元素并将该元素作为返回值返回
	5. slice()：
		①可以用来从数组中提取指定的元素
		②该方法不会改变原来的数组，而是将提取的元素封装到一个新的数组中并将新数组返回
		③参数：
			A. 第一个参数：截取开始位置的索引，包含开始索引
			B. 第二个参数：截取结束位置的索引，不包括结束索引
			C. 第二个参数可以省略不写，此时会默认从开始位置的索引截取到数组的尽头
			D. 索引也可以是负值，表示从数组的结尾开始算起
		④举例：
			arr.slice(0, 2);//该结果返回的是原数组索引为从0到2位置的元素组成的新数组
	6. splice():
		①可以用于删除数组中的指定元素
		②使用splice()方法会影响到原数组，会将指定的元素从原数组中删除
		③删除的元素会组成新的数组返回
		④参数：
			A. 第一个参数：表示开始位置的索引
			B. 第二个参数，表示删除元素的个数
			C. 第三个参数及其以后：表示传递新的元素，并将这些元素插入到开始位置索引的前面
		⑤举例：
			arr.splice(0, 2, 1,2,3);//表示在原数组arr中从0的索引位置开始删除2个元素，并将1，2，3三个值插入到0索引位置的前面
	7. concat():
		①可以连接两个或者多个数组，将需要连接的数组以参数的形式传递到concat()方法中
		②该方法可以连接元素，需要连接的元素同样以参数的形式传递到方法中
		③该方法不会影响原数组，并且将得到的新数组以返回值的形式返回
	8. join()：
		①该方法是将一个数组转换为一个字符串
		②该方法不会对原数组产生影响，而是将转换后的字符串作为返回值返回
		③在join()方法中可以指定一个参数，这个参数将会成为数组中各个元素的连接符
			如果不指定连接符，而是默认用逗号连接
	9. reverse()：
		①该方法是用于反转数组
		②该方法会影响到原数组
	10. sort()：
		①可以用来对数组中的元素进行排序
		②该方法会影响原数组
		③该方法会默认按照unicode编码进行排序
		④即使对于纯数字的数组，使用sort()方法进行排序时，也会按照unicode编码进行排序
		⑤指定sort()方法的排序规则：
			A. 我们可以在sort()中添加一个回调函数，来指定排序规则
			B. 回调函数需要定义两个形参
			C. 浏览器将会分别使用数组中的元素作为实参传递给回调函数
			D. 浏览器会根据回调函数的返回值来决定元素的顺序
				如果返回一个大于0的值，则元素会交换位置
				如果返回一个小于0的值，则元素不会交换位置
				如果返回的是0，则表示元素相等，默认不交换位置
			E. 举例：
				//按升序排序 
				arr.sort(function(a, b){
					return a - b;
				});
				//按降序排序
				arr.sort(function(a, b){
					return b - a;
				});
四、数组的遍历：数组遍历就是将数组的元素都提取出来
	1. 方式一：for循环
		for(var i = 0; i < arr.length; i++){
			console.log(arr[i]);
		}
	2. 方式二：forEach()方法
		①这个方法只支持IE8以上及其他浏览器，对于IE8及其以下版本浏览器均不支持，
			因此需要兼容IE8及其以下的浏览器则不能使用forEach()方法
		②forEach()方法需要一个函数作为参数
			A. 像这种函数，由我们创建但是不由我们调用，我们称之为回调函数
			B. 数组中有几个元素函数就会被执行几次
			C. 每次执行，浏览器都会将遍历到的元素、下标、数组对象以实参的形式传递到函数中
			D. 我们可以通过定义形参，来获取遍历数组的内容
		③语法：
			arr.forEach(function(value, index, obj){
			
			});
		④浏览器会在回调函数中传递三个参数：
			A. 第一个参数：就是当前遍历得到的元素
			B. 第二个参数：就是当前遍历得到的元素的索引
			C. 第三个参数：就是正在遍历的数组
