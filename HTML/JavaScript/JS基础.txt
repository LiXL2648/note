一、JS起源：
	1. JavaScript诞生于1995年，它的出现主要是用于处理网页中的前端验证
	2. 所谓的前端验证，就是指检查用户输入的内容是否符合一定的规则
二、简史
	1. JavaScript是由网景公司发明，起初命名为liveScript，后来由于SUN公司的介入更名为JavaScript
	2. 1996年微软公司在其最新的IE浏览器中引入自己对JavaScript的实现JScript
	3. 于是在市面上存在两个版本的JavaScript，一个网景公司的JavaScript和微软的JScript
	4. 为了确保不同的浏览器上运行的JavaScript标准一致，所以几个公司共同定制了JS的标准命名为ECMAScript
三、实现
	1. ECMAScript是一个标准，而这个标准需要各个厂商去实现
	2. 不同的浏览器对该标准有不同的实现
		浏览器					JavaScript实现方式
		①FireFox				SpiderMonkey
		②IE						JScript/Chakra
		③Safari					JavaScriptCore
		④Chrome					v8（引擎速度最快）
		⑤Carakan				Carakan
	3. 我们已经知道ECMAScript是JavaScript的标准，所以一般情况下，这个这两个词我们认为是同一个意思
	4. 但是实际上JavaScript的含义却要更大
	5. 一个完整的JavaScript实现应该由以下三个部分构成
		①ECMAScript
		②DOM
		③BOM
	6. JS的特点：
		①解释性语言
		②类似于C和Java的语法结构
		③动态语言
		④基于原型的面向对象
四、输出语句：JS指令的顺序是从上往下执行
	1. alert()：控制浏览器弹出一个警告
	2. document.write()：让计算机在页面输出一个内容（在body中显示）
	3. console.log()：向控制台输出一个内容
五、JS的编写位置
	1. 可以将JS代码编写到标签的onclick属性中，当我们点击按钮时，JS代码才会被执行
		-举例：<button onclick="alert('');"></button>
	2. 可以将JS代码写到超链接的href熟悉中，这样当点击超链接时，会执行js代码
		-举例：<a href="javascript:alert('');"></a>
		-举例：<a href="javascript:;"></a>与<a href="#"></a>效果一致
	注：虽然可以写在标签的属性中，但是他们属于结构与行为耦合，不推荐使用
	3. 可以将JS代码写到script标签中
		-举例：<script type="text/javascript">alert();</script>
	4. 可以将JS代码编写到外部js文件中，然后通过script标签引入
		①举例：<script type="text/javascript" scr="js/script.js"></script>
		②写到外部文件中的js代码可以在不同的页面中同时引用，也可以利用浏览器的缓存机制
		③script标签一旦用于引入外部js文件，就不能编写其他的js代码
		④将js代码编写到外部的js文件的方式是推荐使用
六、基本语法
	1. JS注释：注释的内容不会被执行，但是可以在源代码中查看
		①多行注释：/**/
		②单行注释：//
		③要养成良好的编写注释的习惯，也可以通过注释来对代码进行一些简单的调试
	2. JS中严格区分大小写
	3. JS中每条语句以分号结束，如果不写，浏览器会自动添加，但是会消耗一定的系统资源
			而且有的时候，浏览器会加错分号，所以在开发中分号必须写
	4. JS中会忽略多个空格和换行，所以可以利用空格和换行对代码进行格式化
七、字面量和常量
	1. 字面量：都是一些不能改变的量
		-举例：1/2/3
		-字面量可以直接使用，但是一般不会直接使用字面量
	2. 变量：变量可以用来保存字面量，而且变量的值是可以任意改变的
		①变量更加方便我们的使用，所以在开发中都是通过变量去保存一个字面量，而很少直接使用字面量
		②声明变量：在JS中使用var关键字来声明一个变量
			-格式一：var i；
					 i = 1;
			-格式二：var j = 2;
八、标识符
	1. 在JS中所有可以由我们自主命名的都可以称为是标识符
		-例如：变量名/函数名/属性名，都属于标识符
	2. 命名一个标识符需要遵守以下的规则
		①标识符中可以包含：字母/数字/_/$
		②标识符不能以数字开头
		③标识符不能是ES中的关键字或者保留字
		④标识符一般都采用驼峰命名法
			-首字母小写，每个单词的首字母大写，其余字母小写
		⑤JS底层保存标识符时实际上采用的是Unicode编码，所以理论上讲，所有的utf-8中含有的内容都可以作为标识符。			
数据类型：数据类型指的是字面量的类型，在JS中一共有六种数据类型
	1. String：字符串类型
	2. Number：数值类型
	3. Boolea：布尔类型
	4. Null：空值
	5. Undefined：未定义
	6. Object：引用数据类型
	注：其中String Number Boolean Null Undefined属于基本数据类型，Object属于引用数据类型
	
九、String字符串
	1. 在JS中字符串需要使用引号包裹起来
	2. 使用双引号或者单引号，但是不能混着用
	3. 引号不能嵌套，双引号不能嵌套双引号，单引号不能嵌套单引号
		但是双引号可以嵌套单引号，单引号可以嵌套双引号
	4. 在字符串中可以使用\作为转意字符串，但表示一些特殊符号时可以使用\进行转意
		①\"：表示一个双引号
		②\'：表示一个单引号
		③\n：表示换行
		④\t：表示制表符，相当于按一下tab键
		⑤\\：表示一个\。
十、Number数字类型：在JS中所有的数值都是Number类型，包括整数和浮点数 
	1. Number.MAX_VALUE:JS中可以表示的数字的最大值(1.7976931348623157e+308)
	2. Number.MIN_VALUE:JS中可以表示的数字大于0的最小值(5e-324)
	3. Infinity：表示正无穷，如果使用Number表示的数字超过了最大值，则会返回一个Infinity
	4. typeof：检查一个变量的数据类型
	5. NaN：是一个特殊的数字，表示Not A Number
	注：
		①在JS中整数的运算基本可以保证精确
		②如果使用JS进行浮点数运算时，可能得到一个不精确的结果，所以千万不要使用JS对精确度要求高的数值进行运算
十一、Boolean布尔类型
	1. true：表示真
	2. false：表示假
	3. 使用typeof检查一个布尔类型的变量时会返回boolean
十二、Nulll类型
	1. Null（空值），类型的值只有一个，就是null
	2. null这个值专门用来表示一个空的对象
	3. 使用typeof检查一个null值时，返回object，原因是null表示空对象
十三、Undefined类型
	1. Undefined（未定义）类型的值只有一个，就是undefined
	2. 当声明一个变量，但不给变量赋值时，它的值就是undefined
	3. 使用typeof检查一个undefined的值返回undefined 
十三、强制类型转换：
	(1)将其他的数据类型转换为String类型
	1. 方式一：
		①调用被转换数据的toString()方法
		②该方法不会影响原变量，它会将转换的结果返回
		③注：null个undefined这两个值没有toString()方法，如果调用toString()方法程序会报错
		④举例：
			var a = 123;
			a = a.toString();
			
			a = true;
			a = a.toString();
	
			a = null;
			a = a.toString();//错误
			
			a = undefined;
			a = a.toString();//错误
	2. 方式二：
		①调用String()函数，并将被转换的数据作为参数传递给String()函数名/属性名，都属于标识符
		②使用String()函数强制转换时
			A. 对于Number和Boolean类型的数据实际上是调用数据的toString()方法
			B. 但是对于null和undefined，就不会调用toString()方法，它会将null转化为"null",将undefined转换为"undefined"
		③举例：
			var = 123;
			a = String(a);
			
			a = true;
			a = String(a);
			
			a = null;
			a = String(a);
			
			a = undefined;
			a = String(a);
	(2)将其他数据类型的数据转换为Number
	1. 方式一：调用Number()
		①字符串转换为数字：
			A. 如果是纯数字的字符串，则会将其转换为数字
			B. 如果字符串中有非数字的内容，则转换为NaN
			c. 如果字符串中只有空或者空格，则转换为0
			D. 举例：
				var a = "123";
				a = Number(a);//a = "123"
				
				a = "123abc";
				a = Number(a);//a = NaN
				
				a = "";/" ";
				a = Number(a);//a = 0
		②布尔类型转换为数字：
			A. true转换为1
			B. false转换为0
			C. 举例：
				var a = true;
				a = Number(a);//a = 1
				
				a = false;
				a = Number(a);//a = 0
		③null转换为数字为0
			-举例：
				var a = null;
				a = Number(a);//a = 0
		④undefined转换为数字为NaN
			-举例：
				var a = undefined;
				a = Number(a);//a = NaN
	2. 方式二：这种方式专门用于处理字符串
		①parseInt()：把一个字符串转换为一个整数
			A. 调用parseInt()函数可以将一个字符串中的有效整数内容提取出来
			B. 举例：
				var a = "123abc"
				a = parseInt(a);//a = 123
				
				a = "123abc123"
				a = parseInt(a);//a = 123
				
				a = "123.456abc"
				a = parseInt(a);//a = 123
				
				a = "abc123abc"
				a = parseInt(a);//a = NaN
		②parseFloat()：把一个字符串转换为一个浮点数
			B. 举例：
				var a = "123.456abc"
				a = parseFloat(a);//a = 123.456
				
				a = "123.456.789abc"
				a = parseFloat(a);//a = 123.456
				
				a = "abc123.456abc"
				a = parseFloat(a);//a = NaN 
	(3)其他类型转换为Boolean类型：调用Boolean()函数
		①数字类型转换成布尔类型：除了0和NaN以外，其余都是true
		②String类型转换成布尔类型，除了空字符串以外其余的都是true
		③null和undefined转换成布尔类型，结果为false
		④对象转换成布尔类型，结果为true
		
十四、其他进制的数字
	1. 0x：表示十六进制的数
	2. 0：表示八进制的数
		①举例：
			var a = "070";
			a = parseInt(a);
			这种情况有些浏览器会当作十进制，有些浏览器则当成八进制
		②解决这种问题的方法
			var a = "070";
			a = parseInt(a,10);//转换成十进制
			a = parseInt(a,8);//转换成八进制
	3. ob：表示二进制的数，但是并不是所有的浏览器都支持
	4. 默认是十进制
十五、算数运算符：当对Number类型的进行运算时，会将这些值转换为Number然后在进行运算
	1.+：
		①可以对两个值进行加法运算，并将结果返回
		②如果对两个字符串进行加法运算时，则会做拼接并将结果返回
		③任何的值与字符串进行加法运算，都会将其转换为字符串，然后再和后边的字符串进行拼接
	2. -：可以对两个值进行减法运算，并将结果返回
	3. *：可以对两个值进行乘法运算
	4. /：可以对两个值进行除法运算
	5. %：可以对两个值进行取模运算
	注：
		①任何值做- * / 运算时，都会自动转换为Number再进行运算
		②隐式类型转换：
			A. 转换成Number：可以将一个值-0 *1 /1 对其进行类型转换，原理和Number()一样
			B. 转换成String：将一个任意类型的值与""进行拼接，将其转换为String类型的字符串，原理和String()一样
		③任何的值与NaN进行运算，其结果都为NaN
十六、一元运算符：只需要一个操作数
	1. +（正号）：正号不会对数字产生任何影响
	2. -（负号）：负号可以对数字进行负号的取反
	3. 对于非Number类型的值，它会先将其转换为Number类型的值，然后对其进行运算
	4. 可以对一个其他数据类型使用+，来将其转换为Number，它的原理和Number()一样
十七、自增和自减
	1. 自增
		①通过自增可以使变量在自身的基础上增加1
		②对于一个变量自增以后，原变量的值会立即自增1
		③自增分成两种情况：后++（a++）和前++（++a），两种都会使得变量的值自增1
			不同的是a++和++a的值不同，a++的值等于原变量的值（自增前），而++a的值等于自增后的值。
	2. 自减
		①通过自减可以使变量在自身的基础上减1
		②对于一个变量自减以后，原变量的值会立即自减1
		③自减分成两种情况：后--（a--）和前--（--a），两种都会使得变量的值自减1
			不同的是a--和--a的值不同，a--的值等于原变量的值（自减前），而--a的值等于自减后的值
十八、逻辑运算符
	1. !（非）：
		①!可以用来对一个值进行非运算
		②所谓的非运算就是对一个布尔值进行取反的操作
		③如果对一个值进行两次取反操作，则该值是它本身
		④如果对一个非布尔值进行取反，则该值会先转换为布尔值，然后进行取反
		⑤隐性类型转换：可以对一个任意类型的值进行两次取反，得到该值的布尔值，该原理和Boolean()函数一样
	2. &&（与）
		①&&可以对符号两侧的值进行“与”运算并且返回结果
		②运算规则
			A. 两个值之间只有一个值为false，其结果就返回false，两个值同时为true时才会返回true
			B. JS中的“与”属于短路的“与”，即当中第一个值为false时，则不会看第二个值
	3. ||（或）
		①||可以对符号两侧的值进行“或”运算并且返回结果
		②运算结果
			A. 两个值中只有一个为true时，其结果就返回true，如果两个值同时为false时，其结果才返回false
			B. JS中的“或”属于短路或，即第一个值的结果为true，则不会检查后面的值
	4. 非布尔值的运算
		①对于非布尔值进行“与”或者“或”运算时，会将其转换为布尔值，然后进行运算，并且返回结果
		②与运算
			A. 如果第一个值为false，则返回第一个的值
			B. 如果第一个值为true ，则返回第二个的值
		③或运算
			A. 如果第一个值为false，则返回第二个的值
			B. 如果第一个值为true ，则返回第一个的值
十九、关系运算符：通过关系运算符可以比较两个值之间的大小关系，如果关系成立则返回true，反之返回false
	1. 比较的是数值的情况
		①大于号（>）：
			A. 判断符号的左侧值是否大于右侧的值
			B. 如果关系成立，返回true，如果返回关系不成立则返回false
		②大于等于（>=）:
			-判断符号左侧的值是否大于等于右侧的值
		③小于号（<）
		④小于等于号（<=）
	2. 非数值得情况
		①对于非数值进行的比较时，会将其转换为数字然后在进行比较
		②如果符号两边都是字符串时，不会将其转换为数字进行比较，而是会分别比较字符串中字符的Unicode编码
	注：
		①任何值与NaN做任何比较时返回的结果都是false
		②比较两个字符串时，比较的是字符串的Unicode编码
		③比较两个字符串时，是一位一位进行比较的，如果两个字符串当前位数是一样时，则比较下一位
		④比较两个中文字符串是没有任何意义的
		⑤在比较两个数字型字符串时，必须将其转换为数字类型在进行比较（可将其中一个字符串前加“+”转换为数字类型，则另一个自动转换为数字类型）
二十、Unicode编码表
	1. 在JS中输出Unicode编码表中的字符：\u+四位Unicode编码
	2. 在网页中输出Unicode编码表中的字符：&#四位Unicode编码对应的十进制
二十一、相等运算符：用来比较两个值是否相等，如果相等则返回true，不等则返回false
	1. 相等：使用==来做相等运算
		-使用==运算符来比较两个值时，如果值得类型相同则直接比较如果类型不同，则会自动进行类型转换，将其转换为相同的类型，在进行比较
	2. 不相等：使用!=来做不等运算，如果不相等则返回true，如果相等则返回false
		-!=运算对相同类型的值进行比较时，会直接进行比较，反之会自动进行类型转换，将其转换为相同的类型，再进行比较
	3. 全等：使用===来做全等运算
		-用来判断两个值是否全等，它和相等类似，不同的是它不会进行自动类型转换，如果两个值得类型不同，直接返回false
	4. 不全等：使用!==来不全等运算
		-用来判断两个值是否不全等，它和不相等类似，不同的是它不会进行自动类型转换，如果两个值得类型不同，直接返回true
	注：
		①如果两个类型不相同的值进行相等或者不相等运算，则会转换为Number类型
		②NaN和任何值进行相等运算或者不相等运算包括它本身，其返回的结构都是false
		③undefined衍生自null,因此这两个值进行相等运算时返回的结果为true
		④null!=0
		⑤判断一个值是否为NaN可以调用isNaN()函数，如果为NaN即返回true，如果不为NaN即返回false
二十二、条件运算符（三元运算符）
	1. 语法：
		①条件表达式?语句1:语句2
		②执行的流程：
			条件运算符在执行时，首先对条件表达式进行求值，
			如果该值为true， 则执行语句1，并且返回结果
			如果该值为false，则执行语句2，并且返回结果
	2. 如果条件语句为非布尔值，则会将其转换为布尔值，再进行判断运算
二十三、运算符优先级
	1. ,运算符：使用,可以分割多个语句，一般可以在声明多个变量的时候使用
		-举例：
			var a, b, c;
			var a = 1, b = 2, c = 3;
	2. JS中的运算符也有优先级，比如先加减，后乘除
		①JS中存在一个运算符优先级表，在表中越靠上优先级越高，优先级越高越优先计算
		②如果优先级一样，则从前往后计算
		③如果遇到优先级不清楚的情况，可以使用括号来改变运算符的优先级
二十四、代码块
	1. o我们的程序是由一条一条代码构成的，语句是从上往下顺序执行
	2. 在JS中可以使用{}来为语句分组
		①在同一个{}中的语句我们称为一组语句，它们要么同时执行，要么同时不执行
		②一个{}综合的语句我们也称为一个代码块
		③在{}的后面不需要添加;
	3. JS中的代码块，只是具有分组的作用，没有其他的用途，代码块内部的内容，在外面完全可见
二十五、流程控制语句：
	1. 在JS中的程序都是从上往下顺序执行
	2. 通过流程控制语句可以控制程序的执行流程，使程序可以根据一定的条件执行
	3. 语句的分类：
		①条件判断语句
		②条件分支语句
		③循环语句
二十六、条件判断语句：使用条件判断语句可以在某个语句执行之前判断，如果条件成立才会执行语句，如果条件不成立则语句不执行
	1. 语法1：
		①
		if(条件表达式){
			语句;
		}
		②if(条件表达式1 逻辑运算符 条件表达式2 ...){
			语句;
		}	
		③执行流程：
			A. if语句在执行时，会先对条件表达式进行求值判断，如果条件表达式的值为true，则会执行if代码块中的语句，
				如果条件表达式的值为false时，则不会执行if后面方法块中的代码
			B. if后面如果不加方法块，则if只会对紧跟随后的一条语句有效，其余的代码将会继续执行
				如果希望if语句对一组代码有效，则可以将这组代码统一放到代码块中
			C. if语句后面的代码块不是必须的，但是在开发中尽量写上代码块
	2. 语法2：
		①
		if(条件表达式){	
			语句...
		}elae{
			语句...
		}
		②执行流程：
			当语句执行时，会先对if后的条件表达式进行求值判断，
			如果该值为true， 则会执行if后的语句
			如果该值为false，则执行else后的语句
	3. 语法3：
		①
		if(条件表达式){	
			语句...
		}else if(条件表达式){
			语句...
		...
		}elae{
			语句...
		}
		②执行流程
			当该语句被执行时，会从上到下依次对条件进行判断，
			如果该值为true，则会执行当前语句，
			如果该值为false，则会对下一个条件表达式进行求值并且进行判断
			如果所有的条件都不成立，则会执行最后一个else后代码块中的语句
			在该if判断语句中，只有一个代码块会被执行，一旦代码块被执行，程序立即结束进行下一个语句中。
二十七、条件分支语句(switch语句)
	1. 语法：
		switch(条件表达式){
			case 表达式1:
				语句;
				break;
			case 表达式2:
				语句;
				break;
			default:
				语句;
				break;
		}
	2. 执行流程：
		①在执行时会依次将case后的表达式的值和switch后的条件表达式的值进行全等比较，
			如果结果为true，则从当前的case处开始执行代码。
			当前case后的所有代码都会被执行，我们可以在case语句后面加一个break关键字，
			这样能确保只会执行当前case后边的语句，而不会再继续执行当前case以下的其他case语句。
		②如果比较的结果为false，则会继续向下比较，
			如果所有的比较结果都为false，则只会执行default后的语句
		③switch语句和if语句的功能实际上是有重复的，使用switch可以实现if的功能，
			同样使用if也可以实现switch的功能，所以我们使用时，可根据自己的习惯选择
二十八、while循环
	1. 循环语句：通过循环语句可以多次执行一段代码
	2. 语法：
		while(条件表达式){
			循环体
		}
	3. 执行流程
		①while语句在执行时，先对条件表达式进行求值判断，如果值为true，则执行循环体，
			当循环体执行结束以后，继续对表达式进行求值判断，如果值为true，则执行循环体，
			如果值为false，则终止循环
	4. 当条件表达式的值为写死为true时，叫做死循环，该循环不会停止，除非浏览器关闭，可以使用breakzhong'zhi5循环
	5. 创建一个循环，往往需要三个步骤
		①创建并且初始化一个变量
		②在循环体中设置一个条件表达式
		③定义一个更新表达式，每次更新初始化变量
二十九、do...while循环
	1. 语法：
		do{
			循环体
		}while(条件表达式)
	2. 执行流程：
		①循环体在执行时，先会执行循环体
		②循环体执行结束后，再对while后的条件表达式进行求值判断，
			如果结果为true， 则会继续执行循环体，每次执行循环体后都会进行一次求值判断
			如果结果为false，则循环终止
注：while循环和do...while循环功能类似
	不同的是while循环是先判断后执行循环体
	而do...while循环是先执行循环体后判断
	do...while循环保证循环至少执行一次，而while不能
三十、for循环：
	1. 在for循环中，为我们提供了专门的位置来放置三个表达式 
		①初始化表达式
		②条件表达式
		③更新表达式
	2. 语法：
		for(初始化表达式;条件表达式;更新表达式){
			循环体;
		}
	3. for循环的执行流程
		①执行初始化表达式
		②执行条件表达式
			如果条件表达式为true，则执行循环体
			如果条件表达式为false，则终止循环
		③如果如果条件表达式为true，则执行循环体完毕后，执行更新表达式并返回步骤②
	4. for循环的三个部分可以省略，也可以写在三个部分之外
		-举例：
			var i = 0;
			for(;i < 10;){
				alert(i++);
			}
		-死循环：
			for(;;){
				alert("hello")
			}
三十一、break与continue
	1. break与continue关键字可任意用于switch语句或者循环语句，不能再单独的if语句中使用break与continue。
	2. break：
		①brea关键字会立即终止离他最近的循环
		②可以为循环语句创建一个label，来标识当前循环
			-格式：label：循环语句
		③使用break语句时，后面可以添加一个label标签，可以终止指定的循环。
	3. continue：
		①continue关键字可以用于跳过当前循环语句，并且会对离他最近的循环语句起作用
		②可以为循环语句创建一个label，来标识当前循环
			-格式：label：循环语句
		③使用continue语句时，后面可以添加一个label标签，可以跳过指定循环




			
	
	
	
	
	
	
	