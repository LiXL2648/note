一、软件国际化（i18n）
	1. 概述：
		①软件的本地化：一个软件在某个国家或者地区使用时，采用该国家或地区的语言、数字、货币、日期等习惯
		②软件的国际化：软件开发时，让他能支持多个国家和地区的本地化应用。使得应用软件能够适应多个地区的语言和风俗习惯。
		③随用户区域信息而变化的数据称为本地信息敏感数据。例如：数字，货币等数据
		④应用程序的国际化就是在应用软件的设计阶段，是软件能够支持过个国家和地区的用户和使用习惯
		⑤国际化右称为i18n: internationalization
	2. 软件国际化的特征：一个国际化的应用软件应有下面的特殊：
		①对于程序中的本地信息敏感的数据（日期，货币等）能根据当前所在的国家或地区的文化习惯进行显示
		②对于文本元素（错误提示信息，状态信息等）不是直接写在程序中，而是存储在应用程序外部的资源文件中，在应用程序中通过程序代码来动态获取这些数据
		③无需修改和重新编译程序就能支持新的国家或地区的用户使用
	3. Java国际化解决方案
		①本文信息不能硬编码在程序代码中，而是需要将它们从应用程序中分离出来。在软件运行时根据本地信息读取相应的文本内容进行显示
		②数字，货币，时间，日期等本地敏感数据可以根据在程序运行时动态产生，所以无法像文字一样简单地将它们从应用程序中分离出来，
		而需要特殊处理。Java中提供了解决这些问题的API类（位于java.util包和java.text包中）
二、Locale类
	1. Locale实例对象代表一个特定的地理，政治或文化上的区域
	2. 一个Locale对象本身不会验证它代表的语言和地区信息是否正确，只是向本地敏感的类提供本地信息，与国际化相关的格式化和解析任务
	由本地敏感的类（若JDK中某个类在运行时需要根据Locale对象来调整其功能，这个类称之为本地敏感类）去完成
	3. 创建Locale对象
		①在WEB应用中可以通过request.getLocale()获取
		②JDK中提供了很多常量，可以通过Locale来获取代表地区的的Locale对象
		③也可以通过new Locale(String language, String countCode)来获取Locale对象
		④代码实例：
			<%= request.getLocale() %>
			
			Locale locale = Locale.CHINA;
		
			System.out.println(locale.getDisplayCountry());
			System.out.println(locale.getLanguage());
			
			locale = new Locale("en", "US");
			
			System.out.println(locale.getDisplayCountry());
			System.out.println(locale.getLanguage());
三、DateFormat类
	1. DateFormat类可以将一个日期/时间对象格式化为表示某个国家地区的日期/时间字符串。也可以将表示某个本地的日期/时间的字符串解析为相应的日期/时间对象
	2. DateFormat类定义了一些用于描述日期/时间的显示模式的int型的常量，包括FULL，LONG，MEDIUM，DEFAULT，SHORT，这些常量用于描述表示日期/时间字符串的长度
	这些常量说明表示的日期/时间的字符的长度。这些常量说明表示的日期/时间的确切格式取决于具体的国家和地区
	3. DateFormat类的使用过程
		①获取DateFormat类的对象
		②DateFormat对象通常不是线程安全的，每个线程都应创建自己的DateFormat类的实例对象
		③DateFormat对象的方法：
			A. format：将日期/时间对象格式化为符合某个地区环境习惯地字符串
			B. parse： 将符合某个本地环境习惯地日期/时间字符串解析为日期/时间对象
	4. 创建DateFormat对象：格式化日期的工具
		①DateFormat本身是一个抽象类
		②若通过DateFormat把一个Date对象转换为一个字符串，则可以通过DateFormat的工厂方法来获取DateFormat对象
			A. 可以获取只格式化Date的DateFormat对象：getDateInstance(int style, Locale aLocale);
			B. 可以获取只格式化Time的DateFormat对象：getTimeInstance(int style, Locale aLocale);
			C. 可以获取格式化Date和Time的DateFormat对象：getDateTimeInstance(int style, int style, Locale aLocale);
			D. 其中style可以取值为：DateFormat的常量：SHORT、MEDIUM、LONG、FULL
			E. Local则为代表国家地区的Locale
			F. 通过DateFormat的formate方法将日期格式化为代表时间的字符串
			G. 代码实例：
				DateFormat dateFormatForDate = DateFormat.getDateInstance(DateFormat.MEDIUM, locale);
				DateFormat dateFormatForTime = DateFormat.getTimeInstance(DateFormat.MEDIUM, locale);
				
				DateFormat dateFormatSHORT = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);
				DateFormat dateFormatMEDIUM = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, locale);
				DateFormat dateFormatLONG = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
				DateFormat dateFormatFULL = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, locale);
				
				2019-2-24
				23:55:14
				19-2-24 下午11:55
				2019-2-24 23:55:14
				2019年2月24日 下午11时55分14秒
				2019年2月24日 星期日 下午11时55分14秒 CST
		
		③将一个代表时间的字符串解析为一个时间对象：
			A. 创建DateFormat抽象类的子类SimpleDateFormat子类的对象
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			B. 调用DateFormat的parse()方法来解析字符串。
			C. 代码实例：
				String dateStr = "1996-05-04 12:12:12";
				DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = dateFormat.parse(dateStr);
四、Numberformate类：
	1. Numberformate类可以将一个数值格式化为符合某个国家地区习惯地数值字符串，
	也可以将符合某个国家地区习惯的数值字符串解析为对应的数值
	2. Numberformate类的方法：
		①formate方法：讲一个数值格式化为符合某个国家地区习惯地数值字符串
		②parse方法：符合某个国家地区习惯地数值字符串解析为对应的数值
	3. 获取Numberformate类的对象
		①通过工厂方法获取Numberformate类的对象
			A. NumberFormat.getNumberInstance(inLocale)：仅格式化为数字的字符串
			B. NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(inLocale)：仅格式化为货币的字符串
		②通过forma()方法进行格式化
		③通过parse()方法把一个数值字符串解析为一个Number类型
		④实例代码：
			Locale inLocale = Locale.FRANCE;
			double d = 123456789.123d;
			NumberFormat numberFormat = NumberFormat.getNumberInstance(inLocale);
			String numberStr = numberFormat.format(d);
			System.out.println(numberStr);
			
			NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(inLocale);
			numberStr = currencyFormat.format(d);
			System.out.println(numberStr);
			
			numberStr = "123 456 789,123";
			d = (double) numberFormat.parse(numberStr);
			System.out.println(d);
			
			numberStr = "123 456 789,12 €";
			d = (double) currencyFormat.parse(numberStr);
			System.out.println(d);

			123 456 789,123
			123 456 789,12 €
			1.23456789123E8
			1.2345678912E8
五、MessageFormate类：
	1. MessageFormate类提供了一种参数替换模式字符串中的占位符的方式，它将根据字符串中包含占位符产生一系列的格式化对象
	然后会根据这些格式化对象对参数进行格式化，并用格式化后的结果字符串体寒模式字符串中相应的占位符
	2. 模式字符串与占位符
		①模式字符串：On {0}, {1} destroyed {2} houses and caused{3} of damage.
		②对模式字符串进行格式化操作时，需要采取数组的方式提供模式字符串中的每个占位符所对应的参数
		③占位符有以下三种方式
			A. {argumentIndex}：0-9之间的数字，表示要格式化对象数据在参数数组中的索引号
			B. {argumentIndex,formateType}: 参数要格式化类型
			C. {argumentIndex,formateType, formatStyle}: 与指定的格式化类型对应的模式，它的值必须是与相应的格式化类型
			匹配的合法模式或表示合法模式的字符串
	3. 格式化模式字符串
		①模式字符串：String str = "Date: {0}, Salary: {1}";
		②通过MessageFormate类的静态方法format方法进行格式化：MessageFormat.format(str, dateStr, salaStr);
		③format方法可以传递可变参数，该参数可以直接传递Date与Number，也可以通过DateFormat类与NumberFormate类进行格式化后进行传递
		④该方法的不足之处是模式字符串的非占位符没有进行国际化
	4. 实例代码：
		String str = "Date: {0}, Salary: {1}";
		Locale aLocale = Locale.CHINA;
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM, aLocale);
		String dateStr = dateFormat.format(date);
		
		double salary = 12345.67d;
		NumberFormat numberFormat = NumberFormat.getCurrencyInstance(aLocale);
		String salaStr = numberFormat.format(salary);
		
		str = MessageFormat.format(str, dateStr, salaStr);
		System.out.println(str);
六、ResourceBundle类：
	1. ResourceBundle类用于描述一个资源包，一个资源包用于包含一组与本地环境相关的对象，可以从一个资源包中获取特定于本地环境相关的对象。
	对于不同的本地环境，可以有不同的ResourceBundle对象与之关联，关联的ResourceBundle对象中包含与该本地环境下专有的对象
	2.资源包简介
		①在设计一个国际化应用时，应该把程序显示的文本内容从源程序中分离出来，放在独立的资源文件中，并针对不同的本地环境编写不用的资源文件
		这些资源文件被称之为应用程序的资源包
		②应用程序在运行时，将从与用户的本地环境相应的资源网文件中读取名称相应的值的内容，由于同一个名称项在各个资源文件对应的值内容是随本地
		环境信息改变而改变的，这样就实现了程序的静态文本内容国际化
		③当要为应用程序添加某个新的本地支持时，只需要编写一个适合本地环境的资源文件即可，不用修改源程序的代码
		④一个应用程序可以有多个资源包，一个资源包中的每个资源文件都拥有共同的基名。除了基名外，每个资源文件的名称还应有标识其本地信息的附加部分。
		例如：一个资源包的基名是“myproperties”，则该资源包中与中文环境相对应的资源文件为“myproperties_zh.properties”
		⑤一般而言，每个资源文件包都有一个默认的资源文件，默认的资源文件不带标识本地信息的附加部分。若应用程序在资源包中找不到某个本地环境
		匹配的资源文件，最后将选择该资源包中的那个默认资源文件。
	3. ResourceBundle资源包对象
		①在类的路径下需要有对应的资源文件：baseName.properties，其中baseName是基名
		②可以使用 baseName_language_CountryCode.properties 来添加不同国家或者地区的资源文件，比如：i18n_zh_CN.properties
		③要求所有基名的相同的资源文件的key必须完全相同
		④可以在dos命令行中使用 native2ascii 命令得到一个中文对应的一个asc码，eclipse内置了该功能
		⑤调用ResourceBundle.getBundle(baseName, locale)来获取ResourceBundle对象
		⑥可以调用ResourceBundle的getString(String key)来获取资源文件的value字符串的值
		⑦可以根据DateFormat、NumberFormate、MessageFormate即可实现国际化
	4.  实例代码：
		Locale locale = Locale.US;
		
		String str = "{0}: {1}, {2}: {3}";
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM, locale);
		String dateStr = dateFormat.format(date);
		
		double salary = 12345.67d;
		NumberFormat numberFormat = NumberFormat.getCurrencyInstance(locale);
		String salaStr = numberFormat.format(salary);
		
		ResourceBundle bundle = ResourceBundle.getBundle("i18n", locale);
		String dateKey = bundle.getString("date");
		String salaKey = bundle.getString("salary");
		
		str = MessageFormat.format(str, dateKey, dateStr, salaKey, salaStr);
		System.out.println(str);
		
		//Date: Feb 25, 2019, Salary: $12,345.67
		//日期: 2019-2-25, 工资: ￥12,345.67
七、WEB应用程序国家化：
	1. 获取web应用中的本地信息 		
		①要实现web应用国际化，首先要获得客户端浏览器的本地信息
		②在Servlet程序中，调用HttpServletRequest对象的方法获得代表客户端浏览器本地信息的Locale对象：
			A. getLocale(): 返回代表客户端浏览器的首选本地信息的Locale对象
			B. getLocales():返回一个包含客户端支持本地信息的Locale对象的Enumeration对象，这些Locale对象按照
			客户端支持的本地的所有本地信息的优先级在集合中依次排列
	2. 如何实现“中文”、“英文”的切换
		①提供两个切换“中文”“英文”的超链接：
			<a href="i18n.jsp?language=zh">${requestScope.country1 }</a>
			<a href="i18n.jsp?language=en">${requestScope.country2 }</a>
		②获取超链接的URL地址附带的属性，并存储在request中
			<c:if test="${param.language != null }">
				<c:set value="${param.language }" var="language" scope="request"></c:set>
			</c:if>
		③判断属性的值，创建代表本地信息的Locale对象，存储在session中
			<c:if test="${requestScope.language != null }">
				<c:choose>
					<c:when test="${requestScope.language == 'zh' }">
						<c:set value="<%= Locale.CHINA %>" var="locale" scope="session"></c:set>
					</c:when>
					<c:when test="${requestScope.language == 'en' }">
						<c:set value="<%= Locale.US %>"  var="locale" scope="session"></c:set>
					</c:when>
					
				</c:choose>
			</c:if>
		④判断session中是否存储Locale对象，若有，则代表是通过点击超链接切换而得，
		若无则默认Locale对象为客户端浏览器的首先语言代表的国家或者地区
			<c:if test="${sessionScope.locale != null }">
				<fmt:setLocale value="${sessionScope.locale }"/>
			</c:if>
		⑤使用国际化标签<fmt>进行国际化操作：才标签的底层实现原理即是服务端国家化的实现过程
			A. 创建Number属性
				<c:set value="12345.67" var="salary" scope="request"></c:set>
			B. 创建Date属性
				<%-- <jsp:useBean id="date" type="java.io.Serializable" beanName="java.util.Date" scope="request"></jsp:useBean>--%>
				<jsp:useBean id="date" class="java.util.Date" scope="request"></jsp:useBean>
			C. 方式一：使用<fmt:bundle basename=""></fmt:bundle>标签，获取资源文件的属性值与国际化Date、Number的标签放在其标签体中
				<fmt:bundle basename="i18n">
					<fmt:message key="date"></fmt:message>
					<fmt:formatDate value="${requestScope.date }"/>&nbsp;
					<fmt:message key="salary"></fmt:message>
					<fmt:formatNumber value="${requestScope.salary }" type="currency"></fmt:formatNumber>
				</fmt:bundle>
			D. 方式二：使用<fmt:setBundle basename=""/>标签，建议使用
				<fmt:setBundle basename="i18n"/>
				<fmt:message key="date"></fmt:message>
				<fmt:formatDate value="${requestScope.date }" dateStyle="LONG"/>&nbsp;
				<fmt:message key="salary"></fmt:message>
				<fmt:formatNumber value="${requestScope.salary }" type="currency"></fmt:formatNumber>
				
				<fmt:message key="country1" var="country1" scope="request"></fmt:message>
				<fmt:message key="country2" var="country2" scope="request"></fmt:message>
			E. 属性：
				a. <fmt:setBundle>标签basename：资源文件的基名
				b. <fmt:message>标签key：资源文件的键值
				c. <fmt:formatDate>标签value：国际化的日期
				d. <fmt:formatNumber>标签value：国际化的数值
			F. 在JSP中使用标签创建日期时间对象：
				<%-- <jsp:useBean id="date" type="java.io.Serializable" beanName="java.util.Date" scope="request"></jsp:useBean>--%>
				<jsp:useBean id="date" class="java.util.Date" scope="request"></jsp:useBean>
				
