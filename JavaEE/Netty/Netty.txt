一、Netty 概述
	1. 原生NIO存在的问题
		① NIO 的类库和 API 繁杂，使用麻烦：需要熟练掌握 Selector、ServerSocketChannel、SocketChannel、ByteBuffer 等。
		② 需要具备其他的额外技能：要熟悉 Java 多线程编程，因为 NIO 编程涉及到 Reactor 模式，你必须对多线程和网络编程非常熟悉，才能编写出高质量的 NIO 程序。
		③ 开发工作量和难度都非常大：例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常流的处理等等。
		④ JDK NIO 的 Bug：例如臭名昭著的 Epoll Bug，它会导致 Selector 空轮询，最终导致 CPU 100%。直到 JDK 1.7 版本该问题仍旧存在，没有被根本解决。
	2. Netty官网说明
		① 官网：https://netty.io/
		② Netty 是由 JBOSS 提供的一个 Java 开源框架。Netty 提供异步的、基于事件驱动的网络应用程序框架，用以快速开发高性能、高可靠性的网络 IO 程序
		③ Netty 可以帮助你快速、简单的开发出一个网络应用，相当于简化和流程化了 NIO 的开发过程
		④ Netty 是目前最流行的 NIO 框架，Netty 在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，知名的 Elasticsearch 、Dubbo 框架
		内部都采用了 Netty。
	3. Netty的优点：Netty 对 JDK 自带的 NIO 的 API 进行了封装，解决了上述问题。
		① 设计优雅：适用于各种传输类型的统一 API 阻塞和非阻塞 Socket；基于灵活且可扩展的事件模型，可以清晰地分离关注点；高度可定制的线程模型 - 单线程，一个
		或多个线程池
		② 使用方便：详细记录的 Javadoc，用户指南和示例；没有其他依赖项，JDK 5（Netty3.x）或 6（Netty 4.x）就足够了。
		③ 高性能、吞吐量更高：延迟更低；减少资源消耗；最小化不必要的内存复制。
		④ 安全：完整的 SSL/TLS 和 StartTLS 支持。
		⑤ 社区活跃、不断更新：社区活跃，版本迭代周期短，发现的 Bug 可以被及时修复，同时，更多的新功能会被加入
	4. Netty版本说明
		① netty版本分为 netty3.x 和 netty4.x、netty5.x
		② 因为Netty5出现重大bug，已经被官网废弃了，目前推荐使用的是Netty4.x的稳定版本
		③ 目前在官网可下载的版本 netty3.x netty4.0.x 和 netty4.1.x
		④ 在本套课程中，使用的是 Netty4.1.x 版本
		⑤ netty 下载地址： https://bintray.com/netty/downloads/netty/
二、Netty 高性能架构设计
	1. 线程模型基本介绍
		① 不同的线程模式，对程序的性能有很大影响，为了搞清Netty 线程模式，我们来系统的讲解下 各个线程模式， 最后看看Netty 线程模型有什么优越性.
		② 目前存在的线程模型有：
			A. 传统阻塞 I/O 服务模型
			B. Reactor 模式
		③ 根据 Reactor 的数量和处理资源池线程的数量不同，有 3 种典型的实现
			A. 单 Reactor 单线程；
			B. 单 Reactor 多线程；
			C. 主从 Reactor 多线程
		④ Netty 线程模式(Netty 主要基于主从 Reactor 多线程模型做了一定的改进，其中主从Reactor 多线程模型有多个 Reactor)
	2. 传统阻塞 I/O 服务模型
		① 工作原理图			
								+-------------------------------------------------------+
								|		 应用程序										|
								|	+-----------------------------------------------+	|
								|	|	 处理线程：线程								|	|
								|	|  +-----------------------------------------+	|	|
				对象			|	|  | Handler：对象					 		 |	|	|
			+--------+			|	|  | +-------+	 +----------+	+------+	 |	|	|
			| client | ---------+---+> | |  read |	 | 业务处理 |	| send | API |	|	|
			+--------+			|	|  | +-------+	 +----------+	+------+	 |	|	|
								|	|  +-----------------------------------------+	|	|
								|	+-----------------------------------------------+	|
								|														|
								|	+-----------------------------------------------+	|
								|	|	 处理线程：线程								|	|
								|	|  +-----------------------------------------+	|	|
				对象			|	|  | Handler：对象					 		 |	|	|
			+--------+			|	|  | +-------+	 +----------+	+------+	 |	|	|
			| client | ---------+---+> | |  read |	 | 业务处理 |	| send | API |	|	|
			+--------+			|	|  | +-------+	 +----------+	+------+	 |	|	|
								|	|  +-----------------------------------------+	|	|
								|	+-----------------------------------------------+	|
								|														|
								|	+-----------------------------------------------+	|
								|	|	 处理线程：线程								|	|
								|	|  +-----------------------------------------+	|	|
				对象			|	|  | Handler：对象					 		 |	|	|
			+--------+			|	|  | +-------+	 +----------+	+------+	 |	|	|
			| client | ---------+---+> | |  read |	 | 业务处理 |	| send | API |	|	|
			+--------+			|	|  | +-------+	 +----------+	+------+	 |	|	|
								|	|  +-----------------------------------------+	|	|
								|	+-----------------------------------------------+	|
								+-------------------------------------------------------+
		② 模型特点
			A. 采用阻塞IO模式获取输入的数据
			B. 每个连接都需要独立的线程完成数据的输入，业务处理，数据返回
		③ 问题分析
			A. 当并发数很大，就会创建大量的线程，占用很大系统资源
			B. 连接创建后，如果当前线程暂时没有数据可读，该线程会阻塞在read 操作，造成线程资源浪费
	3. Reactor 模式，
		① 针对传统阻塞 I/O 服务模型的 2 个缺点，解决方案：
			A. 基于 I/O 复用模型：多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系
			统通知应用程序，线程从阻塞状态返回，开始进行业务处理。Reactor 对应的叫法: 反应器模式、分发者模式(Dispatcher)、通知者模式(notifier)
			B. 基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务。
		② I/O 复用结合线程池，就是 Reactor 模式基本设计思想，
			A. Reactor 模式示意图：
											+-----------------------------------------------------------------------------------+
											|		  应用程序																	|
											|												   +---------------------------+	|
											|												   |	  	 处理线程		   |	|
				+--------+ 请求Event		|												   |	+-----------------+	   |	|
				| client |----------+		|												   |	| 	EventHandler  |	   |	|
				+--------+			|		|										  Dispatch |	| +-------------+ |	   |	|
									|		|										+----------+--> | | eventHandle | |    |	|
									|		|										|		   |	| +-------------+ |    |	|
									|		|										|		   | 	+-----------------+    |	|
									|		|										|		   +---------------------------+	|
									|		|										|											|
									|		|										|	       +---------------------------+	|
									|		|										|	       |	  	 处理线程		   |	|
									|		|		+-------------------+			|	       |	+-----------------+	   |	|
									|		|		|  ServiceHandler   |			|	       |	| 	EventHandler  |	   |	|					
				+--------+ 请求Event|		|		| +---------------+ |			| Dispatch |	| +-------------+ |	   |	|
				| client | ---------+-------+-----> | | eventDispatch | | ----------+----------+--> | | eventHandle | |    |	|
				+--------+			|		|		| +---------------+ |			|	       |	| +-------------+ |    |	|
									|		|		+-------------------+			|	       | 	+-----------------+    |	|
									|		|										|	       +---------------------------+	|
									|		|										|											|
									|		|										|		   +---------------------------+	|
									|		|										|		   |	  	 处理线程		   |	|
									|		|										|		   |	+-----------------+	   |	|
									|		|										|		   |	| 	EventHandler  |	   |	|
									|		|										| Dispatch |	| +-------------+ |	   |	|
				+--------+ 请求Event|		|										+----------+--> | | eventHandle | |    |	|
				| client |----------+		|												   |	| +-------------+ |    |	|
				+--------+-					|												   | 	+-----------------+    |	|
											|												   +---------------------------+	|
											+-----------------------------------------------------------------------------------+
			B. 说明
				a. Reactor 模式，通过一个或多个输入同时传递给服务处理器的模式(基于事件驱动)
				b. 服务器端程序处理传入的多个请求,并将它们同步分派到相应的处理线程，因此Reactor模式也叫Dispatcher模式
				c. Reactor 模式使用IO复用监听事件，收到事件后，分发给某个线程(进程), 这点就是网络服务器高并发处理关键
		③ Reactor 模式中 核心组成
			A. Reactor：Reactor 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对 IO 事件做出反应。 它就像公司的电话接线员，它接听来自客
			户的电话并将线路转移到适当的联系人；
			B. Handlers：处理程序执行 I/O 事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。Reactor 通过调度适当的处理程序来响应 I/O 事件，处
			理程序执行非阻塞操作。
		④ Reactor 模式分类：根据 Reactor 的数量和处理资源池线程的数量不同，有 3 种典型的实现
			A. 单 Reactor 单线程
			B. 单 Reactor 多线程
			C. 主从 Reactor 多线程
		⑤ 单 Reactor 单线程
			A. 工作原理示意图：		
										+-----------------------------------------------------------------------+
										|	应用程序															|
										|	+---------------------------------------------------------------+	|
										|	|			Reactor 单线程										|	|
										|	|			+--------------------------------+					|	|
										|	|			|			 Reactor			 |					|	|
				+--------+	  请求 		|	|			| +--------+		+----------+ |					|	|
				| client | ---------+---+---+---------> | | select |		| dispatch | |					|	|
				+--------+			|	|	|			| +--------+		+----------+ |					|	|
									|	|	|			+--------------------------------+					|	|
									|	|	|							|									|	|
									|	|	|				建立连接	|	 处理请求						|	|	
				+--------+	  请求	|	|	|			+---------------+----------------+					|	|
				| client | ---------+	|	|			|								 |					|	|
				+--------+			|	|	|			↓								 ↓					|	|
									|	|	|	 +------------+				+------------------------+	 	|	|
									|	|	|	 |	Acceptor  |				|		Handler			 |		|	|
									|	|	|	 | +--------+ |				| +------+	+----------+ |		|	|
				+--------+	  请求	|	|	|	 | | accept | |				| | read |	| 业务处理 | |		|	|
				| client |----------+	|	|	 | +--------+ |				| +------+	+----------+ |		|	|
				+--------+				|	|	 +------------+				| +------+				 |		|	|
										|	|								| | send |				 |		|	|
										|	|								| +------+				 |		|	|
										|	|								+------------------------+		|	|
										|	+---------------------------------------------------------------+	|
										+-----------------------------------------------------------------------+
			B. 方案说明
				a. Select 是前面 I/O 复用模型介绍的标准网络编程 API，可以实现应用程序通过一个阻塞对象监听多路连接请求
				b. Reactor 对象通过 Select 监控客户端请求事件，收到事件后通过 Dispatch 进行分发
				c. 如果是建立连接请求事件，则由 Acceptor 通过 Accept 处理连接请求，然后创建一个 Handler 对象处理连接完成后的后续业务处理
				d. 如果不是建立连接事件，则 Reactor 会分发调用连接对应的 Handler 来响应
				e. Handler 会完成 Read→业务处理→Send 的完整业务流程
			C. 结合实例：服务器端用一个线程通过多路复用搞定所有的 IO 操作（包括连接，读、写等），编码简单，清晰明了，但是如果客户端连接数量较多，将无法支撑，前面的
			NIO 群聊系统案例就属于这种模型。
			D. 方案优缺点分析：
				a. 优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成
				b. 缺点：性能问题，只有一个线程，无法完全发挥多核 CPU 的性能。Handler 在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈。
				可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障
				c. 使用场景：客户端的数量有限，业务处理非常快速，比如 Redis在业务处理的时间复杂度 O(1) 的情况
		⑥ 单Reactor多线程
			A. 工作原理示意图
										+-------------------------------------------------------------------------------------------------------+
										|	应用程序																							|
										|	+-----------------------------------------------------------------------------------------------+	|
										|	|			Reactor 主线程																		|	|
										|	|			+--------------------------------+													|	|
										|	|			|			 Reactor			 |													|	|
				+--------+	  请求 		|	|			| +--------+		+----------+ |													|	|
				| client | ---------+---+---+---------> | | select |		| dispatch | |													|	|
				+--------+			|	|	|			| +--------+		+----------+ |													|	|
									|	|	|			+--------------------------------+													|	|
									|	|	|							|																	|	|
									|	|	|				建立连接	|	 处理请求				 处理请求								|	|	
				+--------+	  请求	|	|	|			+---------------+----------------+----------------------------------+				|	|
				| client | ---------+	|	|			|								 |									|				|	|
				+--------+			|	|	|			↓								 ↓									↓				|	|
									|	|	|	 +------------+				+------------------------+			+------------------------+	|	|
									|	|	|	 |	Acceptor  |				|		Handler			 |			|		Handler			 |	|	|
									|	|	|	 | +--------+ |				| +------+	+----------+ |			| +------+	+----------+ |	|	|
				+--------+	  请求	|	|	|	 | | accept | |				| | read |	| 业务处理 | |			| | read |	| 业务处理 | |	|	|
				| client |----------+	|	|	 | +--------+ |				| +------+	+----------+ |			| +------+	+----------+ |	|	|
				+--------+				|	|	 +------------+				+------------------------+			+------------------------+	|	|
										|	|											|									|				|	|
										|	+-------------------------------------------|-----------------------------------+---------------+	|		
										|												↓									↓					|
										|								+-------------------------------------------------------------------+	|
										|								|	Worker 线程池													|	|
										|								|	+------------------------+			+------------------------+	|	|
										|								|	|	   Worker 线程1		 |			|	   Worker 线程2		 |	|	|
										|								|	|	+----------------+	 |			|	+----------------+	 |	|	|
										|								|	|	|    Worker1 	 |	 |			|	|    Worker2 	 |	 |	|	|
										|								|	|	|  +----------+	 |	 |			|	|  +----------+	 |	 |	|	|
										|								|	|	|  | 业务处理 |	 |	 |			|	|  | 业务处理 |	 |	 |	|	|
										|								|	|	|  +----------+	 |	 |			|	|  +----------+	 |	 |	|	|
										|								|	|	+----------------+	 |			|	+----------------+	 |	|	|
										|								|	+------------------------+			+------------------------+	|	|
										|								+-------------------------------------------------------------------+	|
										+-------------------------------------------------------------------------------------------------------+						
			B. 方案说明
				a. Reactor 对象通过select 监控客户端请求事件, 收到事件后，通过dispatch进行分发
				b. 如果建立连接请求, 则右Acceptor 通过accept 处理连接请求, 然后创建一个Handler对象处理完成连接后的各种事件
				c. 如果不是连接请求，则由reactor分发调用连接对应的handler 来处理
				d. handler 只负责响应事件，不做具体的业务处理,通过read 读取数据后，会分发给后面的worker线程池的某个线程处理业务
				e. worker 线程池会分配独立线程完成真正的业务，并将结果返回给handler
				f. handler收到响应后，通过 send 将结果返回给 client
			C. 方案优缺点分析：
				a. 优点：可以充分的利用多核cpu 的处理能力
				b. 缺点：多线程数据共享和访问比较复杂， reactor 处理所有的事件的监听和响应，在单线程运行， 在高并发场景容易出现性能瓶颈.
		⑦ 主从 Reactor 多线程
			A. 工作原理示意图：针对单 Reactor 多线程模型中，Reactor 在单线程中运行，高并发场景下容易成为性能瓶颈，可以让Reactor 在多线程中运行
										+-----------------------------------------------------------------------------------+
										|	应用程序																		|
										|	+-------------------------------------------------------------------------+		|
										|	|		Reactor 主线程													  |		|
										|	|		+---------------------------------+			+----------------+	  |     |
										|	|		|			MainReactor			  |			|    Acceptor	 |	  |		|
				----------	  请求 		|	|		| +--------+		+----------+  |			| +------------+ |	  |		|
				| client | ---------+---+---+-----> | | select |		| dispatch |  | ------> | |   accept   | |    |		|
				----------			|	|	|		| +--------+		+----------+  |			| +------------+ |	  |		|
									|	|	|		+---------------------------------+			+----------------+	  |		|
									|	|	+------------------------+------------------------------------------------+		|
									|	|							 |														|
									|	|	+------------------------+------------------------------------------------+		|
				----------	  请求	|	|	|		Reactor 子线程	 ↓												  |		|
				| client | ---------+	|	|		+----------------------------------+							  |		|
				----------			|	|	|		|			 SubReactor			   |    						  |		|
									|	|	|		| +--------+		  +----------+ |							  |		|
									|	|	|		| | select |		  | dispatch | |							  |		|
									|	|	|		| +--------+		  +----------+ |							  |		|
									|	|	|		+----------------------------------+							  |		|
				----------	  请求	|	|	|						  |												  |		|
				| client |----------+	|	|			   处理请求	  |	  处理请求									  |		|	
				----------				|	|			   +----------+-------------+								  |		|
										|	|		       ↓						↓								  |		|
										|	| +-----------------------+	+-----------------------+					  |		|
										|	| |			Handler1	  |	|		Handler2	    |				      |		|
										|	| | +------+ +----------+ | | +------+ +----------+ |					  |		|
										|	| | | read | | 业务处理 | |	| | read | | 业务处理 | |				      |		|
										|	| | +------+ +----------+ |	| +------+ +----------+ |					  |		|
										|	| +-----------------------+ +-----------------------+					  |		|
										|	---------------+------------------------+---------------------------------+		|
										|				   |						|										|
										|	+--------------+------------------------+---------------------------------+		|		
										|	|			   ↓	Worker 线程池		↓								  |		|
										|	| +-----------------------+	 +----------------------+				      |		|
										|	| |	    Worker 线程1	  |	 |	   Worker 线程2		| 					  |		|
										|	| |	  +----------------+  |	 |	+----------------+	| 					  |		|
										|	| |	  |    Worker1 	   |  |	 |	|    Worker2 	 |	| 					  |		|
										|	| |	  |  +----------+  |  |	 |	|  +----------+	 |	| 					  |		|
										|	| |	  |  | 业务处理 |  |  |	 |	|  | 业务处理 |	 |	| 					  |		|
										|	| |	  |  +----------+  |  |	 |	|  +----------+	 |	| 					  |		|
										|	| |	  +----------------+  |	 |  +----------------+  |   				  |		|
										|	| +-----------------------+  +----------------------+					  |		|
										|	+-------------------------------------------------------------------------+		|
										+-----------------------------------------------------------------------------------+	
			B. 方案说明
				a. Reactor 主线程 MainReactor 对象通过 select 监听连接事件，收到事件后，通过Acceptor处理连接事件
				b. 当 Acceptor 处理连接事件后，MainReactor将连接分配给 SubReactor
				c. SubReactor 将连接加入到连接队列进行监听，并创建handler进行各种事件处理
				d. 当有新事件发生时，SubReactor就会调用对应的 Handler 处理
				e. Handler 通过 read 读取数据，分发给后面的 worker 线程进行业务处理，并返回接口
				f. worker 线程池分配独立的 worker 线程进行业务处理，并返回结果
				g. Handler 收到响应结果后，再通过 send 将结果返回 client
				h. Reactor 主线程可以对应多个Reactor子线程，即MainReactor可以关联多个SubReactor
			C. Scalable IO in Java 对 Multiple Reactors 的原理图解：
			D. 方案优缺点说明：
				a. 优点：父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理。父线程与子线程的数据交互简单，
				Reactor 主线程只需要把新连接传给子线程，子线程无需返回数据。
				b. 缺点：编程复杂度较高
			E. 结合实例：这种模型在许多项目中广泛使用，包括 Nginx 主从 Reactor 多进程模型，Memcached 主从多线程，Netty 主从多线程模型的支持
		⑧ Reactor 模式小结
			A. 3 种模式用生活案例来理解
				a. 单 Reactor 单线程，前台接待员和服务员是同一个人，全程为顾客服
				b. 单 Reactor 多线程，1 个前台接待员，多个服务员，接待员只负责接待
				c. 主从 Reactor 多线程，多个前台接待员，多个服务生
			B. Reactor 模式具有如下的优点：
				a. 响应快，不必为单个同步时间所阻塞，虽然 Reactor 本身依然是同步的
				b. 可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销
				c. 扩展性好，可以方便的通过增加 Reactor 实例个数来充分利用 CPU 资源
				d. 复用性好，Reactor 模型本身与具体事件处理逻辑无关，具有很高的复用性
	4. Netty模型
		① 工作原理示意图-详细版
											+-------------------------------------+						+--------------------------------------+
											|			 Boss Group				  |						| 			 Worker Group			   |	
			+--------+						| +---------------------------------+ |						| +----------------------------------+ |
			| Client | ---------+---------> | | 		NioEventLoop 		    | |						| |			NioEventLoop			 | |
			+--------+			|			| |	 +----------+	+-----------+	| |						| |	  +----------+	 +-----------+	 | |
								|			| |	 | Selector |	| TaskQueue |	| |						| |	  | Selector |	 | TaskQueue | 	 | |
								|			| |	 -+----------+	+-----------+	| |						| |	  +----------+	 +-----------+	 | |
								|			| +---------------+-----------------+ |						| +----------------------------------+ |
			+--------+			|			+-----------------+-------------------+						|			    ......				   |
			| Client | ---------+							  |											| +----------------------------------+ |
			+--------+			|							  |											| |			NioEventLoop			 | |
								|						   	  | Accept									| |	  +----------+	 +-----------+	 | |
								|						 +--------+								+-------+>|	  | Selector |	 | TaskQueue | 	 | |
								|						 | Step 1 |   -------+					|		| |	  +----------+	 +-----------+	 | |
			+--------+			|			     +------ | select |--------+ |					|		| +-----------------+----------------+ |
			| Client | ---------+			     |	     +--------+        | |					|		+-------------------+------------------+
			+--------+							 |						   | ↓					|							| 
												 |		NioEventLoop       |					| 注册channel				↓ Read/write
									      +-------------+	      +-------------------+			| 到 Selector			+--------+
									      |   Step 3 	|	      |      Step 2       |			|					 	| Step 1 |   -------+
									      | runAllTasks | ------- | processSelectKeys |---------+				+-------| select |--------+ |
									      +-------------+	      +-------------------+							|		+--------+		  | |
																												|						  | ↓
																												|		NioEventLoop	  |
																										 +-------------+	      +-------------------+
																										 |   Step 3    |	      |      Step 2       |
																										 | runAllTasks | -------- | processSelectKeys |
																										 +-------------+	      +-------------------+
																																			|
																																			|
																																			↓
																																   +--------------------+
																																   |	  Pipeline		|
																																   | +----------------+ |
																																   | | ChannelHandler | |
																																   | +----------------+ |
																																   |	  ......		|
																																   | +----------------+ |
																																   | | ChannelHandler | |
																																   | +----------------+ |
																																   +--------------------+
		② 方案说明
			A. Netty 抽象出两组线程池 BossGroup专门负责接收客户端的连接，WorkGroup专门负责网络读写
			B. BossGroup和WorkGroup类型都是NioEventLoopGroup
			C. NioEventLoopGroup相当于一个事件循环组，这个组中包含多个事件循环，每一个事件循环是NioEventLoop
			D. NioEventLoop 表示一个不断循环的执行处理任务的线程，每个 NioEventLoop 都有一个 selector，用于监听绑定在其上的 socket 的网络通信
			E. NioEventLoopGroup 可以有多个线程，即可以含有多个 NioEventLoop
			F. 每个 Boss NioEventLoop执行步骤有三步
				a. 轮询 accept 事件
				b. 处理 accept 事件，与 client 建立连接，生成 NioSocketChannel，并将其注册到某个 worker NioEventLoop 的 selector上
				c. 处理任务队列的任务，即 runAllTasks
			G. 每个 Worker NioEventLoop 循环执行的步骤
				a. 轮询 read/write 事件
				b. 处理 I/O 事件，即 read/write 事件，在对应NioSocketChannel 处理
				c. 处理任务队列的任务，即 runAllTasks
			H. 每个Worker NioEventLoop 处理业务时，会使用 pipeline（管道），pipeline 中包含了 channel，即通过 pipeline 可以获取对应的通道，管道中维护了
			很多处理器
		③ Netty快速入门实例-TCP服务
			A. 实例要求：使用IDEA 创建Netty项目
			B. Netty 服务器在 2648 端口监听，客户端能发送消息给服务器 "hello, 服务器~"
			C. 服务器可以回复消息给客户端 "hello, 客户端~"	
			D. 目的：对Netty 线程模型 有一个初步认识, 便于理解Netty 模型理论
			E. 示例代码：
				a. NettyServer
					import io.netty.bootstrap.ServerBootstrap;
					import io.netty.channel.ChannelFuture;
					import io.netty.channel.ChannelInitializer;
					import io.netty.channel.ChannelOption;
					import io.netty.channel.nio.NioEventLoopGroup;
					import io.netty.channel.socket.SocketChannel;
					import io.netty.channel.socket.nio.NioServerSocketChannel;

					public class NettyServer {

						public static void main(String[] args) {

							// 创建 bossGroup 和 workerGroup
							// bossGroup只处理连接请求，真正和客户端业务处理，会交给 workerGroup 完成
							// 两个线程组都是无限循环
							// bossGroup 和 workerGroup 含有的子线程（NioEventLoop）的个数，默认是 cpu 核数 * 2
							NioEventLoopGroup bossGroup = new NioEventLoopGroup();
							NioEventLoopGroup workerGroup = new NioEventLoopGroup();

							try {
								// 创建服务器端的启动对象，配置参数
								ServerBootstrap bootstrap = new ServerBootstrap();

								// 使用链式编程来进行设置
								bootstrap.group(bossGroup, workerGroup) // 设置两个线程组
										.channel(NioServerSocketChannel.class) // 使用 NioSocketChannel 作为服务器的通道实现
										.option(ChannelOption.SO_BACKLOG, 128) // 设置线程队列得到的连接个数
										.childOption(ChannelOption.SO_KEEPALIVE, true) // 设置保持活动连接状态
										.childHandler(new ChannelInitializer<SocketChannel>() {// 给 workerGroup 的 EventLoop对应的管道设置处理器
											// 给管道设置处理器
											@Override
											protected void initChannel(SocketChannel socketChannel) throws Exception {
												socketChannel.pipeline().addLast(new NettyServerHandler()); // 加入自定义处理器
											}
										});
								System.out.println("服务器 is ready ......");

								// 绑定端口并且同步，生成一个ChannelFuture，启动服务器
								ChannelFuture channelFuture = bootstrap.bind(2648).sync();
								// 对关闭通道进行监听
								channelFuture.channel().closeFuture().sync();
							} catch (Exception e) {
								e.printStackTrace();
							} finally {
								bossGroup.shutdownGracefully();
								workerGroup.shutdownGracefully();
							}
						}
					}
				b. NettyServerHandler
					import io.netty.buffer.ByteBuf;
					import io.netty.buffer.Unpooled;
					import io.netty.channel.ChannelHandlerContext;
					import io.netty.channel.ChannelInboundHandlerAdapter;
					import io.netty.util.CharsetUtil;

					// 自定义一个handler，需要继承 netty 规定好的某个 HandlerAdapter（规范）
					public class NettyServerHandler extends ChannelInboundHandlerAdapter {

						// 读取数据（这里可以读取客户端发送的消息）
						// ChannelHandlerContext ctx：上下文对象，含有管道 pipeline，通道 channel以及地址
						// Object msg：就是客户端发送的数据
						@Override
						public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
							System.out.println("server ctx = " + ctx);
							// ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer
							ByteBuf byteBuf = (ByteBuf) msg;
							System.out.println("客户端发送消息是：" + byteBuf.toString(CharsetUtil.UTF_8));
						}

						@Override
						public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {

							// writeAndFlush：write + Flush，将数据写入缓存，并刷新
							// 需要对发送的数据进行编码
							ctx.writeAndFlush(Unpooled.copiedBuffer("hello, 客户端~", CharsetUtil.UTF_8));
						}

						// 处理异常，需要关闭通道
						@Override
						public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
							ctx.close();
						}
					}
				c. NettyClient
					import io.netty.bootstrap.Bootstrap;
					import io.netty.channel.ChannelFuture;
					import io.netty.channel.ChannelInitializer;
					import io.netty.channel.nio.NioEventLoopGroup;
					import io.netty.channel.socket.SocketChannel;
					import io.netty.channel.socket.nio.NioSocketChannel;

					public class NettyClient {

						public static void main(String[] args) {

							// 客户端需要一个事件循环组
							NioEventLoopGroup eventExecutors = new NioEventLoopGroup();
							try {


								// 创建客户端启动对象，使用的是Bootstrap，而不是ServerBootstrap
								Bootstrap bootstrap = new Bootstrap();
								// 设置相关参数
								bootstrap.group(eventExecutors) // 设置线程组
									.channel(NioSocketChannel.class) // 设置客户端通道的实现类（反射）
									.handler(new ChannelInitializer<SocketChannel>() { // 给 事件循环组 的 EventLoop对应的管道设置处理器
										@Override
										protected void initChannel(SocketChannel socketChannel) throws Exception {
											socketChannel.pipeline().addLast(new NettyClientHandler()); // 加入自定义处理器
										}
									});
								System.out.println("服务器 is ready ......");
								// 连接主机和端口并且同步，生成一个ChannelFuture，开启客户端
								ChannelFuture channelFuture = bootstrap.connect("127.0.0.1", 2648).sync();
								// 对关闭通道进行监听
								channelFuture.channel().closeFuture().sync();
							} catch (Exception e) {
								e.printStackTrace();
							} finally {
								eventExecutors.shutdownGracefully();
							}
						}
					}
				d. NettyClientHandler
					import io.netty.buffer.ByteBuf;
					import io.netty.buffer.Unpooled;
					import io.netty.channel.ChannelHandlerContext;
					import io.netty.channel.ChannelInboundHandlerAdapter;
					import io.netty.util.CharsetUtil;

					public class NettyClientHandler extends ChannelInboundHandlerAdapter {

						// 当通道就绪就会触发该方法
						@Override
						public void channelActive(ChannelHandlerContext ctx) throws Exception {
							System.out.println("client ctx = " + ctx);
							ctx.writeAndFlush(Unpooled.copiedBuffer("hello, 服务器~", CharsetUtil.UTF_8));
						}

						@Override
						public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
							ByteBuf byteBuf = (ByteBuf) msg;
							System.out.println("服务端回复的消息是：" + byteBuf.toString(CharsetUtil.UTF_8));
						}

						@Override
						public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
							cause.printStackTrace();
							ctx.close();
						}
					}
		④ 任务队列中的 Task 有 3 种典型使用场景
			A. 用户程序自定义的普通任务
				ctx.channel().eventLoop().execute(() -> {
					try {
						Thread.sleep(10000);
					} catch (Exception e) {
						e.printStackTrace();
					}

					ctx.writeAndFlush(Unpooled.copiedBuffer("1hello, 客户端", CharsetUtil.UTF_8));
				});
			B. 用户自定义定时任务
				ctx.channel().eventLoop().schedule(() -> {
					try {
						Thread.sleep(10000);
					} catch (Exception e) {
						e.printStackTrace();
					}

					ctx.writeAndFlush(Unpooled.copiedBuffer("3hello, 客户端", CharsetUtil.UTF_8));
				}, 5, TimeUnit.SECONDS);
			C. 非当前 Reactor 线程调用 Channel 的各种方法：例如在推送系统的业务线程里面，根据用户的标识，找到对应的 Channel 引用，然后
			调用 Write 类方法向该用户推送消息，就会进入到这种场景。最终的 Write 会提交到任务队列中后被异步消费
		⑤ 方案再说明
			A. Netty 抽象出两组线程池，BossGroup 专门负责接收客户端连接，WorkerGroup 专门负责网络读写操作。
			B. NioEventLoop 表示一个不断循环执行处理任务的线程，每个 NioEventLoop 都有一个selector，用于监听绑定在其上的 socket 网络通道。
			C. NioEventLoop 内部采用串行化设计，从消息的读取->解码->处理->编码->发送，始终由IO 线程 NioEventLoop 负责
				a. NioEventLoopGroup 下包含多个 NioEventLoop
				b. 每个 NioEventLoop 中包含有一个 Selector，一个 taskQueue
				c. 每个 NioEventLoop 的 Selector 上可以注册监听多个 NioChannel
				d. 每个 NioChannel 只会绑定在唯一的 NioEventLoop 上
				e. 每个 NioChannel 都绑定有一个自己的 ChannelPipeline
	5. 异步模型
		① 基本介绍
			A. 异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。
			B. Netty 中的 I/O 操作是异步的，包括 Bind、Write、Connect 等操作会简单的返回一个 ChannelFuture。
			C. 调用者并不能立刻获得结果，而是通过 Future-Listener 机制，用户可以方便的主动获取或者通过通知机制获得 IO 操作结果
			D. Netty 的异步模型是建立在 future 和 callback 的之上的。callback 就是回调。重点说Future，它的核心思想是：假设一个方法 fun，计算过程可能非常耗
			时，等待fun返回显然不合适。那么可以在调用fun的时候，立马返回一个 Future，后续可以通过Future去监控方法 fun的处理过程(即 ： Future-Listener 机制)
		② Future 说明
			A. 表示异步的执行结果, 可以通过它提供的方法来检测执行是否完成，比如检索计算等等.
			B. ChannelFuture 是一个接口 ： public interface ChannelFuture extends Future<Void>我们可以添加监听器，当监听的事件发生时，就会通知到监听器
		③ 工作原理
			A. 示意图	
						+-----------------------------------------------------------------------------------------------------------+
						|								 +----------+									     +----------+			|
						|		+----------+			 |		    |			   +----------+			     |		 	|			|	+----------+
					<---+------ | Outbound | <---------- | Outbound | <----------- | Outbound | <----------- | Outbound | <---------+-- | Outbound | 
						|		| Event	   |			 | Handler  |			   | Event	  |			     | Handler  |			|	| Event	   |
						|		+----------+			 |		    |			   +----------+			     |		    |			|	+----------+
						|								 +----------+									     +----------+			|
						|																											|
						|				 +---------+									   +---------+								|
				+---------+				 |		   |			  +---------+			   |		 |				+---------+		|
				| Inbound | -----------> | Inbound | -----------> | Inbound | -----------> | Inbound | -----------> | Inbound | ----+------>
				| Event	  |				 | Handler |			  | Event	|			   | Handler |				| Event	  |		|
				+---------+				 |		   |			  +---------+			   |		 |				+---------+		|
						|				 +---------+									   +---------+								|
						+-----------------------------------------------------------------------------------------------------------+
			B. 说明
				a. 在使用Netty进行编程时，拦截操作和转换出入站数据只需要您提供callback或利用future即可。这使得链式操作简单、高效, 并有利于编写可重用的、通用的代码。
				b. Netty 框架的目标就是让你的业务逻辑从网络基础应用编码中分离出来、解脱出来
			C. Future-Listener 机制
				a. 当 Future 对象刚刚创建时，处于非完成状态，调用者可以通过返回的 ChannelFuture来获取操作执行的状态，注册监听函数来执行完成后的操作。
				b. 常见有如下操作
					(1) 通过 isDone 方法来判断当前操作是否完成；
					(2) 通过 isSuccess 方法来判断已完成的当前操作是否成功；
					(3) 通过 getCause 方法来获取已完成的当前操作失败的原因；
					(4) 通过 isCancelled 方法来判断已完成的当前操作是否被取消；
					(5) 通过 addListener 方法来注册监听器，当操作已完成(isDone 方法返回完成)，将会通知指定的监听器；如果 Future 对象已完成，则通知指定的监听器
				c. 举例说明
					(1) 演示：绑定端口是异步操作，当绑定操作处理完，将会调用相应的监听器处理逻辑
						// 绑定端口并且同步，生成一个ChannelFuture，启动服务器
						ChannelFuture channelFuture = bootstrap.bind(2648).sync();

						// 注册监听器，监听绑定端口成功的回调
						channelFuture.addListener(future -> {
							if (future.isSuccess()) {
								System.out.println("监听端口 2648 成功");
							} else {
								System.out.println("监听端口 2648 失败");
							}
						});
					(2) 小结：相比传统阻塞 I/O，执行 I/O 操作后线程会被阻塞住, 直到操作完成；异步处理的好处是不会造成线程阻塞，线程在 I/O 操作期间可以执行别的程序，
					在高并发情形下会更稳定和更高的吞吐量
	6. 快速入门实例-HTTP服务
		① 实例要求：使用IDEA 创建Netty项目
		② Netty 服务器在 2648 端口监听，浏览器发出请求"http://localhost:2648/ "
		③ 服务器可以回复消息给客户端 "Hello! 我是服务器 5", 并对特定请求资源进行过滤
		④ 目的：Netty 可以做Http服务开发，并且理解 Handler 实例和客户端及其请求的关系
		⑤ 代码：
			A. HttpNettyServer
				import io.netty.bootstrap.ServerBootstrap;
				import io.netty.channel.ChannelFuture;
				import io.netty.channel.nio.NioEventLoopGroup;
				import io.netty.channel.socket.nio.NioServerSocketChannel;

				public class HttpNettyServer {

					public static void main(String[] args) {

						NioEventLoopGroup bossGroup = new NioEventLoopGroup(1);
						NioEventLoopGroup workerGroup = new NioEventLoopGroup();

						try {
							ServerBootstrap bootstrap = new ServerBootstrap();
							bootstrap.group(bossGroup, workerGroup)
									.channel(NioServerSocketChannel.class)
									.childHandler(new HttpNettyInitializer());
							ChannelFuture channelFuture = bootstrap.bind(2648).sync();
							channelFuture.channel().closeFuture().sync();
						} catch (Exception e) {
							e.printStackTrace();
						} finally {
							bossGroup.shutdownGracefully();
							workerGroup.shutdownGracefully();
						}
					}
				}
			B. HttpNettyInitializer
				import io.netty.channel.ChannelInitializer;
				import io.netty.channel.ChannelPipeline;
				import io.netty.channel.socket.SocketChannel;
				import io.netty.handler.codec.http.HttpServerCodec;

				public class HttpNettyInitializer extends ChannelInitializer<SocketChannel> {

					// 向管道中加入处理器
					@Override
					protected void initChannel(SocketChannel socketChannel) throws Exception {

						// 得到管道
						ChannelPipeline pipeline = socketChannel.pipeline();

						// 加入 Netty 提供处理Http的编解码处理器 HttpServerCodec，codec = coder + decoder
						pipeline.addLast("myEodec", new HttpServerCodec());
						pipeline.addLast("myandler", new HttpNettyServerHandler());
					}
				}
			C. HttpNettyServerHandler
				import io.netty.buffer.ByteBuf;
				import io.netty.buffer.Unpooled;
				import io.netty.channel.ChannelHandlerContext;
				import io.netty.channel.SimpleChannelInboundHandler;
				import io.netty.handler.codec.http.*;
				import io.netty.util.CharsetUtil;

				import java.net.URI;

				/**
				 * SimpleChannelInboundHandler 是 ChannelInboundHandlerAdapter 的子类
				 * HttpObject 是客户端和服务器相互通讯数据的封装
				 */
				public class HttpNettyServerHandler extends SimpleChannelInboundHandler<HttpObject> {

					// channelRead0 读取客户端的数据
					@Override
					protected void channelRead0(ChannelHandlerContext channelHandlerContext, HttpObject httpObject) throws Exception {

						// 判断 msg 是不是
						if (httpObject instanceof HttpRequest) {

							// 过滤请求
							HttpRequest httpRequest = (HttpRequest) httpObject;
							URI uri = new URI(httpRequest.uri());
							System.out.println(uri.getPath());
							if ("/favicon.ico".equals(uri.getPath())) {
								System.out.println("请求了 favicon.ico，不做响应");
								return;
							}

							// 回复信息给浏览器，满足Http协议
							ByteBuf byteBuf = Unpooled.copiedBuffer("hello, 我是服务器", CharsetUtil.UTF_8);

							// 构造一个Http响应 FullHttpResponse，并设置响应头
							FullHttpResponse httpResponse = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, byteBuf);
							httpResponse.headers().set(HttpHeaderNames.CONTENT_TYPE, "text/plain");
							httpResponse.headers().set(HttpHeaderNames.CONTENT_LENGTH, byteBuf.readableBytes());

							// 将构建好的 FullHttpResponse 返回
							channelHandlerContext.writeAndFlush(httpResponse);
						}
					}
				}
三、Netty 核心模块组件
	1. Bootstrap、ServerBootstrap
		① Bootstrap 意思是引导，一个 Netty 应用通常由一个 Bootstrap 开始，主要作用是配置整个 Netty 程序，串联各个组件，Netty 中 Bootstrap 类是客户端程序的启动引导类，
		ServerBootstrap 是服务端启动引导类
		② 常见的方法有
			A. public ServerBootstrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup)：该方法用于服务器端，用来设置两个 EventLoopGroup
			B. public B group(EventLoopGroup group)：该方法用于客户端，用来设置一个 EventLoopGroup
			C. public B channel(Class<? extends C> channelClass)：该方法用来设置一个服务器端和客户端的通道实现
			D. public <T> B option(ChannelOption<T> option, T value)：用来给 ServerChannel 添加配置
			E. public <T> ServerBootstrap childOption(ChannelOption<T> childOption, T value)：用来给接收到的通道添加配置
			F. public ServerBootstrap childHandler(ChannelHandler childHandler)：该方法用来设置业务处理类（自定义的 handler），childHandler对应Bootstrap
			G. public B handler(ChannelHandler handler)：该方法用来设置服务端业务处理类，handler对应ServerBootstrap
			H. public ChannelFuture bind(int inetPort)：该方法用于服务器端，用来设置占用的端口号
			I. public ChannelFuture connect(String inetHost, int inetPort)：该方法用于客户端，用来连接服务器端
	2. Future、ChannelFuture
		① Netty 中所有的 IO 操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 Future 和 ChannelFutures，
		他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件
		② 常见的方法有
			A. Channel channel()，返回当前正在进行 IO 操作的通道
			B. ChannelFuture sync()，等待异步操作执行完毕
	3. Channel
		① Netty 网络通信的组件，能够用于执行网络 I/O 操作。
		② 通过 Channel 可获得当前网络连接的通道的状态
		③ 通过 Channel 可获得网络连接的配置参数（例如接收缓冲区大小）
		④ Channel 提供异步的网络 I/O 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 I/O 调用都将立即返回，并且不保证在调用结束时所请求的 I/O 操作已完成
		⑤ 调用立即返回一个 ChannelFuture 实例，通过注册监听器到 ChannelFuture 上，可以I/O 操作成功、失败或取消时回调通知调用方
		⑥ 支持关联 I/O 操作与对应的处理程序
		⑦ 不同协议、不同的阻塞类型的连接都有不同的 Channel 类型与之对应，常用的 Channel 类型:
			A. NioSocketChannel，异步的客户端 TCP Socket 连接。
			B. NioServerSocketChannel，异步的服务器端 TCP Socket 连接。
			C. NioDatagramChannel，异步的 UDP 连接。
			D. NioSctpChannel，异步的客户端 Sctp 连接。
			E. NioSctpServerChannel，异步的 Sctp 服务器端连接，这些通道涵盖了 UDP 和 TCP 网络 IO 以及文件 IO。
	4. Selector
		① Netty 基于 Selector 对象实现 I/O 多路复用，通过 Selector 一个线程可以监听多个连接的 Channel 事件。
		② 当向一个 Selector 中注册 Channel 后，Selector 内部的机制就可以自动不断地查询(Select) 这些注册的 Channel 是否有已就绪的 I/O 事件（例如可读，可写，网络连接
		完成等），这样程序就可以很简单地使用一个线程高效地管理多个 Channel
	5. ChannelHandler 及其实现类
		① ChannelHandler 是一个接口，处理 I/O 事件或拦截 I/O 操作，并将其转发到其 ChannelPipeline(业务处理链)中的下一个处理程序。
		② ChannelHandler 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类
		③ ChannelHandler 及其实现类一览图
									 +----------------+
									 | ChannelHandler |
									 +----------------+
										 ↑	 ↑	  ↑
										 |	 |	  |
						+----------------+	 |	  +---------------+
						↓					 |					  ↓
		    +------------------------+		 |		  +-----------------------+
		    | ChannelOutboundHandler |		 |	      | ChannelInboundHandler |
		    +------------------------+		 |		  +-----------------------+
						↑					 |					  ↑
						|		 +-----------------------+		  |
						|		 | ChannelHandlerAdapter |		  |
						|		 +-----------------------+   	  |
						|				↑		  ↑				  |
						|		+-------+		  +-------+		  |
						|		|						  |		  |
			+-------------------------------+  +------------------------------+
			| ChannelOutboundHandlerAdapter |  | ChannelInboundHandlerAdapter |
			+-------------------------------+  +------------------------------+
			A. ChannelInboundHandler / ChannelInboundHandlerAdapter：用于处理入站 I/O 事件。
			B. ChannelOutboundHandler / ChannelOutboundHandlerAdapter：用于处理出站 I/O 操作。
			C. ChannelDuplexHandler: 用于处理入站和出站事件
		④ 我们经常需要自定义一个 Handler 类去继承ChannelInboundHandlerAdapter，然后通过重写相应方法实现业务逻辑
			A. public class ChannelInboundHandlerAdapter extends ChannelHandlerAdapter implements ChannelInboundHandler：类的继承关系
			B. public ChannelInboundHandlerAdapter() { }：类去继承ChannelInboundHandlerAdapter构造器
			C. 通道的注册事件
				public void channelRegistered(ChannelHandlerContext ctx) throws Exception {
					ctx.fireChannelRegistered();
				}
			D. 通道的注销事件
				public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {
					ctx.fireChannelUnregistered();
				}
			E. 通道就绪事件
				public void channelActive(ChannelHandlerContext ctx) throws Exception {
					ctx.fireChannelActive();
				}
			F. 通道非就绪事件
				public void channelInactive(ChannelHandlerContext ctx) throws Exception {
					ctx.fireChannelInactive();
				}
			G. 通道读取数据事件
				public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
					ctx.fireChannelRead(msg);
				}
			H. 数据读取完毕事件
				public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
					ctx.fireChannelReadComplete();
				}
			I. 通道发生异常事件
				public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
					ctx.fireExceptionCaught(cause);
					ctx.close();
				}
			J. 处理器被加入时触发的事件
				public void handlerAdded(ChannelHandlerContext ctx) throws Exception {}
			K. 处理器被移除时触发的事件
				public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {}
	6. Pipeline 和 ChannelPipeline
		① ChannelPipeline 是一个重点
		② ChannelPipeline 是一个 Handler 的集合，它负责处理和拦截 inbound 或者outbound 的事件和操作，相当于一个贯穿 Netty 的链。(也可以这样理解：ChannelPipeline 
		是保存 ChannelHandler 的 List，用于处理或拦截 Channel 的入站事件和出站操作)
		③ ChannelPipeline 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 Channel 中各个的 ChannelHandler 如何相互交互
		④ 在 Netty 中每个 Channel 都有且仅有一个 ChannelPipeline 与之对应，它们的组成关系如下
			+-----------------------------------------------------------------------------------------------------------------------------------------------+
			|																 	 Channel																	|
			|	+---------------------------------------------------------------------------------------------------------------------------------------+	|
			|	|															  ChannelPipeline															|	|
			|	|			head																										tail			|	|
			|	|	+--------------------+				+--------------------+			   	+--------------------+			   	+--------------------+	|	|
			|	|	| +----------------+ | -----------> | +----------------+ | -----------> | +----------------+ | -----------> | +----------------+ |	|	|
			|	|	| | channelHandler | |				| | channelHandler | |			   	| | channelHandler | |			  	| | channelHandler | |	|	|
			|	|	| +----------------+ | <----------- | +----------------+ | <----------- | +----------------+ | <----------- | +----------------+ |	|	|
			|	|	+--------------------+				+--------------------+			   	+--------------------+			   	+--------------------+	|	|
			|	|	ChannelHandlerContext				ChannelHandlerContext			   	ChannelHandlerContext				ChannelHandlerContext	|	|
			|	+----------------------------------------------------------------------------------------------------------------------------------------	|
			+-----------------------------------------------------------------------------------------------------------------------------------------------+
			A. 一个 Channel 包含了一个 ChannelPipeline，而 ChannelPipeline 中又维护了一个由 ChannelHandlerContext组成的双向链表，并且每个 ChannelHandlerContext 
			中又关联着一个 ChannelHandler
			B. 入站事件和出站事件在一个双向链表中，入站事件会从链表 head 往后传递到最后一个入站的 handler（服务端到客户端），出站事件会从链表 tail 往前传递到最
			前一个出站的 handler（客户端到服务端），两种类型的 handler 互不干扰
			C. ChannelHandlerContext的实际类型是DefaultChannelHandlerContext
		⑤ 常用方法
			A. ChannelPipeline addFirst(ChannelHandler... handlers)：把一个业务处理类（handler）添加到链中的第一个位置
			B. ChannelPipeline addLast(ChannelHandler... handlers):  把一个业务处理类（handler）添加到链中的最后一个位置
	7. ChannelHandlerContext
		① 保存 Channel 相关的所有上下文信息，同时关联一个 ChannelHandler 对象
		② 即ChannelHandlerContext 中包含一个具体的事件处理器 ChannelHandler ，同时ChannelHandlerContext 中也绑定了对应的 pipeline 和 Channel 的信息，方便
		对 ChannelHandler进行调用.
		③ 常用方法
			A. ChannelFuture close()：关闭通道
			B. ChannelOutboundInvoker flush()：刷新
			C. ChannelFuture writeAndFlush(Object msg)：将数据写到 ChannelPipeline 中当前ChannelHandler 的下一个 ChannelHandler 开始处理（出站事件）
	8. ChannelOption
		① Netty 在创建 Channel 实例后,一般都需要设置 ChannelOption 参数。
		② ChannelOption 参数如下:
			A. ChannelOption.SO_BACKLOG：对应 TCP/IP 协议 listen 函数中的 backlog 参数，用来初始化服务器可连接队列大小。服务端处理客户端连接请求是顺序处理的，
			所以同一时间只能处理一个客户端连接。多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，backlog 参数指定了队列的大小。
			B. ChannelOption.SO_KEEPALIVE：一直保持连接活动状态
	9. EventLoopGroup 和其实现类 NioEventLoopGroup
		① EventLoopGroup 是一组 EventLoop 的抽象，Netty 为了更好的利用多核 CPU 资源，一般会有多个 EventLoop 同时工作，每个 EventLoop 维护着一个 Selector 实例。
		② EventLoopGroup 提供 next 接口，可以从组里面按照一定规则获取其中一个EventLoop来处理任务。在 Netty 服务器端编程中，我们一般都需要提供两个EventLoopGroup，
		例如：BossEventLoopGroup 和 WorkerEventLoopGroup。
		③ 通常一个服务端口即一个 ServerSocketChannel对应一个Selector 和一个EventLoop线程。BossEventLoop 负责接收客户端的连接并将 SocketChannel 交给WorkerEventLoopGroup 
		来进行 IO 处理，如下图所示
				  +--------------+																			   next    +--------------------+
				  | ChannelEvent | ------+																	+--------> | EventLoop Selector |
				  +--------------+	  	 |																	|		   +--------------------+
			+--------------------+  next |		+--------------------+		  +----------------------+		|  next    +--------------------+
			| BossEventLoopGroup | -----------> | EventLoop Selector | -----> | WorkerEventLoopGroup | --------------> | EventLoop Selector |
			+--------------------+		 |		+--------------------+		  +----------------------+		|		   +--------------------+
				  +--------------+		 |																	|  next    +--------------------+
				  | ChannelEvent | ------+																	+--------> | EventLoop Selector |
				  +--------------+	  	 																			   +--------------------+
			A. BossEventLoopGroup 通常是一个单线程的 EventLoop，EventLoop 维护着一个注册了ServerSocketChannel 的Selector 实例BossEventLoop 不断轮询
			Selector 将连接事件分离出来
			B. 通常是 OP_ACCEPT 事件，然后将接收到的 SocketChannel 交给WorkerEventLoopGroup
			C. WorkerEventLoopGroup 会由 next 选择其中一个 EventLoop来将这个SocketChannel 注册到其维护的Selector 并对其后续的 IO 事件进行处理
		④ 常用方法
			A. public NioEventLoopGroup()：构造方法
			B. public Future<?> shutdownGracefully()： 断开连接，关闭线程
	10. Unpooled 类
		① Netty 提供一个专门用来操作缓冲区(即Netty的数据容器)的工具类
		② 常用方法
			A. public static ByteBuf copiedBuffer(CharSequence string, Charset charset)：通过给定的数据和字符编码返回一个 ByteBuf 对象（类似于 NIO 中的 ByteBuffer 但有区别）
			B. public static ByteBuf buffer(int initialCapacity)：指定一个具体大小的缓存区
			C. ByteBuf writeByte(int var1)：写入数据到缓冲区
			D. byte readByte()：从缓冲区获取数据
			E. int capacity()：获取缓冲区的容量
			F. boolean hasArray()：判断当前缓冲区是否分配数组
			G. byte[] array()：获取缓冲区的字节数组
			H. int arrayOffset()：获取当前缓存区数组的偏移量
			I. int readerIndex()：获取当前缓存区的可读取数据的数组下标
			J. int writerIndex()：获取当前缓存区的可写入数据的数组下标
			K. int readableBytes()：获取当前缓存区可读取数据的大小
			L. byte getByte(int var1)：获取缓存区指定位置的数据，该方法不会导致readerIndex和readableBytes的变化
			M. CharSequence getCharSequence(int var1, int var2, Charset var3)：获取缓冲区某个片段
		③ 举例说明Unpooled 获取 Netty的数据容器ByteBuf 的基本使用
			A. 案例一：
				import io.netty.buffer.ByteBuf;
				import io.netty.buffer.Unpooled;

				public class NettyByteBuf {

					public static void main(String[] args) {

						// 创建一个 ByteBuf
						// 创建ByteBuf对象，该对象包含一个 byte[10] 的数组
						ByteBuf buffer = Unpooled.buffer(10);

						// 往ByteBuf中保存数据
						for (int i = 0; i < 10; i++) {
							buffer.writeByte(i);
						}

						// 输出ByteBuf，在 Netty 中，buffer 输出时不需要进行 flip 反转，因为Netty的底层维护了
						// readIndex 和 writeIndex
						System.out.println("capacity = " + buffer.capacity());
						for (int i = 0; i < buffer.capacity(); i++) {
							// System.out.println(buffer.getByte(i));
							System.out.println(buffer.readByte());
						}
					}
				}
			B. 案例二：
				import io.netty.buffer.ByteBuf;
				import io.netty.buffer.Unpooled;
				import io.netty.util.CharsetUtil;

				public class NettyByteBuf2 {

					public static void main(String[] args) {

						// 创建 ByteBuf
						ByteBuf byteBuf = Unpooled.copiedBuffer("Hello, LiLX", CharsetUtil.UTF_8);
						System.out.println("byteBuf = " + byteBuf);

						// 使用 ByteBuf 相关 API
						if (byteBuf.hasArray()) {
							byte[] content = byteBuf.array();

							// 将 content 转成字符串
							String msg = new String(content, CharsetUtil.UTF_8);
							System.out.println(msg);

							System.out.println(byteBuf.arrayOffset()); // 0
							System.out.println(byteBuf.readerIndex()); // 0
							System.out.println(byteBuf.writerIndex()); // 11
							System.out.println(byteBuf.capacity()); // 33

							// 可读的字节数
							System.out.println(byteBuf.readableBytes()); // 11

							byteBuf.readByte();

							System.out.println(byteBuf.arrayOffset()); // 0
							System.out.println(byteBuf.readerIndex()); // 1
							System.out.println(byteBuf.readableBytes()); // 10

							byteBuf.getByte(5);

							System.out.println(byteBuf.readerIndex()); // 1
							System.out.println(byteBuf.readableBytes()); // 10

							System.out.println(byteBuf.getCharSequence(7, 10, CharsetUtil.UTF_8));
						}
					}
				}
		④ Netty 通过 readIndex、writeIndex 和 capacity 将缓冲区分成三个区域
			A. 0 -- readIndex：已经读取的区域
			B. readIndex -- writeIndex：可读的区域
			C. writeIndex -- capacity：可写的区域
	11. Netty应用实例-群聊系统，实例要求:
		① 编写一个 Netty 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）
		② 实现多人群聊
		③ 服务器端：可以监测用户上线，离线，并实现消息转发功能
		④ 客户端：通过channel 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息(有服务器转发得到)
		⑤ 目的：进一步理解Netty非阻塞网络编程机制
		⑥ 代码：
			A. GroupChatServer
				import io.netty.bootstrap.ServerBootstrap;
				import io.netty.channel.ChannelFuture;
				import io.netty.channel.ChannelInitializer;
				import io.netty.channel.ChannelOption;
				import io.netty.channel.ChannelPipeline;
				import io.netty.channel.nio.NioEventLoopGroup;
				import io.netty.channel.socket.SocketChannel;
				import io.netty.channel.socket.nio.NioServerSocketChannel;
				import io.netty.handler.codec.string.StringDecoder;
				import io.netty.handler.codec.string.StringEncoder;

				public class GroupChatServer {

					private final int port; // 监听端口

					public GroupChatServer(int port) {
						this.port = port;
					}

					// 编写run方法，处理客户端的请求
					public void run() {

						// 创建线程组
						NioEventLoopGroup bossGroup = new NioEventLoopGroup(1);
						NioEventLoopGroup workerGroup = new NioEventLoopGroup();

						try {
							// 创建启动程序
							ServerBootstrap bootstrap = new ServerBootstrap();
							bootstrap.group(bossGroup, workerGroup)
									.channel(NioServerSocketChannel.class)
									.option(ChannelOption.SO_BACKLOG, 128)
									.childOption(ChannelOption.SO_KEEPALIVE, true)
									.childHandler(new ChannelInitializer<SocketChannel>() {

										@Override
										protected void initChannel(SocketChannel socketChannel) {
											ChannelPipeline pipeline = socketChannel.pipeline();
											// 加入解码器
											pipeline.addLast("decoder", new StringDecoder());
											// 加入编码器
											pipeline.addLast("encoder", new StringEncoder());
											// 加入业务处理类
											pipeline.addLast("groupChatServerHandler", new GroupChatServerHandler());
										}
									});
							System.out.println("服务器 is ready ......");

							ChannelFuture channelFuture = bootstrap.bind(port).sync();
							channelFuture.channel().closeFuture().sync();
						} catch (Exception e) {
							e.printStackTrace();
						} finally {
							bossGroup.shutdownGracefully();
							workerGroup.shutdownGracefully();
						}
					}

					public static void main(String[] args) {
						new GroupChatServer(2648).run();
					}
				}
			B. GroupChatServerHandler
				import io.netty.channel.Channel;
				import io.netty.channel.ChannelHandlerContext;
				import io.netty.channel.SimpleChannelInboundHandler;
				import io.netty.channel.group.ChannelGroup;
				import io.netty.channel.group.DefaultChannelGroup;
				import io.netty.util.concurrent.GlobalEventExecutor;

				import java.time.LocalDateTime;
				import java.time.format.DateTimeFormatter;

				public class GroupChatServerHandler extends SimpleChannelInboundHandler<String> {

					// 定义一个 channel 组，管理所有 channel
					// GlobalEventExecutor.INSTANCE：全局事件执行器，是一个单例
					private static final ChannelGroup channelGroup = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);
					private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

					// 表示连接建立，一旦连接，第一个被执行的方法，向其他客户端发送 xxx 加入聊天
					@Override
					public void handlerAdded(ChannelHandlerContext ctx) {
						Channel channel = ctx.channel();
						// 将客户加入聊天的信息推送给其他在线的客户端
						// channelGroup的writeAndFlush方法会遍历所有channel，并发送消息
						channelGroup.writeAndFlush(LocalDateTime.now().format(formatter) + "\n[用户]" + channel.remoteAddress() + " 加入聊天\n");
						// 将当前 channel 加入 channelGroup
						channelGroup.add(channel);
					}

					// 表示 channel 处于活动状态，提示 xxx 上线了
					@Override
					public void channelActive(ChannelHandlerContext ctx) {
						System.out.println("[客户端]" + ctx.channel().remoteAddress() + " 上线了");
					}

					// 表示 channel 处于不活动状态，提示 XXX 下线了
					@Override
					public void channelInactive(ChannelHandlerContext ctx) {
						System.out.println("[客户端]" + ctx.channel().remoteAddress() + " 下线了");
					}

					// 表示断开连接，将当前 channel 会自动从 channelGroup 中移除，向其他客户端发送 xxx 退出聊天
					@Override
					public void handlerRemoved(ChannelHandlerContext ctx) {
						channelGroup.writeAndFlush(LocalDateTime.now().format(formatter) + "\n[用户]" + ctx.channel().remoteAddress() + " 退出聊天\n");
					}

					// 读取客户端发送的消息，进行转发和回显
					@Override
					protected void channelRead0(ChannelHandlerContext ctx, String s) {
						Channel channel = ctx.channel();
						channelGroup.forEach(c -> {
							if(c != channel) { // 转发消息
								c.writeAndFlush(LocalDateTime.now().format(formatter) + "\n[用户]" + channel.remoteAddress() + " 说：" + s + "\n");
							} else { //回显消息
								channel.writeAndFlush(LocalDateTime.now().format(formatter) + "\n[自己]" + channel.remoteAddress() + " 说：" + s + "\n");
							}
						});
					}

					// 异常，关闭通道
					@Override
					public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
						ctx.close();
					}
				}
			C. GroupChatClient
				import io.netty.bootstrap.Bootstrap;
				import io.netty.channel.Channel;
				import io.netty.channel.ChannelFuture;
				import io.netty.channel.ChannelInitializer;
				import io.netty.channel.ChannelPipeline;
				import io.netty.channel.nio.NioEventLoopGroup;
				import io.netty.channel.socket.SocketChannel;
				import io.netty.channel.socket.nio.NioSocketChannel;
				import io.netty.handler.codec.string.StringDecoder;
				import io.netty.handler.codec.string.StringEncoder;

				import java.util.Scanner;

				public class GroupChatClient {

					private final String host;
					private final int port;

					public GroupChatClient(String host, int port) {
						this.host = host;
						this.port = port;
					}

					public void run() {
						NioEventLoopGroup eventExecutors = new NioEventLoopGroup();
						try {
							Bootstrap bootstrap = new Bootstrap().group(eventExecutors)
									.channel(NioSocketChannel.class)
									.handler(new ChannelInitializer<SocketChannel>() {
										@Override
										protected void initChannel(SocketChannel socketChannel) {
											ChannelPipeline pipeline = socketChannel.pipeline();
											// 加入解码器
											pipeline.addLast("decoder", new StringDecoder());
											// 加入编码器
											pipeline.addLast("encoder", new StringEncoder());
											// 加入业务处理类
											pipeline.addLast("groupChatClientHandler", new GroupChatClientHandler());
										}
									});
							ChannelFuture channelFuture = bootstrap.connect(host, port).sync();
							// 得到 channel
							Channel channel = channelFuture.channel();
							System.out.println("---------" + channel.localAddress() + "----------");
							Scanner scanner = new Scanner(System.in);
							while (scanner.hasNextLine()) {
								String msg = scanner.nextLine();
								channel.writeAndFlush(msg);
							}
							channel.closeFuture().sync();
						} catch (Exception e) {
							e.printStackTrace();
						} finally {
							eventExecutors.shutdownGracefully();
						}
					}

					public static void main(String[] args) {
						new GroupChatClient("127.0.0.1", 2648).run();
					}
				}
			D. GroupChatClientHandler
				import io.netty.channel.ChannelHandlerContext;
				import io.netty.channel.SimpleChannelInboundHandler;

				public class GroupChatClientHandler extends SimpleChannelInboundHandler<String> {
					@Override
					protected void channelRead0(ChannelHandlerContext channelHandlerContext, String s) {
						System.out.println(s);
					}
				}
	12. Netty心跳检测机制案例
		① 编写一个 Netty心跳检测机制案例, 当服务器超过3秒没有读时，就提示读空闲
		② 当服务器超过5秒没有写操作时，就提示写空闲 
		③ 实现当服务器超过7秒没有读或者写操作时，就提示读写空闲
		④ 代码：
			A. MyHeartbeatServer:
				import io.netty.bootstrap.ServerBootstrap;
				import io.netty.channel.ChannelFuture;
				import io.netty.channel.ChannelInitializer;
				import io.netty.channel.ChannelPipeline;
				import io.netty.channel.nio.NioEventLoopGroup;
				import io.netty.channel.socket.SocketChannel;
				import io.netty.channel.socket.nio.NioServerSocketChannel;
				import io.netty.handler.logging.LogLevel;
				import io.netty.handler.logging.LoggingHandler;
				import io.netty.handler.timeout.IdleStateHandler;

				import java.util.concurrent.TimeUnit;

				public class MyHeartbeatServer {

					public static void main(String[] args) {
						NioEventLoopGroup bossGroup = new NioEventLoopGroup(1);
						NioEventLoopGroup workerGroup = new NioEventLoopGroup();

						try {
							// 创建启动程序
							ServerBootstrap bootstrap = new ServerBootstrap();
							bootstrap.group(bossGroup, workerGroup)
									.channel(NioServerSocketChannel.class)
									.handler(new LoggingHandler(LogLevel.INFO)) // 在bossGroup中增加一个日志处理器
									.childHandler(new ChannelInitializer<SocketChannel>() {
										@Override
										protected void initChannel(SocketChannel socketChannel) throws Exception {
											ChannelPipeline pipeline = socketChannel.pipeline();
											// 加入 Netty 提供的一个 IdleStateHandler 处理器
											/*
											1. IdleStateHandler 是 Netty 提供处理空闲状态的处理器
											2. readerIdleTime：表示多长时间没有读操作，就会发送心跳检测包，检测是否仍是连接状态
											3. writerIdleTime：表示多长时间没有写操作，也会发送心跳检测包，检测是否仍是连接状态
											4. allIdleTime：表示多长时间没有读写操作，也会发送心跳检测包，检测是否仍是连接状态
											5. 当IdleStateHandler 一旦被触发后，就会传递给管道的下一个handler去处理，通过回调触发下一个Handler的userEventTiggered，
											在该方法中处理 IdleStateEvent（读空闲、写空闲和读写空闲）
											 */
											pipeline.addLast(new IdleStateHandler(3, 5, 7, TimeUnit.SECONDS));
											// 加入一个对空闲检测进一步处理的handler（自定义）
											pipeline.addLast(new MyHeartbeatHandler());
										}
									});
							ChannelFuture channelFuture = bootstrap.bind(2648).sync();
							channelFuture.channel().closeFuture().sync();
						} catch (InterruptedException e) {
							e.printStackTrace();
						} finally {
							bossGroup.shutdownGracefully();
							workerGroup.shutdownGracefully();
						}
					}
				}
			B. MyHeartbeatHandler
				import io.netty.channel.ChannelHandlerContext;
				import io.netty.channel.ChannelInboundHandlerAdapter;
				import io.netty.handler.timeout.IdleStateEvent;

				public class MyHeartbeatHandler extends ChannelInboundHandlerAdapter {

					/**
					 *
					 * @param ctx 上下文
					 * @param evt 事件
					 */
					@Override
					public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {

						if (evt instanceof IdleStateEvent) {
							IdleStateEvent idleStateEvent = (IdleStateEvent) evt;
							String eventType = null;
							switch (idleStateEvent.state()) {
								case READER_IDLE:
									eventType = "读空闲";
									break;
								case WRITER_IDLE:
									eventType = "写空闲";
									break;
								case ALL_IDLE:
									eventType = "读写空闲";
									break;
							}
							System.out.println(ctx.channel().remoteAddress() + " 超时事件： " + eventType);
						}
					}
				}
	13. Netty 通过WebSocket编程实现服务器和客户端长连接
		① Http协议是无状态的, 浏览器和服务器间的请求响应一次，下一次会重新创建连接.
		② 要求：实现基于webSocket的长连接的全双工的交互
		③ 改变Http协议多次请求的约束，实现长连接了，服务器可以发送消息给浏览器
		④ 客户端浏览器和服务器端会相互感知，比如服务器关闭了，浏览器会感知，同样浏览器关闭了，服务器会感知
		⑤ 代码：
			A. MyWebSocketServer
				import io.netty.bootstrap.ServerBootstrap;
				import io.netty.channel.ChannelFuture;
				import io.netty.channel.ChannelInitializer;
				import io.netty.channel.ChannelPipeline;
				import io.netty.channel.nio.NioEventLoopGroup;
				import io.netty.channel.socket.SocketChannel;
				import io.netty.channel.socket.nio.NioServerSocketChannel;
				import io.netty.handler.codec.http.HttpObjectAggregator;
				import io.netty.handler.codec.http.HttpServerCodec;
				import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;
				import io.netty.handler.logging.LogLevel;
				import io.netty.handler.logging.LoggingHandler;
				import io.netty.handler.stream.ChunkedWriteHandler;

				public class MyWebSocketServer {

					public static void main(String[] args) throws Exception {

						NioEventLoopGroup bossGroup = new NioEventLoopGroup(1);
						NioEventLoopGroup workerGroup = new NioEventLoopGroup();

						try {
							ServerBootstrap serverBootstrap = new ServerBootstrap();
							serverBootstrap.group(bossGroup, workerGroup)
									.channel(NioServerSocketChannel.class)
									.handler(new LoggingHandler(LogLevel.INFO))
									.childHandler(new ChannelInitializer<SocketChannel>() {
										@Override
										protected void initChannel(SocketChannel socketChannel) {
											ChannelPipeline pipeline = socketChannel.pipeline();
											// 由于基于http协议，因此需要使用http的编码解码器
											pipeline.addLast(new HttpServerCodec());
											// 以块的方式读写，需要添加ChunkedWriteHandler处理器
											pipeline.addLast(new ChunkedWriteHandler());
											// http数据在传输过程中是分段的，HttpObjectAggregator可以将多个段进行聚合
											// 因为浏览器发送大量数据时，会发送多次请求，因此需要将多次请求的数据聚合起来
											pipeline.addLast(new HttpObjectAggregator(10240));
											// 对于WebSocket，它的数据是以帧（frame）的形式传递
											// WebSocketFrame 有六个子类
											// WebSocketServerProtocolHandler 能识别请求的资源
											// WebSocketServerProtocolHandler核心功能是将http协议升级为ws协议，保持长连接
											// 前端请求的状态码为101
											pipeline.addLast(new WebSocketServerProtocolHandler("/hello"));
											//自定义handler，处理业务
											pipeline.addLast(new MyTextWebSocketFrame());
										}
									});

							ChannelFuture channelFuture = serverBootstrap.bind(2648).sync();
							channelFuture.channel().closeFuture().sync();
						} finally {
							bossGroup.shutdownGracefully();
							workerGroup.shutdownGracefully();
						}

					}
				}
			B. MyTextWebSocketFrame
				import io.netty.channel.ChannelHandlerContext;
				import io.netty.channel.SimpleChannelInboundHandler;
				import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;

				import java.time.LocalDateTime;
				import java.time.format.DateTimeFormatter;

				// TextWebSocketFrame类型，表示一个文本帧
				public class MyTextWebSocketFrame extends SimpleChannelInboundHandler<TextWebSocketFrame> {


					@Override
					protected void channelRead0(ChannelHandlerContext channelHandlerContext, TextWebSocketFrame textWebSocketFrame) throws Exception {

						System.out.println("服务器收到消息：" + textWebSocketFrame.text());

						// 回复消息
						channelHandlerContext.channel().writeAndFlush(new TextWebSocketFrame("服务器时间：" + LocalDateTime.now()
								.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) + "\n" + textWebSocketFrame.text()));
					}

					// 当web客户端连接后，触发方法
					@Override
					public void handlerAdded(ChannelHandlerContext ctx) {
						System.out.println("有连接加入：" + ctx.channel().id().asLongText());
					}

					@Override
					public void handlerRemoved(ChannelHandlerContext ctx) {

						System.out.println("有连接退出：" + ctx.channel().id().asLongText());
					}

					@Override
					public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {

						System.out.println("连接出错：" + cause.getMessage());
						ctx.close();
					}
				}
			C. 客户端
				<!DOCTYPE html>
				<html lang="en">
				<head>
					<meta charset="UTF-8">
					<title>Title</title>
				</head>
				<body>

					<form onsubmit="return false">
						<label>
							<textarea name="message" style="width: 700px; height: 300px;"></textarea>
						</label>
						<!--<input type="button" value="开始连接" onclick="open()">-->
						<input type="button" value="发送消息" onclick="send(this.form.message.value)">
						<br>
						<label>
							<textarea id="returnText" style="width: 700px; height: 300px;"></textarea>
						</label>
						<input type="button" value="清空内容" onclick="this.form.returnText.value=''">
						<!--<input type="button" value="关闭连接" onclick="close()">-->
					</form>

					<script>
						let webSocket;
						// 判断当前浏览器是否支持webSocket
						if (window.WebSocket) {
							webSocket = new WebSocket("ws://localhost:2648/hello");
							let rt = document.getElementById("returnText");

							// 相当于channelRead0，ev表示收到服务器回送的消息
							webSocket.onmessage = function (ev) {
								rt.value = rt.value + "\n" + ev.data;
							}

							// 相当于handlerAdded，表示加入连接
							webSocket.onopen = function () {
								rt.value = "连接开启"
							}

							// 相当于 handlerRemoved，表示退出连接
							webSocket.onclose = function () {
								rt.value = rt.value + "\n" + "连接关闭"
							}
						} else {
							alert("当前浏览器不支持WebSocket")
						}

						// 发送消息到服务器
						function send(message) {
							if (window.WebSocket) {
								if (webSocket.readyState === WebSocket.OPEN) {
									webSocket.send(message);
								} else {
									alert("连接没有开启")
								}
							}
						}
					</script>
				</body>
				</html>
四、Google Protobuf
	1. 编码和解码的基本介绍
		① 编写网络应用程序时，因为数据在网络中传输的都是二进制字节码数据，在发送数据时就需要编码，接收数据时就需要解码
		② codec(编解码器) 的组成部分有两个：decoder(解码器)和 encoder(编码器)。encoder 负责把业务数据转换成字节码数据，decoder 负责把字节码
		数据转换成业务数据
	2. Netty 本身的编码解码的机制和问题分析
		① Netty 自身提供了一些 codec(编解码器)
		② Netty 提供的编码器
			A. StringEncoder，对字符串数据进行编码
			B. ObjectEncoder，对 Java 对象进行编
		③ Netty 提供的解码器
			A. StringDecoder, 对字符串数据进行解码
			B. ObjectDecoder，对 Java 对象进行解码
		④ Netty 本身自带的 ObjectDecoder 和 ObjectEncoder 可以用来实现 POJO 对象或各种业务对象的编码和解码，底层使用的仍是 Java 序列化技术 , 
		而Java 序列化技术本身效率就不高，存在如下问题
			A. 无法跨语言
			B. 序列化后的体积太大，是二进制编码的 5 倍多。
			C. 序列化性能太低
	3. Protobuf
		① Protobuf基本介绍
			A. Protobuf 是 Google 发布的开源项目，全称 Google Protocol Buffers，是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，
			或者说序列化。它很适合做数据存储或 RPC（远程过程调用，remote procedure call）数据交换格式。目前很多公司从 http+json 转变为 tcp+protobu
			B. 参考文档 : https://developers.google.com/protocol-buffers/docs/proto
			C. Protobuf 是以 message 的方式来管理数据的
			D. 支持跨平台、跨语言，即（客户端和服务器端可以是不同的语言编写的），支持目前绝大多数语言，例如 C++、C#、Java、python 等。
			E. 高性能，高可靠性
			F. 使用 protobuf 编译器能自动生成代码，Protobuf 是将类的定义使用.proto 文件进行描述。说明，在idea 中编写 .proto 文件时，会自动提示是否下
			载 .ptotot 编写插件. 可以让语法高亮
			G. 然后通过 protoc.exe 编译器根据.proto 自动生成.java 文件
		② Protobuf快速入门实例，编写程序，使用Protobuf完成如下功能
			A. 客户端可以发送一个Student PoJo 对象到服务器 (通过 Protobuf 编码)
			B. 服务端能接收Student PoJo 对象，并显示信息(通过 Protobuf 解码
			C. 代码：
				a. 引入protobuf依赖
					<dependency>
						<groupId>com.google.protobuf</groupId>
						<artifactId>protobuf-java</artifactId>
						<version>3.6.1</version>
					</dependency>
				b. IDEA下载protobuf插件
				c. 编写Student.proto
					syntax = "proto3"; // proto的版本
					option java_outer_classname = "StudentPojo"; // 外部类名，同时也是文件名
					message Student { // protobuf 使用 message 管理数据，会在外部类中生成内部类 Student，儿该内部类为真实的 pojo
					  int32 id = 1; // Student 类中有一个属性 id，类型是 int32，1代表序号
					  string name = 2;
					}
				d. 使用protoc.exe将.proto编译成.java	
				e. 客户端
					import io.netty.bootstrap.Bootstrap;
					import io.netty.channel.ChannelFuture;
					import io.netty.channel.ChannelInitializer;
					import io.netty.channel.ChannelPipeline;
					import io.netty.channel.nio.NioEventLoopGroup;
					import io.netty.channel.socket.SocketChannel;
					import io.netty.channel.socket.nio.NioSocketChannel;
					import io.netty.handler.codec.protobuf.ProtobufEncoder;

					public class NettyClient {

						public static void main(String[] args) {

							// 客户端需要一个事件循环组
							NioEventLoopGroup eventExecutors = new NioEventLoopGroup();
							try {

								// 创建客户端启动对象，使用的是Bootstrap，而不是ServerBootstrap
								Bootstrap bootstrap = new Bootstrap();
								// 设置相关参数
								bootstrap.group(eventExecutors) // 设置线程组
									.channel(NioSocketChannel.class) // 设置客户端通道的实现类（反射）
									.handler(new ChannelInitializer<SocketChannel>() { // 给 事件循环组 的 EventLoop对应的管道设置处理器
										@Override
										protected void initChannel(SocketChannel socketChannel) throws Exception {
											ChannelPipeline pipeline = socketChannel.pipeline();
											// 加入编码器
											pipeline.addLast("encoder", new ProtobufEncoder());
											pipeline.addLast(new NettyClientHandler()); // 加入自定义处理器
										}
									});
								System.out.println("服务器 is ready ......");
								// 连接主机和端口并且同步，生成一个ChannelFuture，开启客户端
								ChannelFuture channelFuture = bootstrap.connect("127.0.0.1", 2648).sync();
								// 对关闭通道进行监听
								channelFuture.channel().closeFuture().sync();
							} catch (Exception e) {
								e.printStackTrace();
							} finally {
								eventExecutors.shutdownGracefully();
							}
						}
					}
					
					import io.netty.buffer.ByteBuf;
					import io.netty.buffer.Unpooled;
					import io.netty.channel.ChannelHandlerContext;
					import io.netty.channel.ChannelInboundHandlerAdapter;
					import io.netty.util.CharsetUtil;

					public class NettyClientHandler extends ChannelInboundHandlerAdapter {

						// 当通道就绪就会触发该方法
						@Override
						public void channelActive(ChannelHandlerContext ctx) throws Exception {
							// 发送一个Student对象到服务器
							StudentPojo.Student student = StudentPojo.Student.newBuilder().setId(1).setName("LiLX").build();
							ctx.writeAndFlush(student);
						}

						@Override
						public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
							ByteBuf byteBuf = (ByteBuf) msg;
							System.out.println("服务端回复的消息是：" + byteBuf.toString(CharsetUtil.UTF_8));
						}

						@Override
						public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
							cause.printStackTrace();
							ctx.close();
						}
					}
					f. 服务端
					import io.netty.bootstrap.ServerBootstrap;
					import io.netty.channel.ChannelFuture;
					import io.netty.channel.ChannelInitializer;
					import io.netty.channel.ChannelOption;
					import io.netty.channel.ChannelPipeline;
					import io.netty.channel.nio.NioEventLoopGroup;
					import io.netty.channel.socket.SocketChannel;
					import io.netty.channel.socket.nio.NioServerSocketChannel;
					import io.netty.handler.codec.protobuf.ProtobufDecoder;

					public class NettyServer {

						public static void main(String[] args) {

							// 创建 bossGroup 和 workerGroup
							// bossGroup只处理连接请求，真正和客户端业务处理，会交给 workerGroup 完成
							// 两个线程组都是无限循环
							// bossGroup 和 workerGroup 含有的子线程（NioEventLoop）的个数，默认是 cpu 核数 * 2
							NioEventLoopGroup bossGroup = new NioEventLoopGroup(1);
							NioEventLoopGroup workerGroup = new NioEventLoopGroup();

							try {
								// 创建服务器端的启动对象，配置参数
								ServerBootstrap bootstrap = new ServerBootstrap();

								// 使用链式编程来进行设置
								bootstrap.group(bossGroup, workerGroup) // 设置两个线程组
										.channel(NioServerSocketChannel.class) // 使用 NioSocketChannel 作为服务器的通道实现
										.option(ChannelOption.SO_BACKLOG, 128) // 设置线程队列得到的连接个数
										.childOption(ChannelOption.SO_KEEPALIVE, true) // 设置保持活动连接状态
										.childHandler(new ChannelInitializer<SocketChannel>() {// 给 workerGroup 的 EventLoop对应的管道设置处理器
											// 给管道设置处理器
											@Override
											protected void initChannel(SocketChannel socketChannel) throws Exception {
												ChannelPipeline pipeline = socketChannel.pipeline();
												// 加入解码器，必须指定对哪种对象进行解码
												pipeline.addLast("ecoder", new ProtobufDecoder(StudentPojo.Student.getDefaultInstance()));
												pipeline.addLast(new NettyServerHandler()); // 加入自定义处理器
											}
										});
								System.out.println("服务器 is ready ......");

								// 绑定端口并且同步，生成一个ChannelFuture，启动服务器
								ChannelFuture channelFuture = bootstrap.bind(2648).sync();

								// 注册监听器，监听绑定端口成功的回调
								channelFuture.addListener(future -> {
									if (future.isSuccess()) {
										System.out.println("监听端口 2648 成功");
									} else {
										System.out.println("监听端口 2648 失败");
									}
								});
								// 对关闭通道进行监听
								channelFuture.channel().closeFuture().sync();
							} catch (Exception e) {
								e.printStackTrace();
							} finally {
								bossGroup.shutdownGracefully();
								workerGroup.shutdownGracefully();
							}
						}
					}
					
					import io.netty.buffer.Unpooled;
					import io.netty.channel.ChannelHandlerContext;
					import io.netty.channel.ChannelInboundHandlerAdapter;
					import io.netty.util.CharsetUtil;

					// 自定义一个handler，需要继承 netty 规定好的某个 HandlerAdapter（规范）
					public class NettyServerHandler extends ChannelInboundHandlerAdapter {

						// 读取数据（这里可以读取客户端发送的消息）
						// ChannelHandlerContext ctx：上下文对象，含有管道 pipeline，通道 channel以及地址
						// Object msg：就是客户端发送的数据
						@Override
						public void channelRead(ChannelHandlerContext ctx, Object msg) {
							// 读取从客户端发送的StudentPojo.Student
							StudentPojo.Student student = (StudentPojo.Student) msg;
							System.out.println("客户端发送的数据：id=" + student.getId() + ", name=" + student.getName());
						}

						@Override
						public void channelReadComplete(ChannelHandlerContext ctx) {

							// writeAndFlush：write + Flush，将数据写入缓存，并刷新
							// 需要对发送的数据进行编码
							ctx.writeAndFlush(Unpooled.copiedBuffer("2hello, 客户端~", CharsetUtil.UTF_8));
						}

						// 处理异常，需要关闭通道
						@Override
						public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
							ctx.close();
						}

						@Override
						public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
							super.handlerAdded(ctx);
						}

						@Override
						public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
							super.handlerRemoved(ctx);
						}
					}
		③ Protobuf快速入门实例2，编写程序，使用Protobuf完成如下功能	
			A. 客户端可以随机发送Student PoJo/ Worker PoJo 对象到服务器 (通过 Protobuf
			B. 服务端能接收Student PoJo/ Worker PoJo 对象(需要判断是哪种类型)，并显示信息(通过 Protobuf 解码)
			C. 代码
				a. 编写 Person.proto
					syntax = "proto3";
					option optimize_for = SPEED; // 快速解析
					option java_package = "com.li.netty.codec2"; // 指定生成的包名
					option java_outer_classname = "MyDataInfo"; // 外部类名

					// protobuf 可以使用 message 管理其他的message
					message Person {

					  // 定义一个枚举
					  enum DataType {
						  StudentType = 0; // proto 3 要求 enum 的编号从0开始
						  WorkerType = 1;
					  }

					  // 用 data_type 来标识传的是哪一个枚举类型
					  DataType data_type = 1;

					  // 表示每次枚举类型最多只能出现其中一个，节省时间
					  oneof dataBody {
						  Student student = 2;
						  Worker worker = 3;
					  }
					}

					message Student {
					  int32 id = 1;
					  string name = 2;
					}

					message Worker {
					  string name = 1;
					  int32 id = 2;
					}
				b. 客户端
					import io.netty.bootstrap.Bootstrap;
					import io.netty.channel.ChannelFuture;
					import io.netty.channel.ChannelInitializer;
					import io.netty.channel.ChannelPipeline;
					import io.netty.channel.nio.NioEventLoopGroup;
					import io.netty.channel.socket.SocketChannel;
					import io.netty.channel.socket.nio.NioSocketChannel;
					import io.netty.handler.codec.protobuf.ProtobufEncoder;

					public class NettyClient {

						public static void main(String[] args) {

							// 客户端需要一个事件循环组
							NioEventLoopGroup eventExecutors = new NioEventLoopGroup();
							try {

								// 创建客户端启动对象，使用的是Bootstrap，而不是ServerBootstrap
								Bootstrap bootstrap = new Bootstrap();
								// 设置相关参数
								bootstrap.group(eventExecutors) // 设置线程组
									.channel(NioSocketChannel.class) // 设置客户端通道的实现类（反射）
									.handler(new ChannelInitializer<SocketChannel>() { // 给 事件循环组 的 EventLoop对应的管道设置处理器
										@Override
										protected void initChannel(SocketChannel socketChannel) throws Exception {
											ChannelPipeline pipeline = socketChannel.pipeline();
											// 加入编码器
											pipeline.addLast("encoder", new ProtobufEncoder());
											pipeline.addLast(new NettyClientHandler()); // 加入自定义处理器
										}
									});
								System.out.println("客户端 is ready ......");
								// 连接主机和端口并且同步，生成一个ChannelFuture，开启客户端
								ChannelFuture channelFuture = bootstrap.connect("127.0.0.1", 2648).sync();
								// 对关闭通道进行监听
								channelFuture.channel().closeFuture().sync();
							} catch (Exception e) {
								e.printStackTrace();
							} finally {
								eventExecutors.shutdownGracefully();
							}
						}
					}

					import io.netty.buffer.ByteBuf;
					import io.netty.channel.ChannelHandlerContext;
					import io.netty.channel.ChannelInboundHandlerAdapter;
					import io.netty.util.CharsetUtil;

					import java.util.Random;

					public class NettyClientHandler extends ChannelInboundHandlerAdapter {

						// 当通道就绪就会触发该方法
						@Override
						public void channelActive(ChannelHandlerContext ctx) {

							// 随机发送Student或者Worker 对象
							int r = new Random().nextInt(3);
							MyDataInfo.Person person;
							if (0 == r) {
								person = MyDataInfo.Person.newBuilder().setDataType(MyDataInfo.Person.DataType.StudentType)
										.setStudent(MyDataInfo.Student.newBuilder().setId(1).setName("LiXL").build()).build();
							} else {
								person = MyDataInfo.Person.newBuilder().setDataType(MyDataInfo.Person.DataType.WorkerType)
										.setWorker(MyDataInfo.Worker.newBuilder().setId(2).setName("LiLX").build()).build();
							}
							ctx.writeAndFlush(person);
						}

						@Override
						public void channelRead(ChannelHandlerContext ctx, Object msg) {
							ByteBuf byteBuf = (ByteBuf) msg;
							System.out.println("服务端回复的消息是：" + byteBuf.toString(CharsetUtil.UTF_8));
						}

						@Override
						public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
							cause.printStackTrace();
							ctx.close();
						}
					}
				c. 服务端
					import com.li.netty.codec.StudentPojo;
					import io.netty.bootstrap.ServerBootstrap;
					import io.netty.channel.ChannelFuture;
					import io.netty.channel.ChannelInitializer;
					import io.netty.channel.ChannelOption;
					import io.netty.channel.ChannelPipeline;
					import io.netty.channel.nio.NioEventLoopGroup;
					import io.netty.channel.socket.SocketChannel;
					import io.netty.channel.socket.nio.NioServerSocketChannel;
					import io.netty.handler.codec.protobuf.ProtobufDecoder;

					public class NettyServer {

						public static void main(String[] args) {

							// 创建 bossGroup 和 workerGroup
							// bossGroup只处理连接请求，真正和客户端业务处理，会交给 workerGroup 完成
							// 两个线程组都是无限循环
							// bossGroup 和 workerGroup 含有的子线程（NioEventLoop）的个数，默认是 cpu 核数 * 2
							NioEventLoopGroup bossGroup = new NioEventLoopGroup(1);
							NioEventLoopGroup workerGroup = new NioEventLoopGroup();

							try {
								// 创建服务器端的启动对象，配置参数
								ServerBootstrap bootstrap = new ServerBootstrap();

								// 使用链式编程来进行设置
								bootstrap.group(bossGroup, workerGroup) // 设置两个线程组
										.channel(NioServerSocketChannel.class) // 使用 NioSocketChannel 作为服务器的通道实现
										.option(ChannelOption.SO_BACKLOG, 128) // 设置线程队列得到的连接个数
										.childOption(ChannelOption.SO_KEEPALIVE, true) // 设置保持活动连接状态
										.childHandler(new ChannelInitializer<SocketChannel>() {// 给 workerGroup 的 EventLoop对应的管道设置处理器
											// 给管道设置处理器
											@Override
											protected void initChannel(SocketChannel socketChannel) throws Exception {
												ChannelPipeline pipeline = socketChannel.pipeline();
												// 加入解码器，必须指定对哪种对象进行解码
												pipeline.addLast("ecoder", new ProtobufDecoder(MyDataInfo.Person.getDefaultInstance()));
												pipeline.addLast(new NettyServerHandler()); // 加入自定义处理器
											}
										});
								System.out.println("服务器 is ready ......");

								// 绑定端口并且同步，生成一个ChannelFuture，启动服务器
								ChannelFuture channelFuture = bootstrap.bind(2648).sync();

								// 注册监听器，监听绑定端口成功的回调
								channelFuture.addListener(future -> {
									if (future.isSuccess()) {
										System.out.println("监听端口 2648 成功");
									} else {
										System.out.println("监听端口 2648 失败");
									}
								});
								// 对关闭通道进行监听
								channelFuture.channel().closeFuture().sync();
							} catch (Exception e) {
								e.printStackTrace();
							} finally {
								bossGroup.shutdownGracefully();
								workerGroup.shutdownGracefully();
							}
						}
					}
					
					import com.li.netty.codec.StudentPojo;
					import io.netty.buffer.Unpooled;
					import io.netty.channel.ChannelHandlerContext;
					import io.netty.channel.ChannelInboundHandlerAdapter;
					import io.netty.util.CharsetUtil;

					// 自定义一个handler，需要继承 netty 规定好的某个 HandlerAdapter（规范）
					public class NettyServerHandler extends ChannelInboundHandlerAdapter {

						// 读取数据（这里可以读取客户端发送的消息）
						// ChannelHandlerContext ctx：上下文对象，含有管道 pipeline，通道 channel以及地址
						// Object msg：就是客户端发送的数据
						@Override
						public void channelRead(ChannelHandlerContext ctx, Object msg) {
							// 读取从客户端发送的StudentPojo.Student
							MyDataInfo.Person person = (MyDataInfo.Person) msg;
							if (person.getDataType().equals(MyDataInfo.Person.DataType.StudentType)) {
								System.out.println("客户端发送的数据：id=" + person.getStudent().getId() + ", name=" +  person.getStudent().getName());
							} else if (person.getDataType().equals(MyDataInfo.Person.DataType.WorkerType)){
								System.out.println("客户端发送的数据：id=" + person.getWorker().getId() + ", name=" +  person.getWorker().getName());
							} else {
								System.out.println("类型传输错误");
							}

						}

						@Override
						public void channelReadComplete(ChannelHandlerContext ctx) {

							// writeAndFlush：write + Flush，将数据写入缓存，并刷新
							// 需要对发送的数据进行编码
							ctx.writeAndFlush(Unpooled.copiedBuffer("2hello, 客户端~", CharsetUtil.UTF_8));
						}

						// 处理异常，需要关闭通道
						@Override
						public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
							ctx.close();
						}

						@Override
						public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
							super.handlerAdded(ctx);
						}

						@Override
						public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
							super.handlerRemoved(ctx);
						}
					}
五、Netty编解码器和handler的调用机制
	1. 基本说明
		① netty的组件设计：Netty的主要组件有Channel、EventLoop、ChannelFuture、ChannelHandler、ChannelPipe等
		② ChannelHandler充当了处理入站和出站数据的应用程序逻辑的容器。例如，实现ChannelInboundHandler接口（或ChannelInboundHandlerAdapter），你就
		可以接收入站事件和数据，这些数据会被业务逻辑处理。当要给客户端发送响应时，也可以从ChannelInboundHandler冲刷数据。业务逻辑通常写在一个或
		者多个ChannelInboundHandler中。ChannelOutboundHandler原理一样，只不过它是用来处理出站数据的
		③ ChannelPipeline提供了ChannelHandler链的容器。以客户端应用程序为例，如果事件的运动方向是从客户端到服务端的，那么我们称这些事件为出站的，即
		客户端发送给服务端的数据会通过pipeline中的一系列ChannelOutboundHandler，并被这些Handler处理，反之则称为入站的
	2. 编码解码器
		① 当Netty发送或者接受一个消息的时候，就将会发生一次数据转换。入站消息会被解码：从字节转换为另一种格式（比如java对象）；如果是出站消息，它会
		被编码成字节。
		② Netty提供一系列实用的编解码器，他们都实现了ChannelInboundHadnler或者ChannelOutboundHandler接口。在这些类中，channelRead方法已经被重写了。
		以入站为例，对于每个从入站Channel读取的消息，这个方法会被调用。随后，它将调用由解码器所提供的decode()方法进行解码，并将已经解码的字节转发
		给ChannelPipeline中的下一个ChannelInboundHandler
	3. 解码器-ByteToMessageDecoder
		① 关系继承图
									+----------------+
									| ChannelHandler |
									+----------------+
									     ↑		↑
							+------------+		+-----------+
					  实现  |							    | 继承
				 +-----------------------+		+-----------------------+
				 | ChannelHandlerAdapter | 		| ChannelInboundHandler |
				 +-----------------------+		+-----------------------+
							 ↑								↑
							 +-----------+		+-----------+
									继承 |		| 实现
							 +------------------------------+		
							 | ChannelInboundHandlerAdapter |
							 +------------------------------+
											↑
											| 继承
								 +----------------------+
								 | ByteToMessageDecoder |
								 +----------------------+
		② 由于不可能知道远程节点是否会一次性发送一个完整的信息，tcp有可能出现粘包拆包的问题，这个类会对入站数据进行缓冲，直到它准备好被处理。
		③ 一个关于ByteToMessageDecoder实例分析
			A. 实例
				public class ToIntegerDecoder extends ByteToMessageDecoder {
					@Override
					protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {
						if (in.readableBytes() >= 4) {
							out.add(in.readInt());
						}
					}
				}
			B. 说明：这个例子，每次入站从ByteBuf中读取4字节，将其解码为一个int，然后将它添加到下一个List中。当没有更多元素可以被添加到该List中时，
			它的内容将会被发送给下一个ChannelInboundHandler。int在被添加到List中时，会被自动装箱为Integer。在调用readInt()方法前必须验证所输入的
			ByteBuf是否具有足够的数据
	4. Netty的handler链的调用机制，实例要求：
		① 使用自定义的编码器和解码器来，说明Netty的handler 调用机制，客户端发送long -> 服务器，服务端发送long -> 客户端
		② 实例代码
			A. 服务端
				import io.netty.bootstrap.ServerBootstrap;
				import io.netty.channel.ChannelFuture;
				import io.netty.channel.nio.NioEventLoopGroup;
				import io.netty.channel.socket.nio.NioServerSocketChannel;

				public class MyOutAndInboundServer {

					public static void main(String[] args) throws Exception {

						NioEventLoopGroup boosGroup = new NioEventLoopGroup(1);
						NioEventLoopGroup workerGroup = new NioEventLoopGroup();
						try {

							ServerBootstrap serverBootstrap = new ServerBootstrap();
							serverBootstrap.group(boosGroup, workerGroup)
									.channel(NioServerSocketChannel.class)
									.childHandler(new MyServerInitializer());

							ChannelFuture channelFuture = serverBootstrap.bind(2648).sync();
							channelFuture.channel().closeFuture().sync();
						} finally {
							boosGroup.shutdownGracefully();
							workerGroup.shutdownGracefully();
						}
					}
				}
				
				import io.netty.channel.ChannelInitializer;
				import io.netty.channel.ChannelPipeline;
				import io.netty.channel.socket.SocketChannel;

				public class MyServerInitializer extends ChannelInitializer<SocketChannel> {

					@Override
					protected void initChannel(SocketChannel socketChannel) throws Exception {
						ChannelPipeline pipeline = socketChannel.pipeline();
						// 加入自定义入站解码器
						pipeline.addLast(new MyByteToLongDecoder());
						// 加自定义出站编码器
						pipeline.addLast(new MyLongToByteEnCode());
						pipeline.addLast(new MyServerHandler());
					}
				}
				
				import io.netty.buffer.ByteBuf;
				import io.netty.channel.ChannelHandlerContext;
				import io.netty.handler.codec.ByteToMessageDecoder;

				import java.util.List;

				public class MyByteToLongDecoder extends ByteToMessageDecoder {

					/**
					 * decode 会根据接收的数据，被调用多次，直到确定没有新的元素被添加到list，或者byteBuf没有更多的可读字节为止
					 * 如果list 不为空，就会将list的内容传递给下一个 channelInboundhandler，channelInboundhandler的方法也会被调用多次
					 * @param channelHandlerContext 上下文对象
					 * @param byteBuf 入站的byteBuf
					 * @param list List 集合，将解码后的数据传给下一个 handler
					 */
					@Override
					protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) {
						System.out.println("MyByteToLongDecoder.decode 被调用");
						if (byteBuf.readableBytes() >= 8) {
							list.add(byteBuf.readLong());
						}
					}
				}
				
				import io.netty.channel.ChannelHandlerContext;
				import io.netty.channel.SimpleChannelInboundHandler;

				public class MyServerHandler extends SimpleChannelInboundHandler<Long> {

					@Override
					protected void channelRead0(ChannelHandlerContext channelHandlerContext, Long aLong) {

						System.out.println("从客户端" + channelHandlerContext.channel().remoteAddress() + "读取数据，为：" + aLong);

						channelHandlerContext.writeAndFlush(654321L);
					}

					@Override
					public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
						cause.printStackTrace();
						ctx.close();
					}
				}
			B. 客户端
				import io.netty.bootstrap.Bootstrap;
				import io.netty.channel.ChannelFuture;
				import io.netty.channel.nio.NioEventLoopGroup;
				import io.netty.channel.socket.nio.NioSocketChannel;

				public class MyOutAndInboundClient {

					public static void main(String[] args) throws Exception {

						NioEventLoopGroup eventLoopGroup = new NioEventLoopGroup();
						try {

							Bootstrap bootstrap = new Bootstrap();
							bootstrap.group(eventLoopGroup)
									.channel(NioSocketChannel.class)
									.handler(new MyClientInitializer());
							ChannelFuture channelFuture = bootstrap.connect("localhost", 2648).sync();
							channelFuture.channel().closeFuture().sync();
						} finally {
							eventLoopGroup.shutdownGracefully();
						}
					}
				}
				
				import io.netty.channel.ChannelInitializer;
				import io.netty.channel.ChannelPipeline;
				import io.netty.channel.socket.SocketChannel;

				public class MyClientInitializer extends ChannelInitializer<SocketChannel> {

					@Override
					protected void initChannel(SocketChannel socketChannel) {
						ChannelPipeline pipeline = socketChannel.pipeline();
						// 加自定义出站编码器
						pipeline.addLast(new MyLongToByteEnCode());
						// 加入自定义入站解码器
						pipeline.addLast(new MyByteToLongDecoder());
						pipeline.addLast(new MyClientHandler());
					}
				}
				
				import io.netty.buffer.ByteBuf;
				import io.netty.channel.ChannelHandlerContext;
				import io.netty.handler.codec.MessageToByteEncoder;

				public class MyLongToByteEnCode extends MessageToByteEncoder<Long> {

					@Override
					protected void encode(ChannelHandlerContext channelHandlerContext, Long aLong, ByteBuf byteBuf) throws Exception {

						System.out.println("MyLongToByteEnCode.encode 被调用");
						System.out.println("msg=" + aLong);
						byteBuf.writeLong(aLong);
					}
				}
				
				import io.netty.channel.ChannelHandlerContext;
				import io.netty.channel.SimpleChannelInboundHandler;

				public class MyClientHandler extends SimpleChannelInboundHandler<Long> {

					@Override
					protected void channelRead0(ChannelHandlerContext channelHandlerContext, Long aLong) {

						System.out.println("从服务端接收消息：" + aLong);
					}

					@Override
					public void channelActive(ChannelHandlerContext ctx) {

						System.out.println("MyClientHandler 发送数据");
						ctx.writeAndFlush(123456L);

						// "abcdabcdabcdabcd" 是16个字节
						// 该字处理的前一个处理器是MyLongToByteEnCode，其父类是 MessageToByteEncoder
						// MessageToByteEncoder中有一个write方法，在该方法中有一个判断if (this.acceptOutboundMessage(msg))，即当前 msg 是否应该处理的类型
						// 如果是，则调用encode方法，如果不是，则将mes直接写出去。
						// 因此编写 Encoder 时要注意传入的数据类型和处理的数据类型一致
						// ctx.writeAndFlush(Unpooled.copiedBuffer("abcdabcdabcdabcd", CharsetUtil.UTF_8));
					}
				}
		③ 结论 
			A. 不论解码器handler还是编码器handler，接受的消息类型必须与待处理的消息类型一致，否则该handler不会被执行
			B. 在解码器进行数据解码时，需要判断缓存区（byteBuf）的数据是否足够，否则接收到的结果可能不一致
	5. 解码器-ReplayingDecoder
		① public abstract class ReplayingDecoder<S> extends ByteToMessageDecoder
		② ReplayingDecoder扩展了ByteToMessageDecoder类，使用这个类，我们不必调用readableBytes()方法。参数S指定了用户状态管理的类型，其中Void代表不需要状态管理
		③ 应用实例：使用ReplayingDecoder 编写解码器，对前面的案例进行简化
		④ ReplayingDecoder使用方便，但它也有一些局限性
			A. 并不是所有的 ByteBuf 操作都被支持，如果调用了一个不被支持的方法，将会抛出一个UnsupportedOperationException。
			B. ReplayingDecoder 在某些情况下可能稍慢于 ByteToMessageDecoder，例如网络缓慢并且消息格式复杂时，消息会被拆成了多个碎片，速度变慢
	6. 其它编解码器
		① LineBasedFrameDecoder：这个类在Netty内部也有使用，它使用行尾控制字符（\n或者\r\n）作为分隔符来解析数据
		② DelimiterBasedFrameDecoder：使用自定义的特殊字符作为消息的分隔符。
		③ HttpObjectDecoder：一个HTTP数据的解码器
		④ LengthFieldBasedFrameDecoder：通过指定长度来标识整包消息，这样就可以自动的处理黏包和半包消息。
	7. 其它编码器
		① ObjectEncoder
		② SocksMessageEncoder
		③ Lz4FrameEncoder
		④ ZlibEncode
		⑤ Bzip2Encoder
	8. Log4j 整合到Netty
		① 在Maven 中添加对Log4j的依赖 在 pom.xml
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>1.2.17</version>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>1.7.25</version>
			</dependency>
				<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>1.7.25</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>1.7.25</version>
				<scope>test</scope>
			</dependency>
		② 配置 Log4j , 在 resources/log4j.propertie
			log4j.rootLogger=DEBUG, stdout
			log4j.append.stdout=org.apache.log4j.ConsoleAppender
			log4j.append.stdout.layout=org.apache.log4j.PatternLayout
			log4j.append.stdout.layout.ConversionPattern=[%p] %c{1} - %m%n





































