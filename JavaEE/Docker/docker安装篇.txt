一、Docker 安装 MySQL
	1. 下载MySQL镜像
		docker pull mysql:5.7.30
	2. 启动MySQL容器，并挂载目录
		docker run -p 3306:3306 --name mysql \
		-v /usr/local/mydata/mysql/log:/var/log/mysql \
		-v /usr/local/mydata/mysql/data:/var/lib/mysql \
		-v /usr/local/mydata/mysql/conf:/etc/mysql \
		-e MYSQL_ROOT_PASSWORD=2648 -d mysql:5.7.30
	3. 进入MySQL容器
		docker exec -it mysql /bin/bash
	4. 退出容器
		exit;
	5. 在/usr/local/mydata/mysql/conf/my.cnf中配置MySQL
		vim /usr/local/mydata/mysql/conf/my.cnf
	6. 在my.cnf中输入以下配置内容
		[client]
		default-character-set=utf8

		[mysql]
		default-character-set=utf8

		[mysqld]
		init_connect='SET collation_connection=utf8_unicode_ci'
		init_connect='SET NAMES utf8'
		character-set-server=utf8
		collation-server=utf8_unicode_ci
		skip-character-set-client-handshake
		skip-name-resolve
		default-time_zone='+8:00'
		
		sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
	7. 保存退出并重新启动MySQL容器
	8. 设置MySQL容器在docker重启时自启动：docker update mysql --restart=always
	9. MySQL在虚拟主机中得安装位置为：/etc/mysql， /usr/local/mysql， /usr/local/mysql/bin/mysql
二、Docker 安装 Redis
	1. 下载镜像
		docker pull redis
	2. 创建实例并启动
		mkdir -p /mydata/redis/conf
		touch /mydata/redis/conf/redis.conf

		docker run -p 6379:6379 --name redis \
		-v /usr/local/mydata/redis/data:/data \
		-v /usr/local/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \
		-d redis redis-server /etc/redis/redis.conf
	3. 使用redis-cli连接redis
		docker exec -it redis redis-cli
	4. 设置redis容器在docker重启时自启动
		docker update redis --restart=always
	5. 设置redis的持久化，在/usr/local/mydata/redis/conf/redis.conf中添加配置：appendonly yes（必须在启动容器后才能在配置文件中添加配置）
三、Docker 安装 Elasticsearch
	1. 介绍：
		① elasticsearch：存储和检索数据
		② kibana：可视化检索数据
	2. 下载镜像文件
		① docker pull elasticsearch:7.8.0
		② docker pull kibana:7.8.0
	3. 创建实例
		① Elasticsearch
			A. 创建 Elasticsearch 挂载目录
				mkdir -p /usr/local/mydata/elasticsearch/config
				mkdir -p /usr/local/mydata/elasticsearch/data
			B. 创建 Elasticsearch 的配置文件，并写入配置
				echo "http.host: 0.0.0.0">> config/elasticsearch.yml
			C. 修改 Elasticsearch 挂载目录的权限
				chmod -R 777 /usr/local/mydata/elasticsearch/
			D. 创建容器
				docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \
				-e "discovery.type=single-node" \
				-e ES_JAVA_OPTS="-Xms64m -Xmx512m" \
				-v /usr/local/mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \
				-v /usr/local/mydata/elasticsearch/data:/usr/share/elasticsearch/data \
				-v /usr/local/mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \
				-d elasticsearch:7.8.0
			E. 访问：http://10.10.0.26:9200/，查看 Elasticsearch 是否启动成功
			F. 注意：-e ES_JAVA_OPTS="-Xms64m -Xmx512m" ，设置ES的初始内存和最大内存，否则导致过大启动不了ES
		② Kibana
			A. 创建容器
				docker run --name kibana -e ELASTICSEARCH_HOSTS=http://10.10.0.26:9200 -p 5601:5601 -d kibana:7.8.0
			B. 注意：http://10.10.0.26:9200 为虚拟机地址
四、Docker 安装 Nginx
	1. 随便启动一个 nginx 实例，只是为了复制出配置
		docker run -d -p 80:80 --name nginx nginx
	2. 创建 Nginx 的挂载根目录
		mkdir -p /usr/local/mydata/nginx
	3. 复制 nginx 容器的配置文件到虚拟机
		docker container cp nginx:/etc/nginx .
	4. 停止并且删除 nginx 容器	
		docker stop nginx
		docker rm nginx
	5. 将现有的 nginx 文件夹改名为 conf，创建 nginx 文件夹，将 conf 移动到 nginx 中
		mv nginx/ conf
		mkdir nginx
		mv conf/ nginx/
	6. 创建新的 nginx 容器，执行以下命令
		docker run -p 80:80 --name nginx \
		-v /usr/local/mydata/nginx/html:/usr/share/nginx/html \
		-v /usr/local/mydata/nginx/logs:/var/log/nginx \
		-v /usr/local/mydata/nginx/conf:/etc/nginx \
		-d nginx
五、Docker 安装 Nacos
	1. 拉取镜像
		docker pull nacos/nacos-server:v2.1.0
	2. 准备挂载目录
		mkdir -p /usr/local/mydata/nacos/{logs,conf}
		touch /usr/local/mydata/nacos/conf/application.properties
	3. mysql 新建 nacos 的数据库，并执行脚本
		① 下载地址：https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql
		② 或者复制以下sql脚本
			/*
			 * Copyright 1999-2018 Alibaba Group Holding Ltd.
			 *
			 * Licensed under the Apache License, Version 2.0 (the "License");
			 * you may not use this file except in compliance with the License.
			 * You may obtain a copy of the License at
			 *
			 *      http://www.apache.org/licenses/LICENSE-2.0
			 *
			 * Unless required by applicable law or agreed to in writing, software
			 * distributed under the License is distributed on an "AS IS" BASIS,
			 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
			 * See the License for the specific language governing permissions and
			 * limitations under the License.
			 */

			/******************************************/
			/*   数据库全名 = nacos_config   */
			/*   表名称 = config_info   */
			/******************************************/
			CREATE TABLE `config_info` (
			  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
			  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
			  `group_id` varchar(255) DEFAULT NULL,
			  `content` longtext NOT NULL COMMENT 'content',
			  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
			  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
			  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
			  `src_user` text COMMENT 'source user',
			  `src_ip` varchar(20) DEFAULT NULL COMMENT 'source ip',
			  `app_name` varchar(128) DEFAULT NULL,
			  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
			  `c_desc` varchar(256) DEFAULT NULL,
			  `c_use` varchar(64) DEFAULT NULL,
			  `effect` varchar(64) DEFAULT NULL,
			  `type` varchar(64) DEFAULT NULL,
			  `c_schema` text,
			  `encrypted_data_key` text NOT NULL COMMENT '秘钥',
			  PRIMARY KEY (`id`),
			  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info';

			/******************************************/
			/*   数据库全名 = nacos_config   */
			/*   表名称 = config_info_aggr   */
			/******************************************/
			CREATE TABLE `config_info_aggr` (
			  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
			  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
			  `group_id` varchar(255) NOT NULL COMMENT 'group_id',
			  `datum_id` varchar(255) NOT NULL COMMENT 'datum_id',
			  `content` longtext NOT NULL COMMENT '内容',
			  `gmt_modified` datetime NOT NULL COMMENT '修改时间',
			  `app_name` varchar(128) DEFAULT NULL,
			  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
			  PRIMARY KEY (`id`),
			  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='增加租户字段';


			/******************************************/
			/*   数据库全名 = nacos_config   */
			/*   表名称 = config_info_beta   */
			/******************************************/
			CREATE TABLE `config_info_beta` (
			  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
			  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
			  `group_id` varchar(128) NOT NULL COMMENT 'group_id',
			  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
			  `content` longtext NOT NULL COMMENT 'content',
			  `beta_ips` varchar(1024) DEFAULT NULL COMMENT 'betaIps',
			  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
			  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
			  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
			  `src_user` text COMMENT 'source user',
			  `src_ip` varchar(20) DEFAULT NULL COMMENT 'source ip',
			  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
			  `encrypted_data_key` text NOT NULL COMMENT '秘钥',
			  PRIMARY KEY (`id`),
			  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_beta';

			/******************************************/
			/*   数据库全名 = nacos_config   */
			/*   表名称 = config_info_tag   */
			/******************************************/
			CREATE TABLE `config_info_tag` (
			  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
			  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
			  `group_id` varchar(128) NOT NULL COMMENT 'group_id',
			  `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',
			  `tag_id` varchar(128) NOT NULL COMMENT 'tag_id',
			  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
			  `content` longtext NOT NULL COMMENT 'content',
			  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
			  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
			  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
			  `src_user` text COMMENT 'source user',
			  `src_ip` varchar(20) DEFAULT NULL COMMENT 'source ip',
			  PRIMARY KEY (`id`),
			  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_tag';

			/******************************************/
			/*   数据库全名 = nacos_config   */
			/*   表名称 = config_tags_relation   */
			/******************************************/
			CREATE TABLE `config_tags_relation` (
			  `id` bigint(20) NOT NULL COMMENT 'id',
			  `tag_name` varchar(128) NOT NULL COMMENT 'tag_name',
			  `tag_type` varchar(64) DEFAULT NULL COMMENT 'tag_type',
			  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
			  `group_id` varchar(128) NOT NULL COMMENT 'group_id',
			  `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',
			  `nid` bigint(20) NOT NULL AUTO_INCREMENT,
			  PRIMARY KEY (`nid`),
			  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
			  KEY `idx_tenant_id` (`tenant_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_tag_relation';

			/******************************************/
			/*   数据库全名 = nacos_config   */
			/*   表名称 = group_capacity   */
			/******************************************/
			CREATE TABLE `group_capacity` (
			  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
			  `group_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
			  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
			  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
			  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
			  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
			  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
			  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
			  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
			  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
			  PRIMARY KEY (`id`),
			  UNIQUE KEY `uk_group_id` (`group_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表';

			/******************************************/
			/*   数据库全名 = nacos_config   */
			/*   表名称 = his_config_info   */
			/******************************************/
			CREATE TABLE `his_config_info` (
			  `id` bigint(64) unsigned NOT NULL,
			  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
			  `data_id` varchar(255) NOT NULL,
			  `group_id` varchar(128) NOT NULL,
			  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
			  `content` longtext NOT NULL,
			  `md5` varchar(32) DEFAULT NULL,
			  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00',
			  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00',
			  `src_user` text,
			  `src_ip` varchar(20) DEFAULT NULL,
			  `op_type` char(10) DEFAULT NULL,
			  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
			  `encrypted_data_key` text NOT NULL COMMENT '秘钥',
			  PRIMARY KEY (`nid`),
			  KEY `idx_gmt_create` (`gmt_create`),
			  KEY `idx_gmt_modified` (`gmt_modified`),
			  KEY `idx_did` (`data_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='多租户改造';


			/******************************************/
			/*   数据库全名 = nacos_config   */
			/*   表名称 = tenant_capacity   */
			/******************************************/
			CREATE TABLE `tenant_capacity` (
			  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
			  `tenant_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Tenant ID',
			  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
			  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
			  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
			  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
			  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
			  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
			  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
			  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
			  PRIMARY KEY (`id`),
			  UNIQUE KEY `uk_tenant_id` (`tenant_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='租户容量信息表';


			CREATE TABLE `tenant_info` (
			  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
			  `kp` varchar(128) NOT NULL COMMENT 'kp',
			  `tenant_id` varchar(128) default '' COMMENT 'tenant_id',
			  `tenant_name` varchar(128) default '' COMMENT 'tenant_name',
			  `tenant_desc` varchar(256) DEFAULT NULL COMMENT 'tenant_desc',
			  `create_source` varchar(32) DEFAULT NULL COMMENT 'create_source',
			  `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
			  `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
			  PRIMARY KEY (`id`),
			  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
			  KEY `idx_tenant_id` (`tenant_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='tenant_info';

			CREATE TABLE users (
				username varchar(50) NOT NULL PRIMARY KEY,
				password varchar(500) NOT NULL,
				enabled boolean NOT NULL
			);

			CREATE TABLE roles (
				username varchar(50) NOT NULL,
				role varchar(50) NOT NULL,
				constraint uk_username_role UNIQUE (username,role)
			);

			CREATE TABLE permissions (
				role varchar(50) NOT NULL,
				resource varchar(512) NOT NULL,
				action varchar(8) NOT NULL,
				constraint uk_role_permission UNIQUE (role,resource,action)
			);

			INSERT INTO users (username, password, enabled) VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', TRUE);

			INSERT INTO roles (username, role) VALUES ('nacos', 'ROLE_ADMIN');
	4. 修改配置文件 application.properties
		server.contextPath=/nacos
		server.servlet.contextPath=/nacos
		server.port=8848
		 
		spring.datasource.platform=mysql
		db.num=1
		db.url.0=jdbc:mysql://192.168.26.48:3306/nacos?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
		db.user=root
		db.password=123456
		 
		nacos.cmdb.dumpTaskInterval=3600
		nacos.cmdb.eventTaskInterval=10
		nacos.cmdb.labelTaskInterval=300
		nacos.cmdb.loadDataAtStart=false
		management.metrics.export.elastic.enabled=false
		management.metrics.export.influx.enabled=false
		server.tomcat.accesslog.enabled=true
		server.tomcat.accesslog.pattern=%h %l %u %t "%r" %s %b %D %{User-Agent}i
		nacos.security.ignore.urls=/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/console/server/**
		nacos.naming.distro.taskDispatchThreadCount=1
		nacos.naming.distro.taskDispatchPeriod=200
		nacos.naming.distro.batchSyncKeyCount=1000
		nacos.naming.distro.initDataRatio=0.9
		nacos.naming.distro.syncRetryDelay=5000
		nacos.naming.data.warmup=true
		nacos.naming.expireInstance=true
	5. 启动容器
		docker  run \
		--name nacos -d \
		-p 8848:8848 -p 9848:9848 \
		--privileged=true \
		--restart=always \
		-e JVM_XMS=256m \
		-e JVM_XMX=256m \
		-e MODE=standalone \
		-e PREFER_HOST_MODE=hostname \
		-v /usr/local/mydata/nacos/logs:/home/nacos/logs \
		-v /usr/local/mydata/nacos/conf/application.properties:/home/nacos/conf/application.properties \
		nacos/nacos-server:v2.1.0
	6. 浏览器访问 nacos
		① 访问地址：http://127.0.0.1:8848/nacos/index.html
		② 输入用户名和密码，默认为用户名和密码都为：nacos











