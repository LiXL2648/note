一、简介
	1. Docker 是什么
		① 为什么会有 Docker 出现
			A. 一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对
			的问题，特别是各个版本的迭代之后，不同版本环境的兼容，对运维人员都是考验
			B. Docker 之所以发展如此之迅速，也是因为它对此给出了一个标准化的解决方案
			C. 环境配置如此麻烦，换一台机器，就要重来一次，费时费力。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始
			环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的电脑上可以正常工作”的问题
			D. 之前在服务器配置一个应用得运行环境，要安装各种软件，Java/Tomcat/MySQL/JDBC驱动包等。安装和配置这些东西很麻烦，而且还不能跨平台，要移植也是
			非常麻烦
			E. 传统上认为，软件编码开发/测试结束后，所产生得成果即是程序或是能够编译执行的二进制字节码（Java 为例）。而为了让这些程序可以顺利执行，开发团
			队也得准备完整的部署文件，让运维团队得以部署应用程序，开发需要清楚地告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常
			发生部署失败的状况。Docker 镜像的设计，使得 Docker 得以打破过去（程序即应用）的观念。透过镜像（images）将作业系统核心除外，运作应用程序所需要
			的系统环境，由下到上打包，达到应用程序跨平台的无缝接轨运作
		② Docker 理念
			A. Docker 是基于 GO 语言实现的云开源项目
			B. Docker 的主要目标是“Build，Ship and Run Any App, Anywhere”，也就是通过对应组件的封装、分发、部署、运行等生命周期的管理，使得用户的 App（可
			以是一个 WEB 应用或数据库应用等）及其运行环境能够做到“一次封装，到处运行”。
			C. Linux 容器技术的出现就解决了这样一个问题，而Docker 就是在它的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上
			都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子就可以一键部署好，大大简化了操作。
		③ 一句话：解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。
	2. Docker 的作用：
		① 之前的虚拟机技术
			A. 虚拟机（virtual machine）就是带环境安装的一种解决方案
			B. 它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因此虚拟机看上去跟真实系统一模一
			样，而对于底层系统来说，虚拟机就是一个普通文件，不需要就删掉，对其他部分毫无影响。这类虚拟机完美的运行另一套系统，能够使得应用程序，操作系统和
			硬件三者之间的逻辑不变。
			C. 虚拟机的缺点：资源占用多、冗余步骤多、启动慢  
		② 容器虚拟化技术
			A. 由于前面虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）
			B. Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件所需要的所有资源打包到一个隔离的容器中。容器于虚拟机不同，不
			需要捆绑一整套操作系统，只需要软件工作所需要的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。
			C. 比较了Docker 和传统虚拟化方式的不同之处：
				a. 传统虚拟机技术是虚拟出一套硬件，在其上运行一个完整操作系统，在该系统上运行所需要应用进程
				b. 而容器内的应用进程直接运行于宿主机的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比虚拟机更为轻便。
				c. 每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进行不会相互影响，能区分计算资源。
		③ 开发/运维（DevOps）：一次构建、随处运行
			A. 更快速的应用交付和部署：传统的应用开发完成之后，需要提供一堆安装程序和配置说明文档，安装部署后需要根据配置文档进行繁琐的配置才能正常执行。
			Docker 化之后只需要交付少量容器镜像文件，在正式生产环境加镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间
			B. 更便捷的升级扩容缩容
			C. 更简单的系统运维
			D. 更高效的计算资源利用
	3. Docker 下载
		① 官网：https://www.docker.com/
		② 中文官网：https://www.docker-cn.com/
		③ 仓库，Docker Hub 官网：https://hub.docker.com/
二、Docker 安装
	1. 前提说明
		① CentOS Docker 安装
			A. Docker 支持的 CentOS 版本：CentOS 7（64-bit）、CentOS 6.5（64-bit）或更高
		② 前提条件
			A. 目前，CentOS 仅发行版本中的内核支持 Docker
			B. Docker 运行在 CentOS 7 上，要求系统为64位，系统内核版本为3.10以上
			C. Docker 运行在 CentOS 6.5或更高的版本的 CentOS 上，要求系统为64位，系统版本内核为2.6.32-431或者更高版本
		③ 查看自己的内核
			A. uname 命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。
				uname -r
		④ 查看已安装的 CentOS 版本信息
			a. lsb_release -a
			b. cat /etc/redhat-release
	2. Docker 的基本组成
		① 镜像（Images）：
			A. Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多个容器
			B. 容器与镜像的关系类似于面向对象编程中的对象与类
		② 容器（Container）:
			A. Docker 利用容器（Container）独立运行的一个或一组应用。容器是用镜像创建的运行实例
			B. 它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台
			C. 可以把容器看作是一个简易版的 Linux 环境（包括 root 用户权限、进程空间、用户空间和网络空间）和运行在其中的应用程序
			D. 容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一的区别在于容器的最上层是可读可写的
		③ 仓库（Repository）:
			A. 仓库（Repository）是集中存放镜像文件的场所
			B. 仓库（Repository）和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）
			C. 仓库分为公开仓库（Public）和私有仓库（Private）两种形式
			D. 最大的公开仓库是 Docker Hub（https://hub.docker.com/），存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云、网易云等。
		④ 小总结：需要正确地理解仓储/镜像/容器这几个概念：
			A. Docker 本身是一个容器运行载体或者称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就似乎 image 镜像文件。只
			有通过这个文件才能生成 Docker 容器。image 文件可以看作是容器恶模板。Docker 根据 image 文件生成容器实例。同一个image 文件，可以生成多个同时运行的容器实例
			B. iamge 文件生成的容器实例，本身也是一个文件，称为镜像文件
			C. 一个容器运行一种服务，当我们需要的时候，就可以通过 Docker 客户端创建一个对应的运行实例，也就是我们的容器
			D. 至于仓储，就是存放了一堆镜像的地方，我们可以把镜像发布到仓储中，需要的时候从仓储中拉下来就可以了。
		⑤ cker 的架构图：
										--------------------------------------			-----------------
			----------------			|			  Docker_Host			 |			|	Registry	|
			| 	 Client	   |			| ---------------------------------- |			| ------------- |
			|			   |	|-------> | 		 Docker daemon         | | -----	| |           | |
			| docker build | ---- |	|	| ---------------------------------- |	   |	| ------------- |
			| docker pull  | ------	|	| ----------------	| 	------------ |	   |	| ------------- |
			| docker run   | --------	| |  Conrainers  |  | 	|  Images  | |	 --|--- | |	  MySQL	  |	|
			----------------			| |	------------ |	| 	| -------- | |	 |		| ------------- |
										| |	|		   | |<-|-- | |	MySQL| | | <-|		| ------------- |
										| |	------------ |   	| -------- | |			| |			  | |
										| |	------------ |	 	| -------- | |			| ------------- |
										| |	|		   | |   	| |	  	 | | |			-----------------
										| |	------------ |	 	| -------- | |
										| ----------------	 	------------ |
										--------------------------------------
	3. 安装步骤：
		① CentOS 6.8 安装 Docker
			A. Docker 使用 EPEL 发布，RHEL 系的 OS 首先要确保已经持有 EPEL 仓库，否则先检查 OS 的版本，然后安装相应的 EPEL 包。
				yum install -y epel-release
			B. yum install -y docker-io
			C. 安装后的配置文件：/etc/sysconfig/docker
			D. 启动 Docker 后台服务：service docker start
			E. docker version验证
		② CentOS 7 安装 Docker
			A. 官网的 CentOS 7 安装步骤：https://docs.docker.com/engine/install/centos/
			B. 确定是 CentOS 7 及以上版本：cat /etc/redhat-release
			C. yum 安装gcc 相关
				a. yum -y install gcc
				b. yum -y install gcc-c++
			D. 卸载 旧版本的 Docker（官网步骤）
				sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine
			E. 需要安装的软件包（官网步骤）
				sudo yum install -y yum-utils
			F. 设置 stable 镜像仓库（官网步骤）
				a. 不建议：sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
				b. 建议：sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
				c. 查看文件：/etc/yum.repos.d/docker-ce.repo
			G. Optional: Enable the nightly or test repositories（官网步骤，可选的，忽略）
				a. sudo yum-config-manager --enable docker-ce-nightly
				b. sudo yum-config-manager --enable docker-ce-test
				c. sudo yum-config-manager --disable docker-ce-nightly
			H. 更新 yum 软件包索引（官网没有，建议执行）
				yum makecache fast
			I. 安装 Docker CE（官网步骤）
				sudo yum install -y docker-ce docker-ce-cli containerd.io
			J. 启动 Docker
				systemctl start docker
			L. 测试
				docker version
			M. 配置镜像加速,使用阿里云的镜像加速器
mkdir -p /etc/docker

tee /etc/docker/daemon.json <<-'EOF'
{
"registry-mirrors": ["https://y8blvi1l.mirror.aliyuncs.com"]
}
EOF
				
				systemctl daemon-reload
				systemctl restart docker
			N. 卸载
				systemctl stop docker
				sudo yum remove docker-ce docker-ce-cli containerd.io
				sudo rm -rf /var/lib/docker
	4. Hello World
		① 启动 Docker 后台容器，测试运行 hello-world
			A. 用Docker 命令启动 hello-world 容器
				docker run hello-world
			B. 由于本地没有 hello-world 这个镜像，所以会下载一个 hello-world 的镜像，并在容器中运行
				Unable to find image 'hello-world:latest' locally
				latest: Pulling from library/hello-world
			C. 输出这段提示后，hello-world 就会停止运行，容器自动终止
				Hello from Docker!
				This message shows that your installation appears to be working correctly.
		② run 的工作流程
												----------------------------------
												| 以该镜像为模板生成容器实例运行 |
												----------------------------------
															  ↑
															 是
							-----------------				  |
			--------		|  Docker在本机 |		  --------------------		   --------------------		  ----------------------------------
			| 开始 | -----> |				| ------> | 本机是否有该镜像 |		   | 下载该镜像到本地 | ----> | 以该镜像为模板生成容器实例运行 |
			--------		|  寻找该镜像   |		  --------------------		   --------------------		  ----------------------------------
							-----------------				  |								↑
															 否							   是
															  ↓							    |
												------------------------------		 ----------------		  --------------------------------
												| 去 Docker Hub 上查找该镜像 | ----> | Hub 能否找到 | --否--> | 返回失败错误，查找不到该镜像 |
												------------------------------		 ----------------		  --------------------------------
	5. 底层原理
		① Docker 是怎么工作的
			A. Docker 是一个 Client-Server 结构的系统，Docker 守护进程运行在主机上，然后通过 Socket 连接从客户端访问，守护进程从客户端接受命令并管理运行
			在主机上的容器。容器，是一个运行时环境，就是我们前面说的集装箱。
		② 为什么 Docker 比 VM 快
			A. Docker 有着比虚拟机更少的抽象层。由于 Docker 不需要 Hypervisor（连接虚拟机与宿主机的接口） 实现硬件资源虚拟化运行在 Docker 容器上的程序直
			接使用的都是实际物理机的硬件资源。因此在 CPU、内存利用率上 Docker 将会在效率上有明显优势
			B. Docker 利用的是宿主机的内核，而不需要 Guest OS（客户端操作系统），因此，当新建一个容器时，Docker 不需要和虚拟机一样重新加载一个操作系统内
			核。仍而避免引寻、加载操作系统内核返而比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载 Guest OS，返个新建过程是分钟级别的。而 
			Docker 由于直接利用宿主机的操作系统，则省略了返个过程
			C. Docker 容器与虚拟机 VM 比较
				------------------------------------------------------------------------
				|			 | Docker 容器				| 虚拟机 VM					   |
				|----------------------------------------------------------------------|
				| 操作系统 	 | 与宿主机共享 OS 			| 宿主机 OS 上运行虚拟机 OS    |
				|----------------------------------------------------------------------|
				| 存储大小	 | 镜像小，便于存储与传输	| 镜像庞大（vmdk、vdi等）	   |
				|----------------------------------------------------------------------|
				| 运行性能	 | 几乎无额外性能损失		| 操作系统额外的 CPU、内存消耗 |
				|----------------------------------------------------------------------|
				| 移植性	 | 轻便、灵活、适应于 Linux | 笨重，与虚拟化技术耦合度高   |
				|----------------------------------------------------------------------|
				| 硬件亲和性 | 面向软件开发者			| 面向硬件运维者			   |
				|----------------------------------------------------------------------|
				| 部署速度	 | 快速、秒级				| 较慢，10s 以上			   |
				------------------------------------------------------------------------
三、Docker 常用命令
	1. 帮助命令
		① docker version：docker 的版本信息
		② docker info：docker 的安装信息，比docker version更全面
		③ docker --help：docker 的所有的操作选项、命令和可选参数
	2. 镜像命令
		① docker images：
			A. 列出本地上的镜像：
				a. 各个选项说明：
					(1) REPOSITORY：表示镜像的仓库源
					(2) TAG：镜像的标签
					(3) IMAGE ID：镜像 ID
					(4) CREATED：镜像创建时间
					(5) SIZE：镜像大小
				b. 同一仓库源可以有多个 TAG，代表这个仓库源的不同版本，我们使用 REPOSITORY:TAG 来定义不同得镜像。如果不指定一个镜像得版本标签，例如只使用mysql，
				docker 将默认使用 mysql:latest 镜像
			B. OPTION说明：
				a. -a：列出本地所有的镜像（含中间映像层）
				b. -q：只显示镜像 ID
				c. --digests：显示镜像的摘要信息
				d. --no-trunc：显示完整的镜像信息
			C. 举例：
				a. docker images -qa：列出所有镜像 ID
				b. docker images --digests --no-trunc：列出所有镜像的摘要信息和完整信息
		② docker search 某个镜像的名字：
			A. 网站：https://registry.hub.docker.com/
			B. 命令：docker search [option]：镜像名字
			C. option 说明：
				a. --no-trunc：显示镜像的完整描述
				b. -s：列出收藏数不小于指定值的镜像
				c. -automated：只列出 automated build（自动构建）类型的镜像
			D. 举例：	
				docker search --no-trunc -s 30 tomcat：查看点赞数超过 30 的所有 tomcat 的完整镜像信息。
		③ docker pull 某个镜像名字：
			A. 下载镜像
			B. docker pull 某个镜像名字
			C. 举例：
				docker pull tomcat：下载 tomcat 镜像，默认最新版
		④ docker rmi 某个镜像名字或者ID：删除镜像
			A. 删除单个
				a. 命令：docker rmi hello-world
				b. 如果镜像生成的容器在后台使用，则会报错，删除失败，需要强制删除，docker rmi -f hello-world
					Error response from daemon: conflict: unable to remove repository reference "hello-world" (must force) - container 18281ee972a2 is using its 
					referenced image bf756fb1ae65
			B. 删除多个
				a. 命令：docker rmi -f 镜像名1:TAG 镜像名1:TAG
				b. 举例：
					docker rmi -f tomcat:latest hello-world:latest
			C. 删除全部：docker rmi -f $(docker images -qa)
	3. 容器命令	
		① 有镜像才能创建容器，这是根本前提（下载一个 CentOS 镜像演示）：docker pull centos
		② 新建并启动容器：docker run [options] IMAGE [COMMAND][ARG...]
			A. OPTIONS说明：有些是一个减号，有些是两个减号
			B. --name="容器的名字"：为容器指定一个名称，如果没有指定，docker 会随机生成一个容器名字
			C. -d：后台运行容器，并返回容器 ID，也即启动守护式容器
			D. -i：以交互式运行容器，通常与 -t 同时使用
			E. -t：为容器重新分配一个伪输入终端，通常与 -i 同时使用
			F. -P：随机端口映射
			G. -p：指定端口映射，有以下四种格式
				a. ip:hostPort:containerPort
				b. ip::containerPort
				c. hostPort:containerPort
				d. containerPort
			H. 举例：
				a. docker run -it 300e315adb2f [/bin/bash]：
					(1) centos 的镜像 ID 为 300e315adb2f
					(2) 以 centos 的镜像为模板，生成了一个容器 ea9894831578，并以 /bin/bash 的方式登陆进入到了该产生的容器内部的 centos 根目录下
					(3) 使用 ls 查看当前 centos 容器内部的当前路径的所有文件夹
					(4) 使用 ps -ef 查看 centos 容器内部的进程
		③ 列出当前所有正在运行的容器：docker ps [options]
			A. -a：列出当前所有正在运行的容器 + 历史上运行过的容器
			B. -l：显示最近创建的容器
			C. -n num：显示最近 num 个创建的容器
			D. -q：静默模式，只显示容器编号
			E. --no-trunc：不截断输出
		④ 退出容器，两种退出方式
			A. exit：容器停止推出
			B. ctrl+P+Q：容器不停止退出
		⑤ 启动容器：docker start 容器 ID 或者容器名
		⑥ 重启容器：docker restart 容器 ID 或者容器名
		⑦ 停止容器：docker stop 容器 ID 或者容器名
		⑧ 强制停止容器：docker kill 容器 ID 或者容器名
		⑨ 删除已停止的容器：docker rm 容器 ID 或者容器名
			A. -f：强制删除，docker rm -f centos1219
			B. 一次性删除多个容器：
				a. docker rm -f $(docker ps -a -q)
				b. docker ps -a -q | xargs docker rm
		⑩ 重点：
			A. 启动守护式容器：docker run -d --name centos1219 centos
				a. 使用镜像 centos:latest 以后台模式启动一个容器：
				b. 问题：然后使用 docker ps -a 进行查看，会发现容器已经退出，很重要的要说明的一点：Docker容器后台运行，就必须有一个前台进程
				容器运行命令如果不是那些一直挂起的命令（比如运行 top，tail），就是会自动退出的
				c. 这个是 docker 的机制问题，比如 web 容器，以 nginx 为例，正常情况下，我们配置启动服务只需要响应service即可。例如 service
				nginx start，但是这样做，nginx 为后台进程模式运行，就导致 docker 前台没有运行的应用，这样的容器后台启动后，就会立即自杀，因为
				它觉得没事可做了。所以最佳的解决方案就是，将要运行的程序以前台进程的形式启动	
			B. 查看容器日志：docker logs -f -t --tail 容器 ID 或者容器名
				a. -t：加入时间戳
				b. -f：跟随最新的日志打印
				c. --tail num：显示最后 num 条
				d. 举例：
					(1) 运行：docker run -d --name centos1219 centos /bin/sh -c "while true; do echo hello LiXL;sleep 2; done"，以后台的形式循环打印消息
					(2) 查看日志：docker logs centos1219 
					(3) 查看最新3条日志并不停追加：docker logs -t -f --tail 3 centos1219
			C. 查看容器内部运行的进程：docker top 容器 ID 或者容器名
			D. 查看容器内容细节：docker inspect 容器 ID 或者容器名
			E. 进入正在运行的容器并以命令行交互
				a. docker exec -it 容器 ID 或者容器名 bashShell，bashShell 有以下选项
					(1) /bin/bash：进入容器
					(2) ls -l /：在宿主机查看容器内部根路径的文件目录
					(3) ……
				b. 重新进入 docker attach 容器 ID 或者容器名
				c. 上述两种方式的区别
					(1) attach：直接进入容器启动命令，不会启动新的进程
					(2) exec：是在容器中打开新的终端，并且可以启动新的进程
					(3) exec 功能比 attach 强大，exec 可以进入容器内部，也可以在宿主机直接得到容器的结果，而 attach 需要先进入容器内部
			F. 从容器中拷贝文件到主机：
				a. docker cp 容器 ID 或者容器名:容器内部路径 宿主机目的路径
				b. 举例：docker cp centos1220:/tmp/hello.txt /tmp
	4. 总结：
		attach      Attach to a running container：当前 shell 下 attach 连接指定运行镜像
		build       Build an image from a Dockerfile：通过 Dockerfile 定制镜像
		commit      Create a new image from a container's changes：提交当前容器为新的镜像
		cp          Copy files/folders between a container and the local filesystem：从容器中拷贝指定文件或者目录到宿主机中
		create      Create a new container：创建一个新的容器，同 run，但不启动容器
		diff        Inspect changes on a container's filesystem：查看docker 容器变化
		events      Get real time events from the server：从docker 服务获取容器实时事件
		exec        Run a command in a running container：在已存在的容器上运行命令
		export      Export a container's filesystem as a tar archive：导出容器的内容流作为一个tar归档文件[对应import]
		history     Show the history of an image：展示一个镜像形成历史
		images      List images：列出系统当前的进行
		import      Import the contents from a tarball to create a filesystem image：从 tar 包中的内容创建一个新的文件系统映像[对应export]
		info        Display system-wide information：显示系统相关信息
		inspect     Return low-level information on Docker objects：查看容器详细信息
		kill        Kill one or more running containers：杀死知道 docker 容器
		load        Load an image from a tar archive or STDIN：从 tar 包中加载一个镜像[对应 save]
		login       Log in to a Docker registry：注册或者登陆一个docker 源服务器
		logout      Log out from a Docker registry：从当前 docker registry 退出
		logs        Fetch the logs of a container：输出当前日志信息
		pause       Pause all processes within one or more containers：暂停容器
		port        List port mappings or a specific mapping for the container 查看映射端口对应的容器内部的源端口
		ps          List containers：列出容器列表
		pull        Pull an image or a repository from a registry：从 docker 镜像源服务器拉取指定镜像或者库镜像
		push        Push an image or a repository to a registry：推送指定镜像或者库镜像至 docker 源服务器
		rename      Rename a container：重新命名一个 docker 容器
		restart     Restart one or more containers：重新启动 docker 容器
		rm          Remove one or more containers：移除一个或者多个容器
		rmi         Remove one or more images：移除一个或者多个镜像[无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除]
		run         Run a command in a new container：创建一个新的容易并运行一个命令
		save        Save one or more images to a tar archive (streamed to STDOUT by default)：保存一个镜像为一个 tar 包[对应load]
		search      Search the Docker Hub for images：在docker hub 中搜索镜像
		start       Start one or more stopped containers：启动容器
		stats       Display a live stream of container(s) resource usage statistics：查看容器的启动状态
		stop        Stop one or more running containers：停止容器
		tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE：给源中镜像打标签
		top         Display the running processes of a container：查看容器中运行的进程信息
		unpause     Unpause all processes within one or more containers：取消暂停容器
		update      Update configuration of one or more containers：更新一个或者多个容器
		version     Show the Docker version information：查看 docker 版本号
		wait        Block until one or more containers stop, then print their exit codes：截取容器停止时的退出状态值
四、Docker 镜像
	1. Docker 镜像是什么：
		① 镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需要的所有内容，包括代码、
		运行时、库、环境变量和配置文件。
		③ UnionFS（联合文件系统）
			A. UnionFS（联合文件系统）：是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将
			不同目录挂载到同一个虚拟文件系统下（unite serveral directories into a single virtual filesystem）。Union 文件系统是 Docker 镜像的
			基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。
			B. 特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包括
			所有底层的文件和目录
		② Docker 镜像加载原理
			A. docekr 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS
			B. bootfs（boot file system）主要包含 bootloader 和 kernel（内核），bootloader 主要是引导加载 kernel，Linux 刚启动时会加载 bootfs 文
			件系统，在 Docker 镜像的最底层是 bootfs，这一层与我们典型的 Linux 和 Unix系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后整
			个内核就都在内存中了，此时内存的使用权已由 bootfs转交给内核，而系统也会卸载 bootfs
			C. rootfs（root file system），在 bootfs 之上。包含的就是典型 Linux 系统中的 /dev，/proc，/bin，/etc 等标准目录和文件。rootfs 就是各种
			不同操作系统发行版，比如 Ubuntu，Centos等等
			D. 平时我们安装的虚拟机的 CentOS 都是好几个G，为什么 docker 这里才 200m？对于一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令、
			工具和程序库就可以了，因为最底层直接用 HOST 的 kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的 linux 发行版，bootfs 基本是一样
			的，rootfs 会有差别，因此不同的发行版可以用公共的 bootfs。
		④ 分层的镜像：以 pull 为例，在下载过程中可以看到 docker 的镜像好像是一层一层地在下载
		⑤ 为什么 Docker 镜像要采用这种分层结构
			A. 最大的一个好处就是共享资源
			B. 比如：有好多个系统都从相同的 base 镜像构建而来，那么宿主机只需要在磁盘上保存一份 base 镜像，同时内存中也只需要加载一份 base 镜像，就
			可以为所有容器服务了。而且镜像的每一层都可以被共享
	2. 特点
		① Docker 镜像都是只读的
		② 当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称为“容器层”，“容器层”之下的都叫“镜像层”
	3. Docker 镜像 commit 操作补充
		① docker commit 提交容器副本使之成为一个新的镜像
		② docker commit -m="提交的描述信息" -a="作者" 容器 ID 或者容器名 要创建的目标镜像名:[标签名]
		③ 案例演示：
			A. 从 docker hub 上下载 tomcat 镜像到本地并成功运行
				a. docker run -it -p 8080:8080 tomcat
				b. -p 主机端口:docker 容器端口
				c. -P：随机分配端口
				d. -i：交互
				e. -t：终端
			B. Docker 运行 Tomcat，访问 localhost:8080 报 404
				a. 原因：容器内webapps文件夹为空，导致访问404
				b. 修改：
					(1) 进入容器内部：docker exec -it tomcat1220 /bin/bash
					(2) 备份原来的 webapps 文件：mv webapps webapps.backup
					(3) 将 webapps.dist 改为 webapps：mv webapps.dist webapps
			C. 也即当前的 tomcat 运行实例是一个可以访问首页容器，以它为模板 commit 一个没有 doc 的 tomcat 新镜像 LiXL/tomcat
				docker commit -a="LiXL" -m="tomcat with index" tomcat1220 lixl/tomcat:1.0
			D. 启动新的镜像和原来的对比
				a. 启动新的镜像容器：docker run -it --name mytomcat1220 -p 8089:8080 lixl/tomcat:1.0
				b. 原拉取的 tomcat镜像，启动容器，访问首页 404
				c. 新提交的 tomcat镜像，启动容器，访问首页 成功
		④ 以后台的方式创建一个容器并启动：docker run -d -it --name mytomcat1221 -p 8087:8080 lixl/tomcat:1.0
五、Docker容器数据卷
	1. 是什么
		① Docker 的理念
			A. 将运用与运行的环境打包成容器运行，运行可以伴随着容器，但是我们对数据的要求希望是持久化
			B. 容器之间希望有可能数据共享
		② Docker 容器产生的数据，如果不通过 docker commit 生成新的镜像，使得数据作为镜像的一部分保存下来，那么删除容器之后，数据
		自然也就没有了
		③ 为了能保存数据在 docker 中我们使用卷
		④ 一句话：有点类似我们 Redis 里面的 rdb 和 aof 文件
	2. 能干什么
		① 容器的持久化
		② 容器间继承 + 数据共享
		③ 卷就是目录或文件，存在于一个或者多个容器，由 docker 挂载到容器，但不属于联合文件系统，因此能够绕过 Union File System 提供
		一些用于持续存储或共享数据的特性
		④ 卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此 Docker 不会在容器删除时删除其挂载的数据卷
		⑤ 特点：
			A. 数据卷可在容器之间共享或者重用数据
			B. 卷中的更改可以直接生效
			C. 数据卷中的更改不会包含在镜像的更新中
			D. 数据卷的生命周期一直持续到没有容器使用它为止
	3. 数据卷
		① 直接命令添加
			A. 命令：docker run -it -v /宿主机绝对路径目录:/容器内目录 镜像名或者镜像 ID
				a. 举例：docker run -it --name centos1223 -v /usr/local/mydata:/usr/local/myData centos
				b. 出现Permission denied：
					(1) 原因是CentOS7中的安全模块selinux把权限禁掉了：
					(2) 在运行容器的时候，给容器加特权，也就是加上   --privileged=true 参数
						docker run -it --name centos1227 -v /usr/local/mydata:/usr/local/myData:ro --privileged=true centos
			B. 查看数据卷是否挂载成功：docker inspect 容器名或者 ID
				a. 举例：docker inspect centos1223
				b. 若出现 "Binds": ["/usr/local/mydata:/usr/local/mydata"] 则证明挂载成功
			C. 容器和宿主机之间数据共享
				a. 在宿主机上的 /usr/local/mydata 目录上新建 hello.txt 文件，在容器的 /usr/local/myData 目录中能看到相同的文件 hello.txt
				b. 在容器的 /usr/local/myData 目录上修改 hello.txt，并新建 hello1.txt，在宿主机的 /usr/local/mydata 目录上能看到修改内容的
				hello.txt 和新建的 hello1.txt
			D. 容器停止退出后，主机修改数据是否同步
				a. 容器停止退出：exit
				b. 主机修改 hello.txt
				c. 容器重启进行：docker start centos1223 docker exec it centos1223 /bin/bash
				d。 容器查看主机修改过的 hello.txt，内容同步
			E. 命令（带权限）：docker run -it -v 宿主机绝对路径目录:/容器内目录:ro 镜像名或者镜像 ID
				a. 举例：
					(1) 创建容器：docker run -it --name centos1227 -v /usr/local/mydata:/usr/local/myData:ro --privileged=true centos
					(2) 在 /usr/local/myData 中新建 hello3.txt 或者修改 hello.txt 文件
					(3) 出现：Read-only file system的 提示信息
				b. 查看容器 docker inspect centos1227 
					"Binds": [
						"/usr/local/mydata:/usr/local/myData:ro"
					],
		② DockerFile添加：
			A. /usr/local/mydata 目录下新建 mydocker 文件夹并进入
				cd /usr/local/mydata/
				mkdir mydocker
				cd mydocker/
			B. 可在 Dockerfile 中使用 VOLUME 指令来给镜像容器添加一个或多个数据卷
				a. VOLUME["/usr/local/myData1", "/usr/local/myData2", "/usr/local/myData3"]
				b. 说明：
					(1) 出于可移植性和分享的考虑，用 “-v 主机目录:容器目录” 这种方法不能够直接在 Dockerfile 中实现
					(2) 由于宿主机目录是依赖于特定宿主机的，并不能保证在所有宿主机上都存在这样的特定目录
			C. File 构建
				a. 新建Dockerfile：vim Dockerfile
					# volume test
					FROM centos
					VOLUME ["/usr/local/myData/myCentosDir1", "/usr/local/myData/myCentosDir2"]
					CMD echo "finish,......success1"
					CMD /bin/bash
				b. 相当于：docker run -it -v /usr/local/mydata/myCentosDir1:/usr/local/myData/myCentosDir1, 
				/usr/local/mydata/myCentosDir2:/usr/local/myData/myCentosDir2 centos
			D. build 后生成镜像，获得一个新镜像：docker build -f /usr/local/mydata/mydocker/Dockerfile -t lixl/centos .
			E. run 容器：docker run -it --name mycentos1227 lixl/centos
			F. 通过上述步骤，容器内的卷目录地址已经知道，对应的主机目录地址在哪？
				a. 在容器 mycentos1227 的 myCentosDir1 目录中新建 hello1.txt
				b. 使用 docker inspect mycentos1227 查看
					"Mounts": [
						{
							"Type": "volume",
							"Name": "f70c32a8140d01040c4d85476482ac10657122fa3d7c1c6bb3e225e5f1c90b6a",
							"Source": "/var/lib/docker/volumes/f70c32a8140d01040c4d85476482ac10657122fa3d7c1c6bb3e225e5f1c90b6a/_data",
							"Destination": "/usr/local/myData/myCentosDir2",
							"Driver": "local",
							"Mode": "",
							"RW": true,
							"Propagation": ""
						},
						{
							"Type": "volume",
							"Name": "d84d74c59ebd916790840cdb0dcefc33c87d20e801e6ba4174046c7f331cca17",
							"Source": "/var/lib/docker/volumes/d84d74c59ebd916790840cdb0dcefc33c87d20e801e6ba4174046c7f331cca17/_data",
							"Destination": "/usr/local/myData/myCentosDir1",
							"Driver": "local",
							"Mode": "",
							"RW": true,
							"Propagation": ""
						}
					]
				c. 如果没有指定宿主机的目录，Dockerfile 会默认在主机上生成一个目录与容器的目录相对应
				d. 容器 mycentos1227 的 myCentosDir1 目录对应的宿主机目录中可以查看到相同的文件，并且在宿主机中修改hello1.txt，会同步到容器中
			G. 主机对应的默认地址：/var/lib/docker/volumes/
	4. 数据卷容器
		① 是什么：命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为数据卷容器
		② 总体介绍
			A. 以上一步新建的镜像 lixl/centos 为模板并运行容器 mycentos01/mycentos02/mycentos03/
			B. 容器已经具有容器卷 /usr/local/myData/myCentosDir1，/usr/local/myData/myCentosDir2
		③ 容器间传递共享（--volumes-from）
			A. 先启动一个父容器 mycentos01，在 /usr/local/myData/myCentosDir2 新增内容
				a. docker run -it --name mycentos01 lixl/centos
				b. cd /usr/local/myData/myCentosDir2
				c. touch mycentos01_add.txt
			B. mycentos02/mycentos03/ 继承自 mycentos01
				a. --volumes-from
				b. 命令：
					(1) docker run -it --name mycentos02 --volumes-from mycentos01 lixl/centos
					(2) mycentos02/mycentos03 分别在 /usr/local/myData/myCentosDir2 新增内容
						(a) cd /usr/local/myData/myCentosDir2/
						(b) ls mycentos01_add.txt
						(c) touch mycentos02_add.txt
					(3) mycentos02/mycentos03 的 /usr/local/myData/myCentosDir2 目录中存在 mycentos01 新建的 mycentos01_add.txt 文件，而 mycentos01 的
						/usr/local/myData/myCentosDir2 目录中存在 mycentos02/mycentos03 新建的 mycentos02_add.txt 和 mycentos03_add.txt
			C. 回到 mycentos01 可以看到 mycentos02/mycentos03 各自添加的文件都能共享
			D. 删除 mycentos01，mycentos02 修改后 mycentos03 能否访问，结果显示可以访问
			E. 删除 mycentos02，mycentos03 能否访问，结果显示可以访问
			G. 新建 mycentos04，继承 mycentos03 后再删除 mycentos03，能否访问，结果显示可以访问
			H. 结论：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止
六、Dockerfile 解析
	1. Dockerfile 是什么
		① Dockerfile 是用来构建 Docker 镜像的构建文件，是由一系列命令和参数构成的脚本
		② 构建三步骤
			A. 编写 Dockerfile 文件
			B. docker build
			C. docker run
		③ 文件是什么样，以 centos 为例
			A. centos Dockerfile
				FROM scratch
				ADD centos-7-x86_64-docker.tar.xz /

				LABEL \
					org.label-schema.schema-version="1.0" \
					org.label-schema.name="CentOS Base Image" \
					org.label-schema.vendor="CentOS" \
					org.label-schema.license="GPLv2" \
					org.label-schema.build-date="20201113" \
					org.opencontainers.image.title="CentOS Base Image" \
					org.opencontainers.image.vendor="CentOS" \
					org.opencontainers.image.licenses="GPL-2.0-only" \
					org.opencontainers.image.created="2020-11-13 00:00:00+00:00"

				CMD ["/bin/bash"]
			B. 参数说明：
				a. FROM scratch：源镜像
				b. FROM scratch：标签，说明
				c. CMD ["/bin/bash"]：默认命令，相当于 docker run -it centos /bin/bash
	2. Dockerfile 构建过程解析
		① Dockerfile 内容基础知识
			A. 每条保留字指令都必须为大写字母且后面要跟随至少一个参数
			B. 指令按照从上到下，顺序执行
			C. # 表示注释
			D. 每条指令都会创建一个新的镜像层，并对镜像进行提交
		② Docker 执行 Dockerfile 的大致流程
			A. docker 从基础镜像运行一个容器
			B. 执行一条指令并对容器作出修改
			C. 执行类似于 docker commit 的操作提交一个新的镜像层
			D. docker 再基于刚提价的镜像运行一个新容器
			E. 执行 Dockerfile 中的下一条指令直到所有指令都执行完成为止
		③ 小总结
			A. 从应用软件角度看，Dockerfile、Docker 镜像与 Docker 容器分别代表三个不同阶段
				a. Dockerfile 是软件的原材料
				b. Docker 镜像是软件的交付品
				c. Docler 容器则可以认为是软件的运行态
			B. Dockerfile 面向开发，Docker 镜像成为交付标准，Docker 容器则是涉及部署与运维，三者缺一不可，合力充当 Docker 体系基石
	3. Dockerfile 体系结构（保留字指令）
		① FROM：基础镜像，当前新镜像是基于哪个镜像的
		② MAINTAINER：镜像的维护者姓名和邮箱地址
		③ RUN：容器构建时需要运行的命令
		④ EXPOSE：当前容器对外暴露的端口
		⑤ WORKDIR：指定在创建容器后，终端默认登录的进来工作的目录，一个落脚点
		⑥ ENV：用来构建镜像过程中设置环境变量
			A. 比如：ENV MY_PATH /usr/local/mytest
			B. 这个环境变量可以在后续的任何 RUN 指令中使用，这就如同在命令前指定了环境变量前缀一样
			C. 也可以在其他指令中直接使用这些环境变量，比如：WORKDIR $MY_PATH
		⑦ ADD：将宿主机目录下的文件拷贝进镜像且 ADD 命令会自动处理 URL 和解压 tar 压缩包
		⑧ COPY
			A. 类似 ADD，拷贝文件和目录到镜像中，将从构建上下文目录 <源路径> 的文件/目录复制到新的一层镜像内的<目标路径>位置
			B. 方式一：COPY src dest
			C. 方式二：COPY["src", "dest"]
		⑨ VOLUME：容器数据卷，用于数据保存和持久化工作
		⑩ CMD
			A. 指定一个容器启动时要运行的命令
			B. Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换
			C. CMD 容器启动命令，和 RUN 相似
				a. shell 格式：CMD <命令>
				b. exec 格式：CMD ["可执行文件", "参数1", "参数2"...]
				c. 参数列表格式：CMD ["参数1", "参数2"...]，在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数
		Ⅰ ENTRYPOINT
			A. 指定一个容器启动时要运行的命令
			B. ENTRYPOINT 的目的和 CMD一样，都是在指定容器启动程序及参数，docker run 之后的参数会追加到 ENTRYPOINT 后面
		Ⅱ ONBUILD：当构建一个被继承的 Dockerfile 时运行命令，父镜像在被子镜像继承后父镜像的 ONBUILD 被触发
		Ⅲ 小总结，Dockerfile
			---------------------------------------------------------
			| BuiLD 			| Both			| RUN				|
			|-------------------------------------------------------|
			| FROM 				| WORKDIR		| CMD				|
			|-------------------------------------------------------|
			| MAINTAINER		| USER			| ENV				|
			|-------------------------------------------------------|
			| COPY				|				| EXPOSE			|
			|-------------------------------------------------------|
			| ADD				|				| VOLUME			|
			|-------------------------------------------------------|
			| RUN				|				| ENTRYPOINT		|
			|-------------------------------------------------------|
			| ONBUILD			|				|					|
			|-------------------------------------------------------|
			| .dockerignore		|				|					|
			--------------------------------------------------------|
	4. 案例：
		① Base 镜像（scratch）
		② 自定义镜像 mycentos
			A. 编写
				a. Docker Hub 默认 centos 镜像是什么情况
					(1) 初始 centos 运行该镜像时进入容器的默认路径是 /
					(2) 默认不支持 vim
					(3) 默认不支持 ifconfig
				b. 自定义 mycentos 目的使镜像具备如下：
					(1) 登陆后的默认路径
					(2) vim 编辑器
					(3) 查看网络配置 ifconfig 支持
				c. 准备编写Dockerfile 文件
					# 基础镜像，当前新镜像是基于哪个镜像的
					FROM centos

					# 镜像的维护者姓名和邮箱地址
					MAINTAINER lixl<1634491328@qq.com>

					# 设置环境变量
					ENV MY_PATH /usr/local

					# 指定在创建容器后，终端默认登录的进来工作的目录
					WORKDIR $MY_PATH

					# 容器构建时需要运行的命令
					RUN yum install -y vim
					RUN yum install -y net-tools

					# 当前容器对外暴露的端口
					EXPOSE 2648

					# 指定一个容器启动时要运行的命令
					CMD echo $MY_PATH
					CMD echo "success"
					CMD /bin/bash
				d. mycentos 内容 Dockerfile
			B. 构建：docker build -f /usr/local/mydata/mydocker/mycentos/Dockerfile -t lixl/centos:1.0 .（.代表当前目录）
			C. 运行：docker run -it --name mycentos04 lixl/centos:1.0
			D. 列出镜像的变更历史：docker history lixl/centos:1.0
		③ CND / ENTRYPOINT/ONBUILD 镜像案例
			A. 都是指定一个容器启动时要运行的命令
			B. CMD
				a. Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被docker run 之后的参数替换
				b. Case：Tomcat 的讲解演示
					(1) Docker Hub 中 tomcat 的 Dockerfile 最后一个指令是 CMD ["catalina.sh", "run"]，即运行一个容器后自动开启 tomcat
					(2) 当在运行容器时，执行运行的命令为：docker run -it --name mytomcat01 tomcat ls -l，即运行容器后打印进入容器的目录
					(3) 而当使用 docker ps 查看正在运行的容器时，发现 tomcat 容器没有在运行中，说明 tomcat 的 Dockerfile 的 最后一条运行指令被覆盖了
			C. ENTRYPOINT
				a. docker run 之后的参数会被当做参数传递给 ENTRYPOINT，之后形成新的命令组合
				b. Case：
					(1) 制作 CMD 版可以查询 IP 信息的容器
						(A) curl；
							(a) curl 命令可以用来执行下载、发送各种 HTTP 请求，指定 HTTP 头部等操作
							(b) 如果系统没有 curl 可以使用 yum install curl 安装，也可以下载安装。
							(c) curl 是将文件输出到stdout
							(d) 使用 curl http://www.baidu.com，执行后，http://www.baidu.com 的 html 就会显示在屏幕上
							(e) 这是最简单的使用方法，用这个命令获得了 http://curl.haxx.se 指向的页面，同样，如果这里的 URL 指向的是一个文件或者一幅图都可以
							直接下载到本地，如果下载的是 HTML 文档，那么缺省的将只显示文件头部，即 HTML 文档的 header。要全部显示，加参数 -i
						(B) Dockerfile1
							FROM centos
							RUN yum -y install curl
							CMD ["curl", "-s", "https://ip.cn/"]
						(C) 构建：docker build -f /usr/local/mydata/mydocker/mycentos/Dockerfile1 -t lixl/centos:1.1 .
						(D) 运行：docker run -it --name mycentos05 lixl/centos:1.1
					(2) 问题：
						(A) 如果我们希望显示 HTTP 头部信息，就需要加上参数 -i
						(B) 运行 docker run -it --name mycentos06 lixl/centos:1.1 -i
							docker: Error response from daemon: OCI runtime create failed: container_linux.go:370: starting container process caused: exec: "-i": 
							executable file not found in $PATH: unknown. ERRO[0000] error waiting for container: context canceled 
					(3) WHY
						(A) 我们可以看到可执行文件找不到报错，executable file not found
						(B) 之前说过，跟在镜像名后面的是 command，运行时会替换 CMD 的默认值，因此这里的 -i 替换了原来的 CMD，而不是添加在原来的 curl -s https://ip.cn
						后面，而 -i 根本不是命令，所以自然找不到
						(C) 那么如果希望加入 -i 这个参数，必须重新完整的输入这个命令：docker run -it --name mycentos06 lixl/centos:1.0 curl -s https://ip.cn/ -i
					(4) 制作ENTRYPOING 版查询 IP 信息的容器
						(A) Dockerfile2
							FROM centos
							RUN yum -y install curl
							ENTRYPOINT ["curl", "-s", "https://ip.cn/"]
						(B) 构建：docker build -f /usr/local/mydata/mydocker/mycentos/Dockerfile2 -t lixl/centos:1.2 .
						(C) 运行：docker run -it --name mycentos07 lixl/centos:1.2
						(D) 给运行的命令增加参数：docker run -it --name mycentos08 lixl/centos:1.2 -i
			D. ONBUILD：
				a. 当构建一个被继承的 Dockerfile 时运行命令，父镜像在被子镜像继承后父镜像的 ONBUILD 被触发
				b. 父镜像：
					(1) Dockerfile3
						FROM centos
						RUN yum -y install curl
						ENTRYPOINT ["curl", "-s", "https://ip.cn/"]
						ONBUILD RUN echo "father's image onbuild"
					(2) 构建：docker build -f /usr/local/mydata/mydocker/mycentos/Dockerfile3 -t lixl/centos:1.3 .
					(3) 运行：docker run -it --name mycentos09 lixl/centos:1.3
				c. 子镜像：
					(1) Dockerfile4
						FROM lixl/centos:1.3
						RUN yum -y install curl
						ENTRYPOINT ["curl", "-s", "https://ip.cn/"]
					(2) 构建：docker build -f /usr/local/mydata/mydocker/mycentos/Dockerfile4 -t lixl/centos:1.4 .
						Step 1/3 : FROM lixl/centos:1.3
						# Executing 1 build trigger
						 ---> Running in 5e4bcfca5580
						father's image onbuild
					(3) 运行：docker run -it --name mycentos10 lixl/centos:1.4
		④ 自定义镜像 Tomcat9
			A. 新建文件夹：/usr/local/mydata/mydocker/mytomcat
				mkdir -p  /usr/local/mydata/mydocker/mytomcat
			B. 在新建文件夹中新建 c.txt
				touch c.txt
			C. 将 jdk 和 tomcat 安装的压缩包拷贝到新建文件夹中
				a. cp /opt/apache-tomcat-9.0.41.tar.gz /usr/local/mydata/mydocker/mytomcat
				b. cp /opt/jdk-8u261-linux-x64.tar.gz /usr/local/mydata/mydocker/mytomcat
			D. 	新建 Dockerfile 文件
				FROM centos
				MAINTAINER lixl<1634491328@qq.com>
				# 把宿主机当前上下文的 hello.txt 拷贝到容器 /usr/local/路径下
				COPY hello.txt /usr/local/container.txt
				# 把 jdk 和 tomcat 添加到容器中
				ADD jdk-8u261-linux-x64.tar.gz /usr/local/
				ADD apache-tomcat-9.0.41.tar.gz /usr/local/
				# 安装 vim 编辑器
				RUN yum install -y vim
				# 设置工作访问时候的WORKDIR路径，登录落脚点
				ENV MY_PATH /usr/local
				WORKDIR $MY_PATH

				# 配置java 与 tomcat 环境变量
				ENV JAVA_HOME /usr/local/jdk1.8.0_261
				ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar


				ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.41
				ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.41

				ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin

				# 容器运行时监听的端口
				EXPOSE 8080
				# 启动时运行 tomcat
				# ENTRYPOINT ["/usr/local/apache-tomcat-9.0.41/bin/startup.sh"]
				# CMD ["/usr/local/apache-tomcat-9.0.41/bin/catalina.sh", "run"]
				CMD /usr/local/apache-tomcat-9.0.41/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.41/bin/logs/catalina.out
			E. 构建：docker build -f /usr/local/mydata/mydocker/mytomcat/Dockerfile -t lixl/tomcat:9.0 .
			F. 运行：
				docker run -it -d -p8088:8080 --name mytomcat01 \
				-v /usr/local/mydata/mytomcat/webapps:/usr/local/apache-tomcat-9.0.41/webapps \
				-v /usr/local/mydata/mytomcat/logs:/usr/local/apache-tomcat-9.0.41/logs \
				--privileged=true lixl/tomcat:9.0
			G. 验证：
				a. 浏览器访问 http://192.168.230.48:8088/，由于宿主机的 /usr/local/mydata/mytomcat/webapps 目录挂载到容器的 /usr/local/apache-tomcat-9.0.41/webapps
				目录，而宿主机中并没有 tomcat 主页的内容，因此会出现404，将 宿主机 /usr/local/apache-tomcat-9.0.41/webapps 下的目录拷贝到 /usr/local/mydata/mytomcat/webapps
				重新启动容器，再访问 http://192.168.230.48:8088/ 进入tomcat主页
				b. 结合前述的容器卷将测试的web服务发布在 /usr/local/mydata/mytomcat/webapps 中，重新启动容器，在浏览器中访问该 web 服务
					(1) 在 /usr/local/mydata/mytomcat/webapps 新建 test 文件夹
					(2) 在 test 文件夹中新建 test.html 文件，并定义一个 h1 标签，保存退出
					(3) 重启 tomcat docker restart mytomcat01，浏览器访问 http://192.168.230.48:8088/test/test.html，正确显示 test.html 页面
				c. 获取容器 jdk 版本：docker exec -it mytomcat01 java -version
				d. 使用 docker 命令查看进入容器的落脚目录 docker exec -it mytomcat01 ls -l，该目录与 Dockerfile中设置的 WORKDIR 一致
	5. 小总结
														-------------------------------------------------------------
														|															↓ push
		------------------------------------------------|--------------------------------------------		-------------------
		|												|											|		|				  |
		|							--------------------|--------------------						|		| Docker registry |
		|							|    tar |-----↓	↓					|						|		| 				  |
		|							|	     |	 --------------				|						|		-------------------
		|	--------------   build	|  	     --- |		 	  |				|						|				| pull
		|	| Dockerfile | ---------|----------> |   images	  |	<-----------|-----------------------|----------------
		|	--------------			| 	     |-> |			  | ---			|						|
		|							|	     |	 --------------	  |			|						|
		|						    | commit |					  | run		|						|
		|							|	     |	 --------------	  |			|						|
		|							|	     |	 |			  | <--			|						|
		|							|	     --- | Containers | 			|						|
		|							|		     |			  | --- stop	|						|
		|							|		     --------------	  | start	|						|
		|							|				    ↑---------| restart |						|
		|							|										|						|
		|							|		Local Docker instance			|						|
		|							-----------------------------------------						|
		|																							|
		|										  My Computer										|
		---------------------------------------------------------------------------------------------
七、Docker 常用安装
	1. 总体步骤
		① 搜索镜像
		② 拉取镜像
		③ 查看镜像
		④ 启动镜像
		⑤ 停止容器
		⑥ 移除容器
	2. 安装 tomcat
		① docker hub 上面查找 tomcat 镜像
		② docker hub 上拉取 tomcat 镜像到本地
		③ docker images 查看是否有拉取到的 tomcat
		④ 使用 tomcat 镜像创建容器（也叫运行镜像）
	3. 安装 mysql
		① docker hub 上面查找 mysql 镜像
			docker search mysql
		② docker hub 上（阿里云加速器）拉取 mysql 镜像到本地标签为5.7.30
			docker pull mysql:5.7.30
		③ 使用 mysql5.7.30镜像创建容器（也叫运行镜像）
			A. 使用 myql 镜像
				a. docker 命令：	
					docker run -p 3306:3306 --name mysql \
					-v /usr/local/mydata/mysql/log:/var/log/mysql \
					-v /usr/local/mydata/mysql/data:/var/lib/mysql \
					-v /usr/local/mydata/mysql/conf:/etc/mysql \
					-e MYSQL_ROOT_PASSWORD=2648 -d mysql:5.7.30
				b. 命令说明：
					(1) -p 3306:3306：将主机的 3306 端口映射到 docker 容器的 3306 端口
					(2) --name mysql：运行服务的名字
					(3) -v /usr/local/mydata/mysql/log:/var/log/mysql：将主机的 /usr/local/mydata/mysql/log 目录挂载到容器的 /var/log/mysql
					(4) -v /usr/local/mydata/mysql/data:/var/lib/mysql：将主机的  /usr/local/mydata/mysql/data 目录挂载到容器的 /var/lib/mysql
					(5) -v /usr/local/mydata/mysql/conf:/etc/mysql：将主机的 /usr/local/mydata/mysql/conf 目录挂载到容器的 /etc/mysql
					(6) -e MYSQL_ROOT_PASSWORD=2648：初始化 root 用户密码
					(7) -d mysql:5.7.30：后台程序运行 mysql:5.7.30
				c. 进入MySQL容器
					docker exec -it mysql /bin/bash
				d. 退出容器
					exit;
				e. 在/usr/local/mydata/mysql/conf/my.cnf中配置MySQL
					vim /usr/local/mydata/mysql/conf/my.cnf
				f. 在my.cnf中输入以下配置内容
					[client]
					default-character-set=utf8

					[mysql]
					default-character-set=utf8

					[mysqld]
					init_connect='SET collation_connection=utf8_unicode_ci'
					init_connect='SET NAMES utf8'
					character-set-server=utf8
					collation-server=utf8_unicode_ci
					skip-character-set-client-handshake
					skip-name-resolve
					
					default-time_zone='+8:00'
					sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
				g. 保存退出并重新启动MySQL容器
				h. 设置MySQL容器在docker重启时自启动：docker update mysql --restart=always
				i. MySQL在虚拟主机中得安装位置为：/etc/mysql， /usr/local/mysql， /usr/local/mysql/bin/mysql
			B. 外部 Win 10也来连接运行在 docker 上的 mysql 服务
			C. 数据备份小测试
				docker exec mysql sh -c 'exec mysqldump --all-databases -uroot -p"2648"' > /usr/local/mydata/all-databases.sql
	4. 安装 redis
		① docker hub 上（阿里云加速器）拉取 redis 镜像到本地标签为 latest
			docker pull redis
		② 使用 redis 镜像创建容器（也叫运行镜像）
			A. 使用镜像
				a. 创建redis 启动的配置文件
					mkdir -p /mydata/redis/conf
					touch /mydata/redis/conf/redis.conf
				b. 命令
					docker run -p 6379:6379 --name redis \
					-v /usr/local/mydata/redis/data:/data \
					-v /usr/local/mydata/redis/conf:/etc/redis \
					-d redis redis-server /etc/redis/redis.conf
				c. 使用redis-cli连接redis
					docker exec -it redis redis-cli
				d. 设置redis容器在docker重启时自启动
					docker update redis --restart=always
				e. 设置redis的持久化，在/usr/local/mydata/redis/conf/redis.conf中添加配置：appendonly yes（必须在启动容器后才能在配置文件中添加配置）
八、本地镜像发布到阿里云
	1. 本地镜像发布到阿里云流程
	2. 镜像的生成方法
		① 前面的 Dockerfile
		② 从容器创建一个新的镜像：docker commit [OPTIONS] 容器 name /ID [REPOSITORY[:TAG]]
	3. 将本地镜像推送到阿里云
		① 本地镜像素材原型：
			REPOSITORY    TAG       IMAGE ID       CREATED        SIZE
			lixl/tomcat   9.0       905d3ed10ae3   20 hours ago   636MB
		② 阿里云开发者平台：https://cr.console.aliyun.com/cn-qingdao/instances/repositories
		③ 创建仓库镜像
			A. 选择地域
			B. 选择命名空间，首先需要创建一个命名空间
			C. 输入仓库名称
			D. 仓库类型，选择公开/私有
			E. 输入摘要信息和描述信息
			F. 下一步之后，选择本地仓库
			G. 创建镜像库  
		④ 将镜像推送到registry
			A. 登录阿里云Docker Registry，首次登录需要密码
				docker login --username=lixl2648 registry.cn-guangzhou.aliyuncs.com
			B. 设置本地镜像在镜像仓库中的版本号
				docker tag [ImageId/镜像名[:镜像版本号]] registry.cn-guangzhou.aliyuncs.com/lixl2648/mytomcat:[镜像版本号]
			C. 将本地镜像推送到镜像仓库，仓库镜像版本号需要和上一步保持一致
				docker push registry.cn-guangzhou.aliyuncs.com/lixl2648/mytomcat:[镜像版本号]
		⑤ 公有云可以查询得到
		⑥ 查看详情
	4. 将阿里云上的镜像下载到本地，需要加上版本号，因此镜像仓库中可能存在多个版本的镜像
		docker pull registry.cn-guangzhou.aliyuncs.com/lixl2648/mytomcat:9.0

