一. spring security基础篇
	1. spring-security简介并与shiro对比
		① SpringSecurity 框架简介
			A. 官网：https://projects.spring.io/spring-security/
			B. 源代码: https://github.com/spring-projects/spring-security/
			C. Spring Security 是强大的，且容易定制的，基于Spring开发的实现认证登录与资源授权的应用安全框架。
			D. SpringSecurity 的核心功能：
				a. Authentication：认证，用户登陆的验证（解决你是谁的问题）
				b. Authorization：授权，授权系统资源的访问权限（解决你能干什么的问题）
				c. 安全防护，防止跨站请求，session 攻击等
		② shiro与Spring Security的比较
			A. 目前在java web应用安全框架中，与Spring Security形成直接竞争的就是shiro，二者在核心功能上几乎差不多，但从使用的角度各有优缺点。
			B. 没有最好的，只有最合适的。
			C. 用户量：从使用情况上看，二者都在逐步提高使用量。shiro的使用量一直高于spring security.
			D. 使用的方便程度
				a. 通常来说，shiro入门更加容易，使用起来也非常简单，这也是造成shiro的使用量一直高于Spring Security的主要原因
				b. 在没有Spring Boot之前，Spring Security的大部分配置要通过XML实现，配置还是还是非常复杂的。但是有了 Spring Boot之后，这一情况已经得到显著改善。
				c. Spring Security之所以看上去比shiro更复杂，其实是因为它引入了一些不常用的概念与规则。大家应该都知道2/8法则，这在Spring Security里面体现的特别明显，
				如果你只学Spring Security最重要的那20%，这20%的复杂度和shiro基本是一致的。也就是说，不重要的那80%，恰恰是Spring Security比shiro的“复杂度”。
				d. 也就是说，如果有人能帮你把Spring Security最重要的那20%摘出来，二者的入门门槛、复杂度其实是差不太多的。
			E. 社区支持
				a. Spring Security依托于Spring庞大的社区支持，这点自不必多说。shiro属于apache社区，因为它的广泛使用，文档也非常的全面。二者从社区支持来看，几乎不相上下。
				b. 但是从社区发展的角度看，Spring Security明显更占优势，随着Spring Cloud、Spring Boot、Spring Social的长足进步，这种优势会越来越大。因为Spring Security
				毕竟是Spring的亲儿子，Spring Security未来在于Spring系列框架集成的时候一定会有更好的融合性，前瞻性、兼容性！这也是为什么我们要学Spring Security的主要原因！
			F. 功能丰富性：Spring Security因为它的复杂，所以从功能的丰富性的角度更胜一筹。其中比较典型的如
				a. Spring Security默认含有对OAuth2.0的支持，与Spring Social一起使用完成社交媒体登录也比较方便。shiro在这方面只能靠自己写代码实现。
				b. 还有一种普遍说法：Spring Security在网络安全的方面下的功夫更多
			G. 总结：如果你只是想实现一个简单的web应用，shiro更加的轻量级，学习成本也更低。如果您正在开发一个分布式的、微服务的、或者与Spring Cloud系列框架深度集成的项目，
			建议使用Spring Security。
	2. 需求分析与基础环境准备	
		① 需求分析
			A. login.html登录页面，登录页面访问不受限制
			B. 在登录页面登录之后，进入index.html首页（登录验证Authentication）
			C. 首页可以看到syslog、sysuer、biz1、biz2四个页面选项
			D. 我们希望syslog（日志管理）和sysuser(用户管理)只有admin管理员可以访问（权限管理Authorization）
			E. biz1、biz2普通的操作用户auser就可以访问（权限管理Authorization）
		② 环境准备	
			A. 新建spring boot2.0版本的web应用springboot-security
			B. 改POM
				<properties>
					<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
					<maven.compiler.source>1.8</maven.compiler.source>
					<maven.compiler.target>1.8</maven.compiler.target>
					<mysql.version>5.1.47</mysql.version>
					<druid.version>1.1.16</druid.version>
					<mybatis.spring.boot.version>1.3.0</mybatis.spring.boot.version>
				</properties>

				<parent>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-parent</artifactId>
					<version>2.2.2.RELEASE</version>
				</parent>

				<dependencies>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-web</artifactId>
					</dependency>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-actuator</artifactId>
					</dependency>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-thymeleaf</artifactId>
					</dependency>

					<dependency>
						<groupId>org.mybatis.spring.boot</groupId>
						<artifactId>mybatis-spring-boot-starter</artifactId>
						<version>${mybatis.spring.boot.version}</version>
					</dependency>
					<dependency>
						<groupId>com.alibaba</groupId>
						<artifactId>druid</artifactId>
						<version>${druid.version}</version>
					</dependency>
					<dependency>
						<groupId>mysql</groupId>
						<artifactId>mysql-connector-java</artifactId>
						<version>${mysql.version}</version>
					</dependency>

					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-devtools</artifactId>
						<scope>runtime</scope>
						<optional>true</optional>
					</dependency>
					<dependency>
						<groupId>org.projectlombok</groupId>
						<artifactId>lombok</artifactId>
						<optional>true</optional>
					</dependency>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-test</artifactId>
						<scope>test</scope>
					</dependency>

					<dependency>
						<groupId>org.webjars</groupId>
						<artifactId>jquery</artifactId>
						<version>3.5.1</version>
					</dependency>
					<dependency>
						<groupId>org.webjars</groupId>
						<artifactId>bootstrap</artifactId>
						<version>4.5.0</version>
					</dependency>
				</dependencies>

				<build>
					<plugins>
						<plugin>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-maven-plugin</artifactId>
						</plugin>

						<plugin>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-maven-plugin</artifactId>
							<configuration>
								<fork>true</fork>
								<addResources>true</addResources>
							</configuration>
						</plugin>
					</plugins>
				</build>
			C. 写YML
				server:
				  port: 8081
				  servlet:
					context-path: /springboot-security
				spring:
				  datasource:
					username: root
					password: 2648
					url: jdbc:mysql://192.168.107.6:3306/test
					driver-class-name: com.mysql.jdbc.Driver
					type: com.alibaba.druid.pool.DruidDataSource
				  thymeleaf:
					cache: false
				  application:
					name: springboot-security
			D. 主启动
				@SpringBootApplication
				@MapperScan("com.li.security.dao")
				public class SpringBootSecurityMain {

					public static void main(String[] args) {
						SpringApplication.run(SpringBootSecurityMain.class, args);
					}
				}
			E. 业务类
				a. DruidConfig
					@Configuration
					public class DruidConfig {

						@ConfigurationProperties(
								prefix = "spring.datasource"
						)
						@Bean
						public DataSource druid() {
							return new DruidDataSource();
						}
					}
				b. MyBatisConfig
					@org.springframework.context.annotation.Configuration
					public class MyBatisConfig {

						@Bean
						public ConfigurationCustomizer configurationCustomizer() {
							return new ConfigurationCustomizer(){

								@Override
								public void customize(Configuration configuration) {
									configuration.setMapUnderscoreToCamelCase(true);
								}
							};
						}
					}
				c. WebConfig
					@Configuration
					public class WebConfig implements WebMvcConfigurer {

						@Bean
						public WebMvcConfigurer webMvcConfigurer() {
							return new WebMvcConfigurer() {
								@Override
								public void addViewControllers(ViewControllerRegistry registry) {
									registry.addViewController("/").setViewName("login");
									registry.addViewController("/login.html").setViewName("login");
								}
							};
						}
					}
				d. UserController
					@Controller
					public class UserController {

						@ResponseBody
						@GetMapping("/hello")
						public String hello() {
							return "hello world";
						}

						@PostMapping("/login")
						public String index() {
							return "index";
						}

						@GetMapping("/syslog")
						public String syslog() {
							return "syslog";
						}

						@GetMapping("/sysuser")
						public String sysuser() {
							return "sysuser";
						}

						@GetMapping("/biz1")
						public String biz1() {
							return "biz1";
						}

						@GetMapping("/biz2")
						public String biz2() {
							return "biz2";
						}

					}
			F. templates
				a. login.html
				b. index.html
				c. syslog.html
				d. sysuser.html
				e. biz1.html
				f. biz2.html
		③ 注：spring-boot 1.5与spring-boot 2.0的区别
			A. spring-boot 2.0 弃用 server.context-path知道根路径，而改成server.servlet.context-path，根据前需要加上“/”
			B. spring-boot 2.0 定制MVC时弃用了继承WebMvcConfigurerAdapyer的方式，而采用实现WebMvcConfigurer接口
	3. HttpBasic模式登录认证
		① HttpBasic登录验证模式是Spring Security实现登录验证最简单的一种方式，也可以说是最简陋的一种方式。它的目的并不是保障登录验证的绝对安全，而是提供一种“防君子不防小人”的登录验证。
		② spring boot2.0整合Spring security
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-security</artifactId>
			</dependency>
		③ HttpBasic登录认证模式
			A. 如果使用的Spring Boot版本为1.X版本,依赖的Security 4.X版本，那么就无需任何配置，启动项目访问则会弹出默认的httpbasic认证.
			B. 我们现在使用的是spring boot2.0版本（依赖Security 5.X版本），HttpBasic不再是默认的验证模式，在spring security 5.x默认的验证模式已经是表单模式。所以我们要使用Basic模式，
			需要自己调整一下。并且security.basic.enabled已经过时了，所以我们需要自己去编码实现。
			C. 代码：
				@Configuration
				public class SecurityConfig extends WebSecurityConfigurerAdapter {

					@Override
					protected void configure(HttpSecurity http) throws Exception {
						http.httpBasic() // 开启httpBasic认证
								.and()
								.authorizeRequests()
								.anyRequest()
								.authenticated(); // 所有请求都需要登录认证才能访问
					}
				}
			D. 启动项目，在项目后台有以下这样的一串日志打印，冒号后面的就是默认密码
				Using generated security password: 20716c77-3400-4a9f-985d-4804c85ad25c
			E. 我们可以通过浏览器进行登录验证，默认的用户名是user.（下面的登录框不是我们开发的，是HttpBasic模式自带的）
			F. 当然我们也可以通过application.yml指定配置用户名密码
				spring:
				  security:
					user:
					  name: admin
					  password: admin
		④ HttpBasic模式的原理说明
			A. 首先，HttpBasic模式要求传输的用户名密码使用Base64模式进行加密。如果用户名是 "admin"  ，密码是“ admin”，则将字符串"admin:admin"使用Base64编码算法加密。加密结果可能是：YWtaW46YWRtaW4=。
			B. 然后，在Http请求中使用Authorization作为一个Header，“Basic YWtaW46YWRtaW4=“作为Header的值，发送给服务端。（注意这里使用Basic+空格+加密串）
			C. 服务器在收到这样的请求时，到达BasicAuthenticationFilter过滤器，将提取“ Authorization”的Header值，并使用用于验证用户身份的相同算法Base64进行解码。
			D. 解码结果与登录验证的用户名密码匹配，匹配成功则可以继续过滤器后续的访问。
			E. 所以，HttpBasic模式真的是非常简单又简陋的验证模式，Base64的加密算法是可逆的，你知道上面的原理，分分钟就破解掉。我们完全可以使用PostMan工具，或者浏览器开发工具中，发送Http请求进行登录验证
			查看header参数即可获取用户名密码的Base64。
	4. formLogin模式登录认证
		① formLogin的应用场景
			A. 在本专栏之前的文章中，已经给大家介绍过Spring Security的HttpBasic模式，该模式比较简单，只是进行了通过携带Http的Header进行简单的登录验证，而且没有定制的登录页面，所以使用场景比较窄。
			B. 对于一个完整的应用系统，与登录验证相关的页面都是高度定制化的，非常美观而且提供多种登录方式。这就需要Spring Security支持我们自己定制登录页面，也就是本文给大家介绍的formLogin模式登录认证模式。
			C. 准备工作：
				a. 新建一个Spring Boot 的web应用，引入Spring Security Starter
				b. 准备一个login.html登录页面，页面内容非常简单，一个from表单、用户名和密码输入框，一个提交按钮
				c. 准备一个首页index.html，在登录成功之后需要进入index.html首页
				d. 首页可以看到syslog（日志管理）、sysuer（用户管理）、biz1（业务一）、biz2（业务二）四个页面超文本链接选项。通过controller控制层跳转页面，并在对应页面写一些标志性文字即可，不需写具体业务。
			D. 需求
				a. 我们希望biz1（业务一）、biz2（业务二）普通的操作用户user就可以访问
				b. 管理员可以访问包括syslog（日志管理）和sysuser(用户管理)在内的所有资源
		② 说明
			A. formLogin模式的三要素：
				a. 登录认证逻辑
				b. 资源访问控制规则，如：资源权限、角色权限
				c. 用户角色权限
			B. 一般来说，使用权限认证框架的的业务系统登录验证逻辑是固定的，而资源访问控制规则和用户信息是从数据库或其他存储介质灵活加载的。
		③ 登录认证及资源访问权限的控制
			A. 首先，我们要继承WebSecurityConfigurerAdapter ，重写configure(HttpSecurity http) 方法，该方法用来配置登录验证逻辑。请注意看下文代码中的注释信息。
				@Configuration
				public class SecurityConfig extends WebSecurityConfigurerAdapter {

					@Override
					protected void configure(HttpSecurity http) throws Exception {
						http.csrf().disable() //禁用跨站csrf攻击防御，后面的章节会专门讲解
							.formLogin()
							.loginPage("/login.html")//用户未登录时，访问任何资源都转跳到该路径，即登录页面
							.loginProcessingUrl("/login")//登录表单form中action的地址，也就是处理认证请求的路径
							.usernameParameter("username")///登录表单form中用户名输入框input的name名，不修改的话默认是username
							.passwordParameter("password")//form中密码输入框input的name名，不修改的话默认是password
							.defaultSuccessUrl("/index")//登录认证成功后默认转跳的路径
						.and()
							.authorizeRequests()
							.antMatchers("/login.html","/login").permitAll()//不需要通过登录验证就可以被访问的资源路径
							.antMatchers("/biz1","/biz2") //需要对外暴露的资源路径
								.hasAnyAuthority("ROLE_user","ROLE_admin")  //user角色和admin角色都可以访问
							.antMatchers("/syslog","/sysuser")
								.hasAnyRole("admin")  //admin角色可以访问
							//.antMatchers("/syslog").hasAuthority("sys:log")
							//.antMatchers("/sysuser").hasAuthority("sys:user")
							//.antMatchers("/syslog").hasAuthority("sys:log")
							//.antMatchers("/sysuser").hasAuthority("sys:user")
							.anyRequest().authenticated();
					}
					
				}
			B. 上面的代码分为两部分：
				a. 第一部分是formLogin配置段，用于配置登录验证逻辑相关的信息。如：登录页面、登录成功页面、登录请求处理路径等。
				b. 第二部分是authorizeRequests配置端，用于配置资源的访问权限。如：开发登录页面的permitAll开放访问，“/biz1”（业务一页面资源）需要有角色为user或admin的用户才可以访问。
				c. hasAnyAuthority("ROLE_user","ROLE_admin")等价于hasAnyRole("user","admin"),角色是一种特殊的权限。
				d. "sys:log"或"sys:log"是我们自定义的权限ID，有这个ID的用户可以访问对应的资源
				e. 这时候，我们通过浏览器访问，随便测试一个没有访问权限的资源，都会跳转到login.html页面。
		④ 用户及角色信息配置
			A. 在上文中，我们配置了登录验证及资源访问的权限规则，我们还没有具体的用户，下面我们就来配置具体的用户。重写WebSecurityConfigurerAdapter的 configure(AuthenticationManagerBuilder auth)方法
				@Override
				protected void configure(AuthenticationManagerBuilder auth) throws Exception {
					auth.inMemoryAuthentication()
							.withUser("user")
							.password(passwordEncoder().encode("2648"))
							.roles("user")
							.and()
							.withUser("admin")
							.password(passwordEncoder().encode("2648"))
							.roles("admin")
							//.authorities("sys:log","sys:user")
							.and()
							.passwordEncoder(passwordEncoder()); // 配置BCrypt加密
				}

				@Bean
				public PasswordEncoder passwordEncoder() {
					return new BCryptPasswordEncoder();
				}
			B. inMemoryAuthentication指的是在内存里面存储用户的身份认证和授权信息。
			C. withUser("user")用户名是user
			D. password(passwordEncoder().encode("2648"))密码是加密之后的2648
			E. authorities("sys:log","sys:user")指的是admin用户拥有资源ID对应的资源访问的的权限："/syslog"和"/sysuser"
			F. roles()方法用于指定用户的角色，一个用户可以有多个角色
			G. 注意：使用Spring-Security时会自动进行登录认证，不需要自己编写任何的认证代码。
		⑤ 静态资源访问 
			A. 在我们的实际开发中，登录页面login.html和控制层Controller登录验证'/login'都必须无条件的开放。除此之外，一些静态资源如css、js文件通常也都不需要验证权限，我们需要将它们的访问权限也开放出来。
			下面就是实现的方法：重写WebSecurityConfigurerAdapter类的configure(WebSecurity web) 方法
			B. 代码：
				@Override
				public void configure(WebSecurity web) throws Exception {

					web.ignoring() // 将项目中的静态资源路径开放出来
							.antMatchers("/**/css/**", "/**/fonts/**", "/**/img/**", "/**/js/**");
				}
	5. 源码解析登录认证流程
		① 登录认证基于过滤器链：
			A. Spring Security的登录验证流程核心就是过滤器链。
				a. 贯穿于整个过滤器链始终有一个上下文对象SecurityContext和一个Authentication对象（登录认证的主体）
				b. 一旦某一个该主体通过其中某一个过滤器的认证，Authentication对象信息被填充，比如：isAuthenticated=true表示该主体通过验证。
				c. 如果该主体通过了所有的过滤器，仍然没有被认证，在整个过滤器链的最后方有一个FilterSecurityInterceptor过滤器（虽然叫Interceptor，但它是名副其实的过滤器，不是拦截器）。判断Authentication对象
				的认证状态，如果没有通过认证则抛出异常，通过认证则访问后端API。
				d. 之后进入响应阶段，FilterSecurityInterceptor抛出的异常被ExceptionTransactionFilter对异常进行相应的处理。比如：用户名密码登录异常，会被引导到登录页重新登陆。
				e. 如果是登陆成功，且没有任何异常，在SecurityContextPersistenceFilter中将SecurityContext放入session。下次再进行请求的时候，直接从SecurityContextPersistenceFilter的session中取出认证信息。
				从而避免多次重复认证。
			B. SpringSecurity提供了多种登录认证的方式，由多种Filter过滤器来实现，比如：
				a. BasicAuthenticationFilter实现的是HttpBasic模式的登录认证
				b. BasicAuthenticationFilter实现的是HttpBasic模式的登录认证
				c. RememberMeAuthenticationFilter实现登录认证的“记住我”的功能
				d. SmsCodeAuthenticationFilter实现短信验证码登录认证
				e. SocialAuthenticationFilter实现社交媒体方式登录认证的处理，如：QQ、微信
				f. Oauth2AuthenticationProcessingFilter和Oauth2ClientAuthenticationProcessingFilter实现Oauth2的鉴权方式
			C. 根据我们不同的需求实现及配置，不同的Filter会被加载到应用中。
		② 过滤器登录验证细节
			A. 构建登录认证主体，如图所示，当用户登陆的时候首先被某一种认证方式的过滤器拦截（以用户名密码登录为例）。如：UsernamePasswordAuthenticationFilter会使用用户名和密码创建一个登录认证凭证：
			UsernamePasswordAuthenticationToken，进而获取一个Authentication对象，该对象代表身份验证的主体，贯穿于用户认证流程始终。
				public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {
					if (this.postOnly && !request.getMethod().equals("POST")) {
						throw new AuthenticationServiceException("Authentication method not supported: " + request.getMethod());
					} else {
						String username = this.obtainUsername(request);
						String password = this.obtainPassword(request);
						if (username == null) {
							username = "";
						}

						if (password == null) {
							password = "";
						}

						username = username.trim();
						UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username, password);
						this.setDetails(request, authRequest);
						return this.getAuthenticationManager().authenticate(authRequest);
					}
				}
			B. 多种认证方式的管理 ProviderManager，
				a. 随后使用AuthenticationManager 接口对登录认证主体进行authenticate认证。
				public interface AuthenticationManager {
					Authentication authenticate(Authentication var1) throws AuthenticationException;
				}
				b. ProviderManager继承于AuthenticationManager是登录验证的核心类。
					public class ProviderManager implements AuthenticationManager, MessageSourceAware, InitializingBean {
						...
						private List<AuthenticationProvider> providers;
						...
					}
				c. ProviderManager保管了多个AuthenticationProvider，每一种登录认证方式都可以尝试对登录认证主体进行认证。只要有一种方式被认证成功，Authentication对象就成为被认可的主体。
					a. 源码：
						public interface AuthenticationProvider {
							Authentication authenticate(Authentication var1) throws AuthenticationException;

							boolean supports(Class<?> var1);
						}
					b. RememberMeAuthenticationProvider定义了“记住我”功能的登录验证逻辑
					c. DaoAuthenticationProvider加载数据库用户信息，进行用户密码的登录验证
			C. 数据库加载用户信息 DaoAuthenticationProvider
				a. DaoAuthenticationProvider类：public class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider
				b. 从数据库获取用户信息
					protected final UserDetails retrieveUser(String username, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {
						this.prepareTimingAttackProtection();

						try {
							UserDetails loadedUser = this.getUserDetailsService().loadUserByUsername(username);
							if (loadedUser == null) {
								throw new InternalAuthenticationServiceException("UserDetailsService returned null, which is an interface contract violation");
							} else {
								return loadedUser;
							}
						} catch (UsernameNotFoundException var4) {
							this.mitigateAgainstTimingAttack(authentication);
							throw var4;
						} catch (InternalAuthenticationServiceException var5) {
							throw var5;
						} catch (Exception var6) {
							throw new InternalAuthenticationServiceException(var6.getMessage(), var6);
						}
					}
				c. 所以当我们需要加载用户信息进行登录验证的时候，我们需要实现UserDetailsService接口，重写loadUserByUsername方法，参数是用户输入的用户名。返回值是UserDetails。
			D. SecurityContext：完成登录认证之后，将认证完成的Authtication对象(authenticate: true, 有授权列表authority list, 和username信息)放入SecurityContext上下文里面。
			后续的请求就直接从SecurityContextFilter中获得认证主体，从而访问资源。
		③ 结合源码讲解登录验证流程			
			A. UsernamePasswordAuthenticationFilter：
				a. 该过滤器封装用户基本信息（用户名、密码），定义登录表单数据接收相关的信息。如：
				b. 默认的表单用户名密码input框name是username、password
				c. 默认的处理登录请求路径是/login、使用POST方法
				d。 源码
					public class UsernamePasswordAuthenticationFilter extends AbstractAuthenticationProcessingFilter {
					// 默认的用户名和密码
					public static final String SPRING_SECURITY_FORM_USERNAME_KEY = "username";
					public static final String SPRING_SECURITY_FORM_PASSWORD_KEY = "password";
					private String usernameParameter = "username";
					private String passwordParameter = "password";
					private boolean postOnly = true;

					public UsernamePasswordAuthenticationFilter() {
						// 请求的路径和方法
						super(new AntPathRequestMatcher("/login", "POST"));
					}

					public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {
						if (this.postOnly && !request.getMethod().equals("POST")) {
							throw new AuthenticationServiceException("Authentication method not supported: " + request.getMethod());
						} else {
							String username = this.obtainUsername(request);
							String password = this.obtainPassword(request);
							if (username == null) {
								username = "";
							}

							if (password == null) {
								password = "";
							}

							username = username.trim();
							UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username, password);
							// 封装登录用户信息
							this.setDetails(request, authRequest);
							// 核心登录验证方法
							return this.getAuthenticationManager().authenticate(authRequest);
						}
					}
			B.  AbstractAuthenticationProcessingFilter的doFilter方法的验证过程
				a. UsernamePasswordAuthenticationFilter继承自抽象类AbstractAuthenticationProcessingFilter，该抽象类定义了验证成功与验证失败的处理方法。
				b. 源码
					public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
						HttpServletRequest request = (HttpServletRequest)req;
						HttpServletResponse response = (HttpServletResponse)res;
						if (!this.requiresAuthentication(request, response)) {
							chain.doFilter(request, response);
						} else {
							if (this.logger.isDebugEnabled()) {
								this.logger.debug("Request is to process authentication");
							}

							Authentication authResult;
							try {
								authResult = this.attemptAuthentication(request, response);
								if (authResult == null) {
									return;
								}
								// 登录验证
								this.sessionStrategy.onAuthentication(authResult, request, response);
							} catch (InternalAuthenticationServiceException var8) {
								this.logger.error("An internal error occurred while trying to authenticate the user.", var8);
								// 验证失败
								this.unsuccessfulAuthentication(request, response, var8);
								return;
							} catch (AuthenticationException var9) {
								// 验证失败
								this.unsuccessfulAuthentication(request, response, var9);
								return;
							}

							if (this.continueChainBeforeSuccessfulAuthentication) {
								chain.doFilter(request, response);
							}
							
							// 验证成功
							this.successfulAuthentication(request, response, chain, authResult);
						}
					}
			C.  验证成功之后的Handler和验证失败之后的handler
				a. private AuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();
				b. private AuthenticationFailureHandler failureHandler = new SimpleUrlAuthenticationFailureHandler();
				c. 也就是说当我们需要自定义验证成功或失败的处理方法时，要去实现AuthenticationSuccessHandler或AuthenticationfailureHandler接口
	6. 自定义登录验证结果处理
		① 需要自定义登录结果的场景
			A. 当我们登录成功的时候，是由AuthenticationSuccessHandler进行登录结果处理，默认跳转到defaultSuccessUrl配置的路径对应的资源页面（一般是首页index.html）。
			B. 当我们登录失败的时候，是由AuthenticationfailureHandler进行登录结果处理，默认跳转到failureUrl配置的路径对应的资源页面（一般是登录页login.html）。
			C. 但是在web应用开发过程中需求是千变万化的，有时需要我们针对登录结果做个性化处理，比如：
				a. 我们希望不同的人登陆之后，看到不同的首页
				b. 我们应用是前后端分离的，验证响应结果是JSON格式数据，而不是页面跳转
		② 自定义登陆成功的结果处理
			A. AuthenticationSuccessHandler接口是Security提供的认证成功处理器接口，我们只需要去实现它即可。但是通常来说，我们不会直接去实现AuthenticationSuccessHandler接口，
			而是继承SavedRequestAwareAuthenticationSuccessHandler 类，这个类会记住用户上一次请求的资源路径，比如：用户请求books.html，没有登陆所以被拦截到了登录页，
			当你万成登陆之后会自动跳转到books.html，而不是主页面。
			B. 代码：
				@Component
				public class MyAuthenticationSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler {

					@Value("${spring.security.loginType}")
					private String loginType;

					private static ObjectMapper objectMapper = new ObjectMapper();

					@Override
					public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)
							throws ServletException, IOException {

						if (loginType.equalsIgnoreCase("JSON")) {
							response.setContentType("application/json;charset=UTF-8");
							response.getWriter().write(objectMapper.writeValueAsString(
									AjaxResponse.success("/index")
							));
						} else {
							//跳转到登陆之前请求的页面
							super.onAuthenticationSuccess(request, response, authentication);
						}

					}
				}
			C. 在上面的自定义登陆成功处理中，既适应JSON前后端分离的应用登录结果处理，也适用于模板页面跳转应用的登录结果处理
			D. ObjectMapper 是Spring Boot默认集成的JSON数据处理类库Jackson中的类。
			E. AjaxResponse是一个自定义的通用的JSON数据接口响应类。
		③ 自定义登录失败的结果处理
			A. 这里我们同样没有直接实现AuthenticationFailureHandler接口，而是继承SimpleUrlAuthenticationFailureHandler 类。该类中默认实现了登录验证失败的跳转逻辑，即登陆失败之后回到登录页面。
			B. 代码：
				@Component
				public class MyAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {

					@Value("${spring.security.loginType}")
					private String loginType;

					private static ObjectMapper objectMapper = new ObjectMapper();

					public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,  AuthenticationException exception)
							throws IOException, ServletException {

						String errorMsg = "用户名或者密码输入错误!";
						if(exception instanceof SessionAuthenticationException){
							errorMsg = exception.getMessage();
						}

						if(loginType.equalsIgnoreCase("JSON")){
							response.setContentType("application/json;charset=UTF-8");
							response.getWriter().write(objectMapper.writeValueAsString(
									AjaxResponse.error(new CustomException(
											CustomExceptionType.USER_INPUT_ERROR,
											errorMsg))
							));
						}else{
							//跳转到登陆页面
							super.onAuthenticationFailure(request,response,exception);
						}

					}
				}
			C. 在上面的自定义登陆失败处理中，既适应JSON前后端分离的应用登录失败结果处理，也适用于模板页面跳转应用的登录失败结果处理
			D. 登陆失败之后，将默认跳转到默认的failureUrl，即登录界面。
		④ 配置SecurityConfig
			A. 代码：
				http.csrf().disable() //禁用跨站csrf攻击防御，后面的章节会专门讲解
                .formLogin()
                .loginPage("/login.html") // 用户未登录时，访问任何资源都转跳到该路径，即登录页
                .loginProcessingUrl("/login") // 登录表单form中action的地址，也就是处理认证请求的路径
                .usernameParameter("username") // 登录表单form中用户名输入框input的name名，不修改的话默认是username
                .passwordParameter("password") // form中密码输入框input的name名，不修改的话默认是password
                //.defaultSuccessUrl("/index") // 登录认证成功后默认转跳的路径
                .successHandler(myAuthenticationSuccessHandler)
                .failureHandler(myAuthenticationFailureHandler)
                .and()
                .authorizeRequests()
                .antMatchers("/login.html", "/", "/login").permitAll() // 不需要通过登录验证就可以被访问的资源路径
                .antMatchers("/biz1", "/biz2") // 需要对外暴露的资源路径
                .hasAnyAuthority("ROLE_user", "ROLE_admin") // user 和 admin 角色可以访问的资源
                // .antMatchers("/syslog", "/sysuser")
                // .hasAnyRole("admin") // admin 角色可以访问的资源
                // .hasAnyAuthority("ROLE_admin") // 角色是一种特殊的权限
                .antMatchers("/syslog").hasAuthority("sys:log")
                .antMatchers("/sysuser").hasAuthority("sys:user")
                .anyRequest().authenticated();
			B. 将自定义的AuthenticationSuccessHandler和AuthenticationFailureHandler注入到Spring Security配置类中
			C. 使用fromlogin模式，配置successHandler和failureHandler。
			D. 不要配置defaultSuccessUrl和failureUrl，否则自定义handler将失效。handler配置与URL配置只能二选一
		⑤ JSON登录方式的测试
			<form th:action="@{/login}" method="post">
				<div class="form-group">
					<label for="username">账号</label>
					<input type="text" class="form-control" name="username" id="username" placeholder="请输入账号">
				</div>
				<div class="form-group">
					<label for="password">密码</label>
					<input type="password" class="form-control" name="password" id="password" placeholder="请输入密码">
				</div>
				<div class="checkbox">
					<label>
						<input type="checkbox"> 记住密码
					</label>
				</div>
				<button class="btn btn-primary" type="submit" id="submit">登录</button>
			</form>
			
			$('#submit').click(function () {
				var username = $('#username').val();
				var password = $('#password').val();
				if (username == '' || password == '') {
					alert("用户名或者密码不能为空")
					return false;
				}
				$.ajax({
					url: '/springboot-security/login',
					type: 'post',
					data: {
						username: username,
						password: password
					},
					success: function (res) {
						if (res.isok) {
							alert("success");
							location.href = '/springboot-security' + res.data;
						} else {
							alert(JSON.stringify(res));
						}

					},
					error: function (e) {
						// alert(e)
					}
				});
				return false;
			});
		⑥ 其他代码：
			A. AjaxResponse
				@Data
				public class AjaxResponse {

					private Boolean isok;

					private Integer code;

					private String Message;

					private Object data;

					private AjaxResponse() {}

					public static AjaxResponse success() {
						AjaxResponse result = new AjaxResponse();
						result.setIsok(true);
						result.setCode(200);
						result.setMessage("success");
						return result;
					}

					public static AjaxResponse success(Object data) {
						AjaxResponse result = new AjaxResponse();
						result.setIsok(true);
						result.setCode(200);
						result.setMessage("success");
						result.setData(data);
						return result;
					}

					public static AjaxResponse error(CustomException e) {
						AjaxResponse result = new AjaxResponse();
						result.setIsok(false);
						result.setCode(e.getCode());
						if (e.getCode() == CustomExceptionType.USER_INPUT_ERROR.getCode()) {
							result.setMessage(e.getMessage());
						} else if (e.getCode() == CustomExceptionType.SYSTEM_ERROR.getCode()) {
							result.setMessage(e.getMessage() + "，系统出现异常");
						} else {
							result.setMessage(e.getMessage() + "，系统出现未知异常");
						}
						return  result;
					}
				}
			B. CustomException
				public class CustomException extends RuntimeException {

					private Integer code;

					private String message;

					private CustomException() {
					}

					public CustomException(CustomExceptionType customExceptionType, String message) {
						this.code = customExceptionType.getCode();
						this.message = message;
					}

					public Integer getCode() {
						return code;
					}

					@Override
					public String getMessage() {
						return message;
					}
				}
			C. CustomExceptionType
				public enum CustomExceptionType {

					USER_INPUT_ERROR(400, "用户输入异常"),
					SYSTEM_ERROR(500, "系统内部异常"),
					OTHER_ERROR(999, "未知异常");

					private Integer code;

					private String typeDesc;

					CustomExceptionType(Integer code, String typeDesc) {
						this.code = code;
						this.typeDesc = typeDesc;
					}

					public Integer getCode() {
						return code;
					}

					public String getTypeDesc() {
						return typeDesc;
					}
				}




































































