一、拉取：
pull=fetch+merge
git fetch [远程库地址别名] [远程分支名]
	git checkout [远程库地址别名/远程库分支名]:切换远程库分支
	cat [filename]:查看远程库分支的文件
	git checkout [本地库分支名]:切换至本地库分支
git merge [远程库地址别名/远程分支名]
git pull [远程库地址别名] [远程分支名]
二、解决远程库推送冲突
	1. 要点
		如果不是基于GitHub 远程库的最新版所做的修改，不能推送，必须先拉取。
		拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作解决即可。
	2. 操作
		①git pull [远程库地址别名] [分支名]:将远程库的内容拉取下来
		②vim [filename]:修改冲突内容
		③“分支冲突解决”操作：
			A. git add [filename]:提交至暂存区
			B. git commit -m "context": 提交本地库
		④git push [远程库地址别名] [远程库分支名]
	3. 注意：
		①不同成员推送消息需要使用其自身GitHub账号登录
		②但是推送时没要求输入账号密码，而Git本身没有提供登录远程库的缓存
		③这是因为win10有凭据管理器，记录着登录时的账号和密码
		④因此不同成员推送消息需删除凭据管理器中的登录缓存
		
		⑤当本地库登录远程库时unable to access 'https://github.com/LiXL2648/TestGitHub.git/': 
		Failed to connect to github.com port 443: Timed out有以上异常，这是由于 DNS 设置造成的，
三、分支实战演练：
	1. 在远程库成员的本地库中创建一个分支
		① eclipse:右键项目 → Team → Switch To → New Branch → 输入分支名（hot_fix）
		② Git客户端:git brance [分支名]
	2. 当创建好分支之后，本地库直接切换到分支
		① Git客户端:git checkout [分支名]
	3. 可以在分支上修改，提交本地库，最后push远程库
		① eclipse:右键修改过的文件 → Team → Repository → Push Branch [分支名]，对远程库即为新建分支操作 → finish
		② Git客户端:vim [filename] → git commit -m "" [filename] → git push [远程库别名] [远程库分支别名]
	4. 远程库对应的本地库需要执行pull操作
		① eclipse:右键远程库对应本地库的工程 → pull(只读，不需要指定分支，自动检测服务器创建的分支)拉取分支到远程库
		切换分支审查代码：右键项目 → Team → Switch To → Other → Remote Tracking → origin/[分支名] → Check Out
		→ Check Out AS New Local Branch（检出远程的新分支）
	5. 在本地执行合并分支并Push至远程库。
		① eclipse:右键远程库对应本地库的工程 → Team → Switch To → Master → 右键项目 → Team → merge → local → 本地库分支别名 → merge
		→ 审查代码 → 右键项目 → Team → （Remote → Push）/Push branch master → next → finish
		② Git客户端:cd [远程库对应的本地库] → git pull [远程库别名] [远程库分支名] → 审查代码 → git push [远程库别名] [远程分支别名]
四、GitLib的安装
	1. CentOS的安装：安装CentOS-7-x86_64-DVD-1708.iso版本
	2. 设置IP地址
		A. 查看网卡文件：ll /etc/sysconfig/network-scripts/ | grep ifcfg-en
		B. 如果输入命令查看网卡文件时提示 No such file or directory，说明没有网卡文件，使用如下命令新建网卡文件，ifcfg-eno+数字编号，数字编号任意
		touch /etc/sysconfig/network-scripts/ifcfg-ens33
		①虚拟网络编辑器配置
			A. 通过VMware菜单栏，依次点击编辑和虚拟网络编辑器
			B. 选中VMnet8，取消勾选使用本地DHCP服务将IP地址分配给虚拟机，查看DHCP确保未启用，点击NAT设置
			C. 查看网关IP，并记住网关IP，例如：192.168.107.2，用于网络配置文件设置
		①进入network-scripts目录：cd /etc/sysconfig/network-scripts/
		③编辑ifcfg-ens33文件：vim ifcfg-ens33
			A. 将BOOTPROTO=dhcp修改为BOOTPROTO=static
			B. 将ONBOOT=no改为ONBOOT=yes
			C. 添加IPADDR（与网关的域名一致）：IPADDR=192.168.107.26
			D. 子网掩码：NETMASK=255.255.255.0 
			D. 添加网关（与虚拟网络编辑器配置中的网关IP一致）：GATEWAY=192.168.107.2
			E. 添加DNS1（与网关一致）：DNS1=192.168.107.2
			F. 保存退出：进入一般模式，:wq!
		④重启网络：service network restart
		⑤查看IP地址：ifconfig
		⑥ping百度：ping www.baidu.com -c 3
		⑦ping虚拟机：win+r → cmd → ping ipaddr
		⑧通过即修改网络配置成功
	3. 设置静态IP地址后Windows ping不通 CentOS的解决方案
		①在CentOS中中输入ip addr，查看IP信息，ip地址位于ens33: 下面的inet，即设置的设置完成的静态ip地址
		②windows 中输入ipconfig命令，查看ip信息，使Centos中和winwods的ip在一个网段即可：即VMnet8下的ip信息
		③关于怎么修改windows中V8如下操作即可：
			A. 打开网络和共享中心 → 更改适配器设置 → 右键VMware Network Adapter VMnet8属性 → Internet 协议版本4（TCP/IPv4）属性
			B. 点击使用下面的IP地址，这里的IP和ContOS静态IP保持在一个网段即可，网关参考虚拟机网络设置，即网关IP
			C. 现在再去用xshell连接或者ping即可：
	4. CentOS中ping不通百度，解决如下：
		①vi /etc/resolv.conf
		②进去把网管关IP配置如下即可
			#Generated by NetworkManager
			search localdomain
			nameserver 192.168.107.2
		③修改后再次ping 百度
	5. 搭建Gitlab 服务器
		① 开启拍摄拍照
		② 将下载完成的gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm复制到 /opt中，该gitlab服务器为社区版
		③ 在 /opt 中创建可执行文件install.sh: vim install.sh
		④ 将以下复制到可执行文件中
			sudo rpm -ivh /opt/gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm
			sudo yum install -y curl policycoreutils-python openssh-server cronie
			sudo lokkit -s http -s ssh
			sudo yum install postfix
			sudo service postfix start
			sudo chkconfig postfix on
			curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash
			sudo EXTERNAL_URL="http://gitlab.example.com" yum -y install gitlab-ce
		⑤ 修改可执行文件install.sh的权限：chmod 755 install.sh 
		⑥ 执行install.sh可执行文: ./install.sh
		⑦ 等待服务器的安装，安装成功后重启虚拟机：reboot
		⑧ 初始化配置gitlib: gitlab-ctl reconfigure
		⑨ 修改Gitlib的默认默认端口号以及开放防火墙
			首先需要先备份/etc/gitlab/gitlab.rb与/var/opt/gitlab/nginx/conf/gitlab-http.conf 至 /myconfig
			A. gitlab 默认的端口号是80 ，通常会被其他服务占用，所以要更改端口号，防止冲突
			B. 修改gitlib的配置文件：vim /etc/gitlab/gitlab.rb
			C. 添加以下内容，注意 external_url 可能会有默认配置，修改即可。本人的（localhost = 192.168.107.26，端口号为48）
				external_url 'http://localhost:端口号'
				nginx['listen_port'] = 端口号
				nginx['listen_https'] = false
			D. 修改nginx 端口号：vim /var/opt/gitlab/nginx/conf/gitlab-http.conf
			E. 按照以下配置，修改端口号，该服务已经存在gitlab-http.conf文件中，只需要修改配置项即可
				server {
 
					listen *:端口号;
					if ($http_host = "") {
					   set $http_host_with_default "localhost:端口号";
					}
				}
			F. 重新启动：sudo gitlab-ctl restart
			G. 开放端口号：
				a. 执行查看zones firewall-cmd --get-active-zones 
				firewall-cmd --permanent --zone=public --list-ports指令
				b. 执行开放端口号 firewall-cmd --zone=public --add-port=端口号/tcp --permanent 指令
				c. 执行重启防火墙 firewall-cmd --reload 指令
				d. 执行查看端口号是否开启 firewall-cmd --query-port=端口号/tcp 指令
	6. 登录gitlab服务器：
		① 输入ip地址:防火墙：192.168.107.26:48
		② 为gitlab设置登录密码
		③ 本人gitlab账号密码为：root/i1633491328
		④ gitlab的使用与GitHub大同小异。 
	7. gitlab开启和关闭的问题
		① 重新启动gitlab服务: sudo gitlab-ctl restart
		② 启动gitlab服务：sudo gitlab-ctl start
		③ 停止gitlab服务：sudo gitlab-ctl stop
		④ 禁止gitlab开机自启动：sudo systemctl disable gitlab-runsvdir.service
		⑤ 开启gitlab开机自启动：sudo systemctl enable gitlab-runsvdir.service
		⑥ 查看gitlab的状态：sudo gitlab-ctl status




	