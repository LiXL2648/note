一、Docker 安装
	1. 介绍：
		① elasticsearch：存储和检索数据
		② kibana：可视化检索数据
	2. 下载镜像文件
		① docker pull elasticsearch:7.8.0
		② docker pull kibana:7.8.0
	3. 创建实例
		① Elasticsearch
			A. 创建 Elasticsearch 挂载目录
				mkdir -p /usr/local/mydata/elasticsearch/config
				mkdir -p /usr/local/mydata/elasticsearch/data
			B. 创建 Elasticsearch 的配置文件，并写入配置
				echo "http.host: 0.0.0.0">> config/elasticsearch.yml
			C. 修改 Elasticsearch 挂载目录的权限
				chmod -R 777 /usr/local/mydata/elasticsearch/
			D. 创建容器
				docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \
				-e "discovery.type=single-node" \
				-e ES_JAVA_OPTS="-Xms64m -Xmx512m" \
				-v /usr/local/mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \
				-v /usr/local/mydata/elasticsearch/data:/usr/share/elasticsearch/data \
				-v /usr/local/mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \
				-d elasticsearch:7.8.0
			E. 访问：http://10.10.0.26:9200/，查看 Elasticsearch 是否启动成功
			F. 注意：-e ES_JAVA_OPTS="-Xms64m -Xmx512m" ，设置ES的初始内存和最大内存，否则导致过大启动不了ES
		② Kibana
			A. 创建容器
				docker run --name kibana -e ELASTICSEARCH_HOSTS=http://10.10.0.26:9200 -p 5601:5601 -d kibana:7.8.0
			B. 注意：http://10.10.0.26:9200 为虚拟机地址
二、Elasticsearch基本操作
	1. HTTP操作
		① 索引操作
			A. 创建索引
				a. 对比关系型数据库，创建索引就等同于创建数据库
				b. 在 Postman中，向ES服务器发PUT请求 ：http://10.10.0.26:9200/shopping
				c. 请求后，服务器返回响应
					{
						"acknowledged": true, # acknowledged：响应结果 true：操作成功
						"shards_acknowledged": true, # shards_acknowledged：分片结果 true：分片操作成功
						"index": "shopping" # index：索引名称
					}
				d. 注意：创建索引库的分片数默认1片，在7.0.0之前的Elasticsearch版本中，默认5片
				e. 如果重复添加索引，会返回错误信息
			B. 查看单个索引
				a. 在 Postman中，向ES服务器发GET请求 ：http://10.10.0.26:9200/shopping
				b. 查看索引向ES服务器发送的请求路径和创建索引是一致的，但是HTTP方法不一致
			C. 查看所有索引
				a. 在 Postman中，向ES服务器发GET请求 ：http://10.10.0.26:9200/_cat/indices?v
				b. 这里请求路径中的_cat表示查看的意思，indices表示索引，所以整体含义就是查看当前ES服务器中的所有索引，就好像MySQL中的show tables的感觉
			D. 删除索引
				a. 在 Postman中，向ES服务器发DELETE请求 ：http://127.0.0.1:9200/shopping
				b. 重新访问索引时，服务器返回响应：索引不存在
		② 文档操作
			A. 创建文档
				a. 在 Postman中，向ES服务器发POST请求 ：http://127.0.0.1:9200/shopping/_doc，请求体内容为：
					{
						"title":"小米手机",
						"category":"小米",
						"images":"http://www.gulixueyuan.com/xm.jpg",
						"price":3999.00
					}
				b. 此处发送请求的方式必须为POST并且需要发送请求体，不能是PUT，否则会发生错误
				c. 上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下，ES服务器会随机生成一个。
				d. 如果想要自定义唯一性标识，需要在创建时指定：http://127.0.0.1:9200/shopping/_doc/1
				e. 此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为PUT，并且_doc可以换成_create
			B. 查看文档
				a. 查看文档时，需要指明文档的唯一性标识，类似于MySQL中数据的主键查询。在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_doc/1
				b. 如果指定一个不存在的标识，则返回的结果 found 属性为 false
				c. 查看所有文档，在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
			C. 修改文档（全量修改）
				a. 和新增文档一样，输入相同的URL地址请求，如果请求体变化，会将原有的数据内容覆盖
				b. 在 Postman中，向ES服务器发 put 请求 ：http://127.0.0.1:9200/shopping/_doc/1，请求体内容为:
					{
						"title":"小米手机",
						"category":"小米",
						"images":"http://www.gulixueyuan.com/xm.jpg",
						"price":4999.00
					}
			D. 修改字段（局部修改）
				a. 修改数据时，也可以只修改某一给条数据的局部信息
				b. 在 Postman中，向ES服务器发POST请求 ：http://127.0.0.1:9200/shopping/_update/1请求体内容为：
					{
						"doc": {
							"title":"红米手机"
						}
					}
			E. 删除文档
				a. 删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）。
				b. 在 Postman中，向ES服务器发DELETE请求 ：http://127.0.0.1:9200/shopping/_doc/1
				c. 如果删除一个并不存在的文档，则result属性会显示not_found
			F. 条件删除
				a. 一般删除数据都是根据文档的唯一性标识进行删除，实际操作时，也可以根据条件对多条数据进行删除
				b. 向ES服务器发POST请求 ：http://127.0.0.1:9200/shopping/_delete_by_query，请求体内容为：
					{
						"query": {
							"match": {
								"title": "小米手机"
							}
						}
					}
		③ 高级查询
			A. 查询所有文档
				a. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
				b. 请求体
					{
					  "query": {
						"match_all": {}
					  }
					}
				c. 参数说明
					(1) query：这里的query代表一个查询对象，里面可以有不同的查询属性
					(2) match_all：查询类型，例如：match_all(代表查询所有)， match，term ， range 等等
					(3) {查询条件}：查询条件会根据类型的不同，写法也有差异
			B. 匹配查询
				a. 在请求地址中协助请求参数进行条件查询：http://10.10.0.26:9200/shopping/_search?q=category:小米（一般不建议）
				b. 使用请求体携带请求参数的方式，match匹配类型查询，会把查询条件进行分词，然后进行查询，多个词条之间是or的关系
				c. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
				d. 请求体：
					{
						"query": {
							"match": {
								"category":"小米"
							}
						}
					}
			C. 组合查询
				a. bool：把各种其它查询通过`must`（必须 ）、`must_not`（必须不）、`should`（应该）的方式进行组合
				b. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
				c. 请求体：
					{
						"query": {
							"bool": {
								"must": [
									{
										"match": {
											"category": "华为"
										}
									},
									{
										"match": {
											"price": 5999
										}
									}
								]
							}
						}
					}
			D. 分页查询
				a. from：当前页的起始索引，默认从0开始。 from = (pageNum - 1) * size
				b. size：每页显示多少条
				c. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
				d. 请求体：
					{
						"query": {
							"match_all": {}
						},
						"from": 0,
						"size": 5
					}
			E. 过滤字段
				a. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
				b. 请求体：
					{
						"query": {
							"match_all": {}
						},
						"from": 0,
						"size": 5,
						"_source": ["title", "price"]
					}
				c. 也可以通过:	
					(1) includes：来指定想要显示的字段 
					(2) excludes：来指定不想要显示的字段
					(3) 举例：
						{
							"_source": {
								"includes": ["name","nickname"]
							},  
							"query": {
								"match_all": {}
							},
							"from": 0,
							"size": 5
						}
			F. 单字段排序
				a. sort 可以让我们按照不同的字段进行排序，并且通过order指定排序的方式。desc降序，asc升序。
				b. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
				c. 请求体
					{
						"_source": {
							"includes": ["title", "price"]
						},  
						"query": {
							"match_all": {}
						},
						"from": 0,
						"size": 5,
						"sort": {
							"price": {
								"order": "desc"
							}
						}
					}
			H. 组合查询
				a. bool 把各种其它查询通过`must`（必须 ）、`must_not`（必须不）、`should`（应该）的方式进行组合
				b. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
				c. 请求体
					{
						"query": {
							"bool": {
								"must": [
									{
										"match": {
											"category": "华为"
										}
									},
									{
										"match": {
											"price": "5999"
										}
									}
								]
							}
						}
					}
			I. 范围查询
				a. range 查询找出那些落在指定区间内的数字或者时间。
				b. range查询允许以下字符
					+----------------------+
					| 操作符	说明	   |
					+----------------------+
					| gt		大于>	   |
					+----------------------+
					| gte		大于等于>= |
					+----------------------+
					| lt		小于<	   |
					+----------------------+
					| lte		小于等于<= |
					+----------------------+
				c. 请求体
					{
						"query": {
							"bool": {
								"should": [
									{
										"match": {
											"category": "华为"
										}
									},
									{
										"match": {
											"category": "小米"
										}
									}
								],
								"filter": {
									"range": {
										"price": {
											"gte": 3999
										}
									}
								}
							}
						}
					}
			J. 模糊查询
				a. 返回包含与搜索字词相似的字词的文档。
				b. 编辑距离是将一个术语转换为另一个术语所需的一个字符更改的次数。这些更改可以包括：
					(1) 更改字符（box → fox）
					(2) 删除字符（black → lack）
					(3) 插入字符（sic → sick）
					(4) 转置两个相邻字符（act → cat）
				c. 为了找到相似的术语，fuzzy查询会在指定的编辑距离内创建一组搜索词的所有可能的变体或扩展。然后查询返回每个扩展的完全匹配。
				d. 通过fuzziness修改编辑距离。一般使用默认值AUTO，根据术语的长度生成编辑距离。
				e. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
				f. 请求体
					{
						"query": {
							"fuzzy": {
								"title": {
									"value": "红米手机"
								}
							}
						}
					}
					或
					{
						"query": {
							"fuzzy": {
								"title": {
								"value": "zhangsan",
								"fuzziness": 2
								}
							}
						}
					}
			K. 精确匹配
				a. match 是属于全文检索匹配，对查询字段文字数据进行分词，对分词后的数据保存到倒排索引中，即使使用查询字段的一部分数据也能查询到该数据，
				es 同样会将查询的内容进行分词，并在倒排索引中进行匹配。
				b. match_phrase 可对某个字段进行精确查询
				c. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
				d. 请求体
					{
						"query": {
							"match_phrase": {
								"category": "小华"
							}
						}
					}
			L. 高亮查询
				a. Elasticsearch可以对查询内容中的关键字部分，进行标签和样式(高亮)的设置。
				b. 在使用match查询的同时，加上一个highlight属性：
					(1) pre_tags：前置标签
					(2) post_tags：后置标签
					(3) fields：需要高亮的字段
					(4) title：这里声明title字段需要高亮，后面可以为这个字段设置特有配置，也可以空
				c. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
				d. 请求体
					{
						"query": {
							"match": {
								"category": "小华"
							}
						},
						"highlight": {
							"fields": {
								"category": {}
							}
						}
					}
			M. 聚合查询
				a. 聚合允许使用者对es文档进行统计分析，类似与关系型数据库中的group by，当然还有很多其他的聚合，例如取最大值、平均值等等。
				b. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/shopping/_search
				c. 对某个非文本字段进行统计分析
					{
						"aggs": { // 聚合操作
							"price_terms": { // 名称，随意起
								"terms": { //分组
									"field": "price" // 分组字段
								}
							}
						},
						"size": 0
					}
				d. 对某个字段取最大值max
					{
						"aggs": { 
							"price_max": {
								"max": {
									"field": "price"
								}
							}
						},
						"size": 0
					}
				e. 对某个字段取最小值min
					{
						"aggs": {
							"price_min": {
								"min": {
									"field": "price"
								}
							}
						},
						"size": 0
					}
				f. 对某个字段求和sum
					{
						"aggs": {
							"price_sum": {
								"sum": {
									"field": "price"
								}
							}
						},
						"size": 0
					}
				g. 对某个字段取平均值avg
					{
						"aggs": {
							"price_avg": {
								"avg": {
									"field": "price"
								}
							}
						},
						"size": 0
					}
				h. State聚合，对某个字段一次性返回count，max，min，avg和sum五个指标
					{
						"aggs": {
							"price_stats": {
								"stats": {
									"field": "price"
								}
							}
						},
						"size": 0
					}
		④ 映射操作
			A. 映射
				a. 有了索引库，等于有了数据库中的database。
				b. 接下来就需要建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。
				c. 创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。
			B. 创建映射
				a. 在 Postman中，向ES服务器发PUT请求 ：http://127.0.0.1:9200/student/_mapping
				b. 请求体内容为：
					{
						"properties": {
							"name": {
								"type": "text",
								"index": true
							},
							"sex": {
								"type": "keyword",
								"index": true
							},
							"age": {
								"type": "long",
								"index": false
							}
						}
					}
				c. 映射数据说明：	
					(1) 字段名：任意填写，下面指定许多属性，例如：title、subtitle、images、price
					(2) type：类型，Elasticsearch中支持的数据类型非常丰富，说几个关键的：
						(A) String类型，又分两种：
							(a) text：可分词
							(b) keyword：不可分词，数据会作为完整字段进行匹配
						(B) Numerical：数值类型，分两类
							(a) 基本数据类型：long、integer、short、byte、double、float、half_float
							(b) 浮点数的高精度类型：scaled_float
						(C) Date：日期类型
						(D) Array：数组类型
						(E) Object：对象
					(3) index：是否索引，默认为true，也就是说你不进行任何配置，所有字段都会被索引。
						true：字段会被索引，则可以用来进行搜索
						false：字段不会被索引，不能用来搜索
					(4) store：是否将数据进行独立存储，默认为false
						原始的文本会存储在_source里面，默认情况下其他提取出来的字段都不是独立存储的，是从_source里面提取出来的。当然你也可以独立的存储某个字段，
						只要设置"store": true即可，获取独立存储的字段要比从_source中解析快得多，但是也会占用更多的空间，所以要根据实际业务需求来设置。
					(5) analyzer：分词器，这里的ik_max_word即使用ik分词器
			C. 查看映射
				a. 在 Postman中，向ES服务器发GET请求 ：http://127.0.0.1:9200/student/_mapping
			D. 索引映射关联
				a. 在 Postman中，向ES服务器发PUT请求 ：http://127.0.0.1:9200/student
				b. 请求体内容为：
					{
						"settings": {},
						"mappings": {
							"properties": {
								"name": {
									"type": "text",
									"index": true
								},
								"sex": {
									"type": "keyword",
									"index": true
								},
								"age": {
									"type": "long",
									"index": false
								}
							}
						}
					}
	2. Java API操作
		① 创建Maven项目，修改pom文件，增加Maven依赖关系
			<dependencies>
				<dependency>
					<groupId>org.elasticsearch</groupId>
					<artifactId>elasticsearch</artifactId>
					<version>7.8.0</version>
				</dependency>
				<!-- elasticsearch的客户端 -->
				<dependency>
					<groupId>org.elasticsearch.client</groupId>
					<artifactId>elasticsearch-rest-high-level-client</artifactId>
					<version>7.8.0</version>
				</dependency>
				<!-- elasticsearch依赖2.x的log4j -->
				<dependency>
					<groupId>org.apache.logging.log4j</groupId>
					<artifactId>log4j-api</artifactId>
					<version>2.8.2</version>
				</dependency>
				<dependency>
					<groupId>org.apache.logging.log4j</groupId>
					<artifactId>log4j-core</artifactId>
					<version>2.8.2</version>
				</dependency>
				<dependency>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-databind</artifactId>
					<version>2.9.9</version>
				</dependency>
				<!-- junit单元测试 -->
				<dependency>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
					<version>4.12</version>
				</dependency>
			</dependencies>
		② 客户端对象
			RestHighLevelClient esClient = new RestHighLevelClient(RestClient.builder(new HttpHost(HOSTNAME, PORT)));
			esClient.close();
		③ 索引操作
			A. 创建索引
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				CreateIndexRequest indexRequest = new CreateIndexRequest("student");
				CreateIndexResponse indexResponse = esClient.indices().create(indexRequest, RequestOptions.DEFAULT);
				System.out.println(indexResponse.isAcknowledged());
				esClient.close();
			B. 查看索引
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				GetIndexRequest indexRequest = new GetIndexRequest("student");
				GetIndexResponse indexResponse = esClient.indices().get(indexRequest, RequestOptions.DEFAULT);
				System.out.println(indexResponse.getAliases());
				System.out.println(indexResponse.getSettings());
				System.out.println(indexResponse.getMappings());
				esClient.close();
			C. 删除索引
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				DeleteIndexRequest indexRequest = new DeleteIndexRequest("student");
				AcknowledgedResponse response = esClient.indices().delete(indexRequest, RequestOptions.DEFAULT);
				System.out.println(response.isAcknowledged());
				esClient.close();
		④ 文档操作
			A. 新增文档
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				IndexRequest indexRequest = new IndexRequest();
				indexRequest.index("shopping").id("11");
				Shopping shopping = new Shopping("Apple 8", "Apple", "http://www.gulixueyuan.com/apple12.jpg",
						new BigDecimal("5299.00"));
				ObjectMapper objectMapper = new ObjectMapper();
				String shoppingJson = objectMapper.writeValueAsString(shopping);
				indexRequest.source(shoppingJson, XContentType.JSON);
				IndexResponse indexResponse = esClient.index(indexRequest, RequestOptions.DEFAULT);
				System.out.println(indexResponse.getResult());

				esClient.close();
			B. 修改文档
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				UpdateRequest updateRequest = new UpdateRequest();
				updateRequest.index("shopping").id("10");
				// updateRequest.doc(XContentType.JSON, "price", new BigDecimal("6199.00"));
				updateRequest.doc(XContentType.JSON, "title", "iPhone 11");
				UpdateResponse updateResponse = esClient.update(updateRequest, RequestOptions.DEFAULT);
				System.out.println(updateResponse.getResult());
				esClient.close();
			C. 查询文档
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				GetRequest getRequest = new GetRequest();
				getRequest.index("shopping").id("7");
				GetResponse getResponse = esClient.get(getRequest, RequestOptions.DEFAULT);
				System.out.println(getResponse.getSourceAsString());
				esClient.close();
			D. 删除文档
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				DeleteRequest deleteRequest = new DeleteRequest();
				deleteRequest.index("shopping").id("7");
				DeleteResponse deleteResponse = esClient.delete(deleteRequest, RequestOptions.DEFAULT);
				System.out.println(deleteResponse.getResult());
				esClient.close();
			E. 批量操作
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				BulkRequest bulkRequest = new BulkRequest();
				ObjectMapper objectMapper = new ObjectMapper();
				bulkRequest.add(new IndexRequest().index("shopping").id("7").source(objectMapper.writeValueAsString(
						new Shopping("iPhone 12", "Apple", "https://item.jd.com/100020961240.html", new BigDecimal("6299.00"))), XContentType.JSON));
				bulkRequest.add(new IndexRequest().index("shopping").id("8").source(objectMapper.writeValueAsString(
						new Shopping("iPhone 11 Prod Max", "Apple", "https://item.jd.com/100020961240.html", new BigDecimal("7299.00"))), XContentType.JSON));
				bulkRequest.add(new IndexRequest().index("shopping").id("9").source(objectMapper.writeValueAsString(
						new Shopping("iPhone X", "Apple", "https://item.jd.com/100020961240.html", new BigDecimal("8499.00"))), XContentType.JSON));
				BulkResponse bulkResponse = esClient.bulk(bulkRequest, RequestOptions.DEFAULT);
				System.out.println(bulkResponse.hasFailures());
				esClient.close();
		⑤ 高级查询
			A. 全量查询
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				SearchRequest searchRequest = new SearchRequest();
				searchRequest.indices("shopping");
				SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(QueryBuilders.matchAllQuery());
				searchRequest.source(searchSourceBuilder);
				SearchResponse searchResponse = esClient.search(searchRequest, RequestOptions.DEFAULT);
				searchResponse.getHits().forEach(h -> System.out.println(h.getSourceAsString()));
				System.out.println();
				esClient.close();
			B. 全文检索+分页查询+排序+过滤字段
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				
				SearchRequest searchRequest = new SearchRequest();
				searchRequest.indices("shopping");
				SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
				// 全文检索
				searchSourceBuilder.query(QueryBuilders.matchQuery("category", "Apple"));
				// 分页查询
				searchSourceBuilder.from(0);
				searchSourceBuilder.size(2);
				// 排序
				searchSourceBuilder.sort("price", SortOrder.ASC);
				// 过滤字段
				String[] includes = {};
				String[] excludes = {"category"};
				searchSourceBuilder.fetchSource(includes, excludes);

				searchRequest.source(searchSourceBuilder);
				SearchResponse searchResponse = esClient.search(searchRequest, RequestOptions.DEFAULT);
				searchResponse.getHits().forEach(s -> System.out.println(s.getSourceAsString()));
				esClient.close();
			C. 组合查询+范围查询
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();

				SearchRequest searchRequest = new SearchRequest();
				SearchSourceBuilder builder = new SearchSourceBuilder();
				// 组合查询
				MatchQueryBuilder matchQueryBuilder = QueryBuilders.matchQuery("category", "华为");
				MatchQueryBuilder matchQueryBuilder1 = QueryBuilders.matchQuery("category", "Apple");
				BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery().should(matchQueryBuilder).should(matchQueryBuilder1);
				builder.query(boolQueryBuilder);

				// 范围查询
				RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery("price").gte(5999.0d).lte(8499.0d);
				builder.query(rangeQueryBuilder);

				searchRequest.source(builder);
				SearchResponse searchResponse = esClient.search(searchRequest, RequestOptions.DEFAULT);
				searchResponse.getHits().forEach(s -> System.out.println(s.getSourceAsString()));
				esClient.close();
			D. 模糊查询+高亮查询
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				SearchRequest searchRequest = new SearchRequest();
				SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();

				// 模糊查询
				FuzzyQueryBuilder fuzzyQueryBuilder = QueryBuilders.fuzzyQuery("title", "iPhone ").fuzziness(Fuzziness.TWO);
				searchSourceBuilder.query(fuzzyQueryBuilder);

				// 高亮查询
				HighlightBuilder highlightBuilder = new HighlightBuilder().field("title");
				searchSourceBuilder.highlighter(highlightBuilder);

				searchRequest.source(searchSourceBuilder);
				SearchResponse searchResponse = esClient.search(searchRequest, RequestOptions.DEFAULT);
				searchResponse.getHits().forEach(s -> System.out.println(s.getHighlightFields()));
			E. 分组查询+分组查询，求最大值
				RestHighLevelClient esClient = EsClientUtil.getInstance().getEsClient();
				SearchRequest searchRequest = new SearchRequest();
				SearchSourceBuilder builder = new SearchSourceBuilder();
				// 分组查询
				TermsAggregationBuilder termsAggregationBuilder = AggregationBuilders.terms("terms_price").field("price");
				builder.aggregation(termsAggregationBuilder);

				// 分组查询，求最大值
				MaxAggregationBuilder maxAggregationBuilder = AggregationBuilders.max("max_price").field("price");
				builder.aggregation(maxAggregationBuilder);

				searchRequest.source(builder);
				SearchResponse searchResponse = esClient.search(searchRequest, RequestOptions.DEFAULT);
				ParsedDoubleTerms termsCategoryAggregation = searchResponse.getAggregations().get("terms_price");
				System.out.println(termsCategoryAggregation.getBuckets());

				ParsedMax maxPriceAggregation = searchResponse.getAggregations().get("max_price");
				System.out.println(maxPriceAggregation.getValue());
				esClient.close();
三、Elasticsearch 集群
	1. 软件下载：https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0
	2. 软件安装
		① 解压软件：tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module
		② 修改配置文件：
			A. 修改 /usr/local/elasticsearch-7.8.0/config/elasticsearch.yml
				# 加入如下配置
				#集群名称
				cluster.name: cluster-es
				#节点名称，每个节点的名称不能重复
				node.name: node-1
				#ip地址，每个节点的地址不能重复
				network.host: 192.168.230.48
				#是不是有资格主节点
				node.master: true
				node.data: true
				http.port: 9200
				# head 插件需要这打开这两个配置
				http.cors.allow-origin: "*"
				http.cors.enabled: true
				http.max_content_length: 200mb
				#es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举master
				cluster.initial_master_nodes: ["node-1"]
				#es7.x 之后新增的配置，节点发现
				discovery.seed_hosts: ["192.168.230.48:9300", "192.168.230.24:9300", "192.168.230.29:9300"]
				gateway.recover_after_nodes: 2
				network.tcp.keep_alive: true
				network.tcp.no_delay: true
				transport.tcp.compress: true
				#集群内同时启动的数据任务个数，默认是2个
				cluster.routing.allocation.cluster_concurrent_rebalance: 16
				#添加或删除节点及负载均衡时并发恢复的线程个数，默认4个
				cluster.routing.allocation.node_concurrent_recoveries: 16
				#初始化数据恢复时，并发恢复线程的个数，默认4个
				cluster.routing.allocation.node_initial_primaries_recoveries: 16
			B. 修改 /etc/security/limits.conf
				# 在文件末尾中增加下面内容
				elasticsearch soft nofile 65536
				elasticsearch hard nofile 65536
			C. 修改 /etc/security/limits.d/20-nproc.conf
				# 在文件末尾中增加下面内容
				es soft nofile 65536
				es hard nofile 65536
				* hard nproc 4096
				# 注：* 带表Linux所有用户名称
			D. 修改/etc/sysctl.conf
				# 在文件中增加下面内容
				vm.max_map_count=655360
			E. 重新加载
				sysctl -p
		③ 创建用户：因为安全问题，Elasticsearch不允许root用户直接运行，所以要在每个节点中创建新用户，在root用户中创建新用户 
				useradd elasticsearch #新增 elasticsearch 用户
				passwd elasticsearch #为 elasticsearch 用户设置密码
				userdel -r elasticsearch #如果错了，可以删除再加
				chown -R elasticsearch:elasticsearch /usr/local/elasticsearch-7.8.0 #文件夹所有者
	3. 启动软件
		① 切换到 elasticsearch 用户
			su elasticsearch
		② 控制台启动
			/usr/local/elasticsearch-7.8.0/bin/elasticsearch
		③ 后台启动
			/usr/local/elasticsearch-7.8.0/bin/elasticsearch -d
	4. 测试集群，http://192.168.230.48:9200/_cat/nodes
		192.168.230.29  8 96 0 0.00 0.01 0.05 dilmrt - node-3
		192.168.230.24 39 96 0 0.14 0.08 0.06 dilmrt - node-2
		192.168.230.48 20 96 0 0.05 0.03 0.05 dilmrt * node-1
	5. 分布式集群
		① 单节点集群
			A. 我们在包含一个空节点的集群内创建名为 users 的索引，为了演示目的，我们将分配3个主分片和一份副本（每个主分片拥有一个副本分片）
			B. 在 Postman中，向ES服务器发PUT请求 ：http://192.168.230.48:9200/_cat/nodes，请求参数：
				{
				   "settings" : {
					  "number_of_shards" : 3,
					  "number_of_replicas" : 1
				   }
				}
			C. 我们的集群现在是拥有一个索引的单节点集群。所有3个主分片都被分配在 node-1 。
			D. 通过elasticsearch-head插件查看集群情况
				a. 集群健康值:yellow( 3 of 6 ) : 表示当前集群的全部主分片都正常运行，但是副本分片没有全部处在正常状态，3个主分片正常，3个副本分片都是 Unassigned  
				—— 它们都没有被分配到任何节点。在同一个节点上既保存原始数据又保存副本是没有意义的，因为一旦失去了那个节点，我们也将丢失该节点上的所有副本数据。
				b. 当前我们的集群是正常运行的，但是在硬件故障时有丢失数据的风险。
		② 故障转移
			A. 当集群中只有一个节点在运行时，意味着会有一个单点故障问题——没有冗余。 幸运的是，我们只需再启动一个节点即可防止数据丢失。当你在同一台机器上启动
			了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。 但是在不同机器上启动节点的时候，为了加入到同一集群，
			你需要配置一个可连接到的单播主机列表。之所以配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上运行的节点才会自动组成集群。
			B. 如果启动了第二个节点，我们的集群将会拥有两个节点的集群 : 所有主分片和副本分片都已被分配
			C. 通过elasticsearch-head插件查看集群情况
				a. 表示所有6个分片（包括3个主分片和3个副本分片）都在正常运行。
				b. 当第二个节点加入到集群后，3个副本分片将会分配到这个节点上——每个主分片对应一个副本分片。这意味着当集群内任何一个节点出现问题时，我们的数据都
				完好无损。所有新近被索引的文档都将会保存在主分片上，然后被并行的复制到对应的副本分片上。这就保证了我们既可以从主分片又可以从副本分片上获得文档。
		③ 水平扩容
			A. 怎样为我们的正在增长中的应用程序按需扩容呢？当启动了第三个节点，我们的集群将会拥有三个节点的集群 : 为了分散负载而对分片进行重新分配
			B. 通过elasticsearch-head插件查看集群情况
				a. 表示所有6个分片（包括3个主分片和3个副本分片）都在正常运行。
				b. Node 1 和 Node 2 上各有一个分片被迁移到了新的 Node 3 节点，现在每个节点上都拥有2个分片，而不是之前的3个。 这表示每个节点的硬件资源（CPU, RAM, 
				I/O）将被更少的分片所共享，每个分片的性能将会得到提升。
				c. 分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。 我们这个拥有6个分片（3个主分片和3个副本分片）的索引可以最大扩容到6个节点，
				每个节点上存在一个分片，并且每个分片拥有所在节点的全部资源。
			C. 但是如果我们想要扩容超过6个节点怎么办呢
				a. 主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够存储 的最大数据量。（实际大小取决于你的数据、硬件和使用场景。）但是，
				 读操作——搜索和返回数据——可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片时，也将拥有越高的吞吐量。
				b. 在运行中的集群上是可以动态调整副本分片数目的，我们可以按需伸缩集群。让我们把副本数从默认的 1 增加到 2
				c. 在 Postman中，向ES服务器发PUT请求 ：http://192.168.230.48:9200/_cat/nodes，请求参数：
					{
						"number_of_replicas" : 2
					}
				d. users索引现在拥有9个分片：3个主分片和6个副本分片。 这意味着我们可以将集群扩容到9个节点，每个节点上一个分片。相比原来3个节点时，集群搜索性能可以提
				升 3 倍。
				e. 当然，如果只是在相同节点数目的集群上增加更多的副本分片并不能提高性能，因为每个分片从节点上获得的资源会变少。 你需要增加更多的硬件资源来提升吞吐量。
				f. 但是更多的副本分片数提高了数据冗余量：按照上面的节点配置，我们可以在失去2个节点的情况下不丢失任何数据。
	6. SpringBoot 整合 Elasticsearch 单节点
		① 引入依赖
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
			</dependency>
		②改yml
			elasticsearch:
			  host: 192.168.230.29
			  port: 9200
		③ 配置类
			@Data
			// @Configuration
			@ConfigurationProperties(prefix = "elasticsearch")
			public class ElasticsearchConfig extends AbstractElasticsearchConfiguration {

				private String host;

				private Integer port;

				@Override
				public RestHighLevelClient elasticsearchClient() {
					return new RestHighLevelClient(RestClient.builder(new HttpHost(host, port)));
				}
			}
		④ 测试	
			@Resource
			private RestHighLevelClient restHighLevelClient;
			
			@Resource
			private ObjectMapper objectMapper;
			
			@Test
			public void testSaveUser() throws Exception {
				IndexRequest indexRequest = new IndexRequest();
				indexRequest.index("users").id("2");
				Users users = new Users(null, "lilx", 2);
				String json = objectMapper.writeValueAsString(users);
				indexRequest.source(json, XContentType.JSON);
				IndexResponse response = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);
				System.out.println(response.getResult());
			}

			@Test
			public void testQueryUser() throws Exception {
				SearchRequest searchRequest = new SearchRequest();
				searchRequest.indices("users");
				SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(QueryBuilders.matchAllQuery());
				searchRequest.source(searchSourceBuilder);
				SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);
				searchResponse.getHits().forEach(h -> System.out.println(h.getSourceAsString()));
			}
			
	7. SpringData 整合 Elasticsearch 集群
		① 引入依赖
			 <dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
			</dependency>
		② 改yml
			spring:
			  elasticsearch:
				rest:
				  uris:
					- http://192.168.230.48:9200
					- http://192.168.230.24:9200
					- http://192.168.230.29:9200
		③ 实体类
			@Data
			@AllArgsConstructor
			@NoArgsConstructor
			@ToString
			@Document(indexName = "product", shards = 3, replicas = 2)
			public class Product {

				@Id
				private Long id;

				@Field(type = FieldType.Text)
				private String title;

				@Field(type = FieldType.Keyword)
				private String category;

				@Field(type = FieldType.Keyword)
				private String images;

				@Field(type = FieldType.Keyword, index = false)
				private BigDecimal price;
			}
		④ Dao：
			Repository
			@Repository
			public interface ProductRepository extends ElasticsearchRepository<Product, Long> {
			
			}
		③ 测试
			@Resource
			private ProductRepository productRepository;

			@Test
			public void testSaveProduct() {

				Product product = new Product(1L, "iphone 12", "apple", "http://ip:port/image1.jsp", new BigDecimal("6799.99"));
				productRepository.save(product);
			}

			@Test
			public void testFindAll() {
				Iterable<Product> all = productRepository.findAll();
				all.forEach(System.out::println);
			}




































