一、密码学
	1. 介绍
		① 密码学：主要研究编制密码和破译密码的学科
		② 密码学的主要目的：研究如何隐藏信息并且把信息传递出去的学科
		③ 密码学按照历史分类
			A. 古典密码学
			B. 近代密码学
			C. 现代密码学
	2. 古典密码学
		① 核心原理：替换法，移位法
		② 凯撒加密
		③ 频度分析法：进行破译密码，在不知道密码的规则前提下，进行破译密码
		④ 如何设置密码才比较安全
	3. 近代密码学：
		① 核心原理：替换法，移位法
	4. 现代密码学
		① 散列函数：MD5，SHA-1，SHA-256，SHA-512
		② 对称加密：
			A. DES 加密和解密，AES 加密和解密
			B. 对称加密的核心原理：块加密，流加密
			C. toString() 和 new String() 核心原理和区别
			D. 加密模式：ECB CBC
			E. 填充模式：NoPadding 和 PKCS5padding
		③ 非对称加密
			A. 非对称加密的特点
			B. RSA 算法和 ECC 算法
			C. 数字摘要：Base64 核心加密原则，和 Base64原理 
			D. 数字签名和数字证书
			E. keytool 工具的使用
二、密码学的基本概念
	1. 密码学在我们生活中有着重要的作用，那么密码学来自何方，为何会产生？密码学是网络安全、信息安全、区块链等产品的基础，常见的非对称加密、对称加密、
	散列函数等，都属于密码学范畴。密码学有数千年的历史，从最开始的替换法到如今的非对称加密算法，经历了古典密码学，近代密码学和现代密码学三个阶段。密
	码学不仅仅是数学家们的智慧，更是如今网络安全的重要基础
	2. 古典密码学
		① 在古代的战争中，多见使用隐藏信息的方式保护重要的通信资料。比如先把需要保护的信息用化学药水写到纸上，药水干后，纸上看不出任何信息，需要使用
		另外的化学药水涂抹后才能阅读纸上的信息，这些方法都是在保护重要的信息不被他人获取，但藏信息的方式比较容易被他人识破，例如增加哨兵的排查力度，就
		会发现其中的猫腻，因而随后发展出了较难破解的古典密码学
		② 替换法：
			A. 替换法很多理解，就是用固定的信息将原文替换成无法直接阅读的密文信息。例如将 b 替换成 w，e 替换成 p，这样 bee 单词就变成了wpp，不知道
			替换规则的人就无法阅读原文的含义
			B. 替换法有单表替换和多表替换两种形式。单表替换即只有一张原文密文对照表单，发送者和接收者用这张表单来加密解密。在上述例子中，表单即为：
			a b c d e - s w t r p。
			C. 多表替换即有多张原文密文对照表单，不同字母可以用不同表单的内容替换。例如约定好表单为：表单1：a b c d e - s w t r p、表单2：
			D. b c d e - c h f h k、表单3：a b c d e - j f t o u。规定第一个字母用第三张表单，第二个字母用第一张表单，第三个字母用第二张表单，这是 bee 单
			词就变成了（312）fpk，破解难度更高，其中 312 又叫做密钥，密钥可以事先约定好，也可以在传输过程中标记出来。
		③ 移位法：
			A. 移位法就是将原文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后得出密文，典型的移位法应用有“凯撒密码”
			B. 例如：约定好向后移动2位（abcde - cdefg），这样 bee 单词就变成 dgg
			C. 同理替换法，移位法也可以采用多表移位的方式，典型的多表案例是“维尼吉亚密码”（又译维热纳尔密码），属于多表密码的一种形式
		④ 古典密码破解方式
			A. 古典密码虽然很简单，但是在密码史上是使用的最久的加密方式，直到“概率论”的数学方法被发现，古典密码就被破解了
			B. 英文单词中字母出现的频率是不同的，e 以 12.702% 的百分比占比最高，z只占到 0.0074%，如果密文数量足够大，仅仅采用频度分析法就可以破解单表的替换
			法或者移位法
	3. 近代密码学
		① 恩尼格玛密码机：核心使用的是移位法和替换法
		② 人工智能之父图灵破解
	4. 现代密码学
		① 散列函数
			A. 散列函数，也叫杂凑函数、摘要函数或者哈希函数，可将任意长度的消息经过运算，变成固定长度数值，常见的又 MD5、SHA-1、SHA-256，多应用在文件校验上，
			数字签名中。
			B. MD5 可以将任意长度的原文生成一个128位（16字节）的哈希值
			C. SHA-1 可以将任意长度的原文生成一个160位（20字节）的哈希值
		② 对称密码
			A. 对称加密应用了相同的加密密钥和解密密钥。对称密码分为：序列密码（流密码），分组密码（块密码）两种。流密码是对信息流中的每一个元素（一个字母或
			一个比特）作为单元进行加密，块密码是先对信息流分块，再对每一块分别加密
			B. 例如原文为 1234567890，流加密即先对1进行机密，再对2进行加密，……最后拼成密文；块加密先分成不同的块，如1234成块，5678成块，90XX（XX为补位数字）成
			块，再分别对不同块进行加密，最后拼接成密文。前文提到的古典密码学加密方法，都属于流加密
		③ 非对称密码
			A. 对称密码的密钥安全及其重要，加密者和解密者需要提前协商密钥，并各自确保密钥的安全性，一旦密钥泄露，即便算法是安全的也无法保障信息的私密性
			B. 在实际的使用中，远程的提前协商密钥不容易实现，即时协商好	，在远程传输过程中也容易被他人获取，因此非对称密钥此时就凸显出了优势
			C. 非对称密码有两支密钥：公钥（publickey）和私钥（privatekey），加密和解密运算使用的密钥不同。用公钥对原文进行加密后，需要由私钥进行解密；用私钥对
			原文进行加密后（此时一般称为签名），需要用公钥进行解密（此时一般称为验签）。公钥是可以公开的，大家使用公钥对信息进行加密，再发送给私钥持有者，私钥
			持有者使用私钥对信息进行解密，获得信息原文。因为私钥只有单一人持有，因此不用担心被他人解密获取信息原文。
	5. 如何设置密码才安全
		① 密码不要太常见，不要使用123456作为密码
		② 各个应用软件里面的密码不要设置一样，防止撞库
		③ 在设置密码的时候，可以加一些特殊的标记，比如加上网站名的拼音缩写作为前缀
			
三、ASCII编码
	1. ASCII（American Standard Code for Information InterChange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它
	是现今最通用的单字节编码系统，并等同于国际标准 ISO/IEC 646
	2. ASCII编码示例：
		① 创建 maven 项目 encrypt-decrypt
		② 添加 pom 文件
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>2.8.0</version>
			</dependency>
		③ 创建 com.li.encryptdecrypt.ascii.AsciiDemo 类
			public class AsciiDemo {

				public static void main(String[] args) {
					// 在 ASCII 码中 A 对应的十进制数字
					System.out.println((int) 'A');

					String hello = "hello";
					for (char c : hello.toCharArray()) {
						System.out.println((int) c);
					}
				}
			}
四、恺撒加密
	1. 中国古代加密
		① 看一个小故事，看看古人如何加密和解密
		② 公元 683年，唐中宗即为。随后，武则天废唐中宗，立第四子李旦为皇帝，但朝政大事均由她自己专断
		③ 裴炎、徐敬业和骆宾王等人对此非常不满。徐敬业聚兵 10 万，在江苏扬州起兵。裴炎作内应，欲以拆字手段为其传递秘密信息。后因有人高密，裴炎被捕，未发出的密信
		落到武则天手中。这封密信上只有“青鹅”二字，群臣对此大惑不解
		④ 武则天破解了“青鹅”的秘密：“青”字拆开来就是“十二月”，而“鹅”字拆开就是“我自与”。密信的意思就是让徐敬业、骆宾王等率兵与十二月进发，裴炎在内部接应。“青鹅”破
		译后，裴炎被杀，接着，武则天派兵击败了徐敬业和骆宾王
	2. 外国加密
		① 在密码学中，恺撒密码是一种最简单且最广为人知饿加密技术
		② 恺撒密码最早由古罗马军事统帅盖乌斯.尤利乌斯.恺撒在军队中用来传递加密信息，故称为恺撒密码。这是一种位移加密方式，只对26个字母进行位移替换加密，规则简单，容
		易破解。下面是位移1次的对比
			------------------------------------------------------------------------------------------------------------------
			| 明文字母表 | Z | A | B | C | D | E | F | G | H | I | J | K | L | M | O | P | Q | R | S | T | U | V | W | X | Y | 
			|-----------------------------------------------------------------------------------------------------------------
			| 密文字母表 | A | B | C | D | E | F | G | H | I | J | K | L | M | O | P | Q | R | S | T | U | V | W | X | Y | Z |
			------------------------------------------------------------------------------------------------------------------
		③ 将明文字母表后移一位，A 变成 B，B 变成 C，……，Z 变成 A。同理，若将明文字母表向后移动 3 位
			------------------------------------------------------------------------------------------------------------------
			| 明文字母表 | X | Y | Z | A | B | C | D | E | F | G | H | I | J | K | L | M | O | P | Q | R | S | T | U | V | W |
			|-----------------------------------------------------------------------------------------------------------------
			| 密文字母表 | A | B | C | D | E | F | G | H | I | J | K | L | M | O | P | Q | R | S | T | U | V | W | X | Y | Z |
			------------------------------------------------------------------------------------------------------------------
		④ 则 A 变成 D，B 变成 E，……，Z 变成 C
		⑤ 字母表最多可以移动 25 位，恺撒密码的明文字母表向后或者向前移动都是可以的，通常表述为向后移动，如果要向前移动 1 位，则等同于向后移动25位，位移选择位 25 即可
		⑥ 它是一种替换加密的技术，明文中的所有字母都在字母表上向后（或向前）按照固定数目进行偏移后被替换成密文
		⑦ 例如：当偏移量是 3 的时候，所有的字母 A 将被替换成 D，B 变成 E，以此类推
		⑧ 这个加密方法是以恺撒的名字命名的，当年恺撒曾用此方法与其将军进行联系
		⑨ 恺撒密码通常被作为其他更复杂的加密方法的一个步骤，简单来说就是当密钥为n，其中一个待加密字符ch，加密之后的字符为ch+n，当 ch+n 超过 z 时，回到 a 计数。
	3. 恺撒加密实例：创建 com.li.encryptdecrypt.kaiser.KaiserDemo 类
		public class KaiserDemo {

				public static void main(String[] args) {

					// 定义原文
					String str = "Hello World";
					// 把原文右移3位
					int key = 3;
					StringBuilder sb = new StringBuilder();
					for (char c : str.toCharArray()) {
						sb.append((char) (c + 3));
					}
					System.out.println(sb.toString());
				}
		}
	4. 恺撒加密解密实例：创建 com.li.encryptdecrypt.kaiser.KaiserEncryptDecryptDemo 类
		public class KaiserDemo {

			public static void main(String[] args) {

				// 定义原文
				String str = "Hello World";
				// 把原文右移3位
				int key = 3;
				String encrypt = kaiserEncrypt(str, key);
				System.out.println(encrypt);
				String decrypt = kaiserEncrypt(encrypt, -key);
				System.out.println(decrypt);

			}

			private static String kaiserEncrypt(String str, int key) {
				StringBuilder sb = new StringBuilder();
				for (char c : str.toCharArray()) {
					sb.append((char) (c + key));
				}
				return sb.toString();
			}
		}
五、频度分析法破解恺撒加密
	1. 密码棒：公元前5世纪的时候，斯巴达人利用一根木棒，缠绕在皮革或者羊皮纸，在上面横向写下信息，解下这条皮带，展开来看，这串字母没有任何意义，信差可以将这条皮带当成
	腰带，系在腰上。然后收件人将这条皮带缠绕在相同的木棒上，就能恢复信息，前404年，一位遍体鳞伤的信差来到斯巴达将领利桑德面前，多亏密码棒利桑德才能够预先防范，击退敌军。
	2. 频率分析解密法：
		① 加密者选择将组成信息的字母替代成别的字母，比如将a写成1，这样就不能被解密者直接拿到信息了。这难不到解密者，以英文字母为例，为了确定每个英文字母的出现频率，分析
		一篇或者数篇普通的英文文章，英文字母出现频率最高的是e，接下来是t，然后是a……，然后检查要破解的密文，也将每个字母出现的频率整理出来，假设密文中出现频率最高的是字母
		j，那么就可能是e的替身，如果密码文中出现频率次高的是P, 那么可能是t的替身，以此类推便能解开加密信息。这就是频率分析法
		② 将明文字母的出现频率与密文字母的频率相比较的过程
		③ 通过分析每个符号出现的频率而轻而易举地破译代换式密码
		④. 在每种语言中，冗长地文章地字母表现出一种可对之进行分辨地频率
		⑤ e是英文中最常用地字母，其出现的频率为八分之一
六、 Byte 和 bit
	1. 介绍：
		A. Byte：字节，数据存储的基本单位，比如移动硬盘1T，单位是byte
		B. bit：比特，又叫位，一个位要么是0要么是1，数据传输的单位，比如家里的宽带100MB，下载速度并没有达到100MB，一般都是12-13MB，是因为需要使用100/8
		C. 关系：1Byte = 8bit
	2. 获取字符串 byte，以及byte对应的字节
		public class ByteBit {

			public static void main(String[] args) {
				String a = "a";
				for (byte aByte : a.getBytes()) {
					System.out.println((int) aByte); //97
					// byte字节对应的bit
					String binaryString = Integer.toBinaryString(aByte);
					System.out.println(binaryString); // 1100001
				}
			}
		}
	3. 中文对应字节和英文对应的字节
		① 根据编码的格式不同，中文对应的字节也不同
			a. 如果是 UTF-8：一个中文对应的是三个字节
			b. 如果是 GBK：一个中文对应的是两个字节
		② 如果是英文，则编码格式不影响字母与字节之间的转换
		③ 代码如下：
			public void testByteBitChinese() {

				String text = "璇";
				for (byte aByte : text.getBytes()) {
					System.out.println((int) aByte);
					System.out.println(Integer.toBinaryString(aByte));
				}
			}
		④ 输出如下
			-25
			11111111111111111111111111100111
			-110
			11111111111111111111111110010010
			-121
			11111111111111111111111110000111
七、常见的加密方式
							----------	 ---------------------										----------	 ---------------------
					|------ | 密钥 A | + | 明文：hello world |								|------ | 密钥 A | + | 明文：hello world |
					|		----------	 ---------------------								|		----------	 ---------------------
					|							  |											|							  |
					|					加密运算  ↓											|					加密运算  ↓
					|					 ---------------------								|					 ---------------------
					|					 |   密文：#$%^&*    |								|					 |   密文：#$%^&*    |
					|					 ---------------------								|					 ---------------------
					|							  |											|							  |
	加密解密使用----|							  |							加密解密使用----|							  |
	相同密钥		|							  ↓ 传输					不同密钥		|							  ↓ 传输
					|		----------	 ---------------------								|		----------	 ---------------------
					|		| 密钥 A | + |   密文：#$%^&*    |								|		| 密钥 B | + |   密文：#$%^&*    |			
					|		----------	 ---------------------								|		----------	 ---------------------
					|							  |											|							  |
					|					解密运算  ↓											|					解密运算  ↓
					|					 ---------------------								|					 ---------------------
					|------------------- | 明文：hello world |								|------------------- | 明文：hello world |
										 ---------------------													 ---------------------
									对称加密																非对称加密	
	1. 对称加密
		A. 采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密
		B. 实例：
			a. 现在有一个原文3要发送给B
			b. 设置密钥为108，3 * 108 = 324，将324作为密文发送给B
			c. B 拿到密文324后，使用324 / 108 = 3 得到原文
		C. 常见的加密算法
			a. DES（Data Encryption Standard）：即数据加密标准，是一种使用密钥加密的块算法，1977年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），并授权在非密
			级政府通信中使用，随后该算法在国际上广泛流传开来
			b. AES（Advanced Encryption Standard）：高级加密标准，在密码学中又称 Rijndael 加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替换原先的DES，已经被
			多方分析且为全世界使用
		D. 特点：
			a. 加密速度快，可以加密大文件
			b. 密文可逆，一旦密钥文件泄露，就会导致数据暴露
			c. 加密后编码表（ASCII）找不到对应字符，出现乱码
			d. 一般结合 Base64 使用
	2. DES 加密解密，
		① DES 加密示例代码
			 /**
			 * 使用 DES 进行加密
			 * @param text 原文
			 * @param secret 密钥（DES，密钥的长度必须是8个字节）
			 * @param transformation 获取Cipher对象采用的算法
			 * @param algorithm 获取密钥的算法
			 * @return 加密后的密文
			 * @throws Exception
			 */
			private static String encryptDes(String text, String secret, String transformation, String algorithm) throws Exception {
				// 创建加密对象
				Cipher cipher = Cipher.getInstance(transformation);
				// 创建加密规则，第一个参数：表示 secret 的字节，第二个参数：表示加密的类型
				SecretKeySpec secretKeySpec = new SecretKeySpec(secret.getBytes(), algorithm);
				// 进行加密初始化，第一个参数：加密模式，第二个参数：加密规则
				cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
				// 调用加密方法，参数：原文字节数组
				byte[] bytes = cipher.doFinal(text.getBytes());
				// 创建 base64，对得到的字节数组进行Base64编码
				String encode = Base64.encode(bytes);
				// 打印密文，如果直接打印密文会因为在编码表上找不到对应字符，因此出现乱码
				// System.out.println(new String(encryotText));
				return encode;
			}
		② DES 解密示例代码
			/**
			 * 使用 DES 进行解密
			 * @param text 密文
			 * @param secret 密钥（DES，密钥的长度必须是8个字节）
			 * @param transformation 获取Cipher对象采用的算法
			 * @param algorithm 获取密钥的算法
			 * @return 解密后的明文
			 * @throws Exception
			 */
			public static String decryptDes(String text, String secret, String transformation, String algorithm) throws Exception {
				// 创建加密对象
				Cipher cipher = Cipher.getInstance(transformation);
				// 创建加密规则，第一个参数：表示 secret 的字节，第二个参数：表示加密的类型
				SecretKeySpec secretKeySpec = new SecretKeySpec(secret.getBytes(), algorithm);
				// 进行加密初始化，第一个参数：解密模式，第二个参数：加密规则
				cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
				// 创建base64，对密文进行Base64解码，得到解密后的字节数组
				byte[] decode = Base64.decode(text);
				// 调用解密方法，参数：密文的字节数组
				byte[] bytes = cipher.doFinal(decode);

				return new String(bytes);
			}
		③ com.li.encryptdecrypt.desaes.DesDemo 类的 main 函数
			import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;

			import javax.crypto.Cipher;
			import javax.crypto.spec.SecretKeySpec;

			public class DesAes {

				public static void main(String[] args) throws Exception {

					// 原文
					String text = "李晓亮";
					// 密钥，密钥必须为8字节
					String secret = "12345678";
					// 采用的算法
					String transformation = "DES";
					// 加密类型
					String algorithm = "DES";

					// 使用 DES 进行加密
					String encryptText = encryptDes(text, secret, transformation, algorithm);
					System.out.println(encryptText);

					// 使用 DES 进行解密
					String decryptText = decryptDes(encryptText, secret, transformation, algorithm);
					System.out.println(decryptText);
				}
			}
	3. Base64 
		① Base64 算法简介
			A. Base64 是网络上最常见的用于传输 8Bit 字节码的可读性编码算法之一
			B. 可读性编码算法不是为了保护数据的安全性，而是为了可读性
			C. 可读性编码不改变信息内容，只改变信息内容的表现形式
			D. 所谓 Base64，即是说在编码中使用了 64 种字符：大写 A-Z、小写 a-z、数字 0-9、以及“+”和“/”
			E. Base58是 Bitcoin（比特币）中使用的一种编码方式，主要用于生产 Bitcoin 的钱包地址
			F. 相比 Base64，Base58不使用数字“0”，大写字母“O”，大写字母“I”，小写字母“i”，以及“+”和“/”
		② Base64 算法原理
			A. Base64 是3个字节为一组，一个字节8位，一个是24位，然后把3个字节转成4组，每组6位， 3*8 = 4*6 = 24，每组6位，缺少2位，会在高位进行补0，这样的好处在于，Base64
			取的是后面6位，去掉高位2位，那么Base64的取值就可控制在0-64位了，所以叫做Base64。
			B. Base64 编码表中，A：0，Z：25，a：26，z：51，0：52，9：61，+：62，/：63
			C. Base64 举例
				---------------------------------------------------------------------------------------------------------------------
				|																			-------------------------------------	|
				|																			| A | 0  | Q | 16 | g | 32 | w | 48 |	|
				|																			|-----------------------------------|	|
				|																			| B | 1  | R | 17 |	h | 33 | x | 49 |	|
				| 需要传输的数据  		34				00				a9			  		|-----------------------------------|	|
				| 二进制编码			001101 | 00		0000 | 0000		10 | 101001	  		| C	| 2	 | S | 18 |	i |	34 | y | 50	|	|
				|						   	   |			 |			   |		 		|-----------------------------------|	|
				| 三个byte为			   	   |			 |			   |		  		| D	| 3	 | T | 19 |	j |	35 | z | 51 |	|
				| 一组进行处理，		       |			 |			   |		  		|-----------------------------------|	|
				| 分成4个6bit数据		001101 | 000000		 | 000010	   | 101001   		| E	| 4	 | U | 20 |	k |	36 | 0 | 52 |	|
				|						   |   |	|		 |	 |		   |	|	  		|-----------------------------------|	|
				|						   |   |	|		 |	 |		   |	|	  		| F	| 5	 | V | 21 |	l |	37 | 1 | 53 |   |
				| 为每6bit的数据高	   	   |   |	|		 |	 |		   |	|	  		|-----------------------------------|	|
				| 位加两bit的0			   ↓   |	↓		 |	 ↓	       |	↓	  		| G	| 6	 | W | 22 |	m |	38 | 2 | 54	|	|
				|					  00001101 | 00000000	 | 00000010	   | 00101001 		|-----------------------------------|	|
				|						   |   |	|		 |	 |		   |	|	  		| H	| 7  | X | 23 |	n |	39 | 3 | 55 |	|
				|						   |   |	|		 |	 |		   |	|	  		|-----------------------------------|	|
				|	Base64的字符流		   ↓   |	↓		 |	 ↓		   |	↓     		| I	| 8	 | Y | 24 |	o |	40 | 4 | 56 |	|
				|	数据				   N   |	A		 |	 B		   |	P     		|-----------------------------------|	|
				|																			| J | 9  | Z | 25 | p | 41 | 5 | 57 |	|
				|																			|-----------------------------------|	|
				|																			| K | 10 | a | 26 | q | 42 | 6 | 58 |	|
				|																			|-----------------------------------|	|
				|																			| L | 11 | b | 27 | r | 43 | 7 | 59 |	|
				|																			|-----------------------------------|	|
				|																			| M | 12 | c | 28 | s | 44 | 8 | 60 |	|
				|																			|-----------------------------------|	|
				|																			| N | 13 | d | 29 | t | 45 | 9 | 61 |	|
				|																			|-----------------------------------|	|
				|																			| O | 14 | e | 30 | u | 46 | + | 62 |	|
				|																			|-----------------------------------|	|
				|																			| P | 15 | f | 31 | v | 47 | / | 63 |	|
				|																			-------------------------------------	|
				----------------------------------------------------------------------------------------------------------------------
		③ Base64 构成原则
			A. 小写26个字母：a-z
			B. 大写26个字母：A-Z
			C. 10个数字：0-9
			D. 2个符号：+或/
			E. Base64有个“=”号，但是在映射表里面没有发现“=”号，这个地方需要注意，“=”号非常特殊，因为Base64是三个字节一组，如果位数不够的时候，会只有
			等号来补齐。
	4. toString() 与 new String() 用法的区别
		① 注意：如果在使用编码，进行加密和解密的时候，需要使用 new String() 这种方式
		② toString()：这个方法调用的实际上是 Object 的 toString() 方法，一般 Object 的 toString() 方法返回的实际上是哈希值。
		③ new String()：需要传入一个字节数组参数，使用 java 虚拟机默认编码格式，把传入的字节数组进行 decode，找到对应的字符。如果虚拟机的编码格式是ISO-8859-1，
		则会根据 ASCII 编码表进行解码，找到对应的字符。
		④ 一般在编解码时需要使用 new String()，一般打印对象，或者想得到地址时需要时候 toString()
	5. AES 加密和解密
		① AES 加密解密和 DES 加密解密一样，只需要修改加密算法就行，主要注意的是，AES 算法比 DES 算法高级，因此 AES 需要使用16个字节的密钥，而 DES 则需要8个字节。
八、加密模式
	1. ECB
		① ECB：Electronic codebook，电子密码本，需要加密的消息按照密码块大小被分成数个块，并且对每个块进行单独加密
		② 优点：可以进行并行处理数据
		③ 缺点：同样的原文生成同样的密文，不能很好的保护数据
		④ 同时加密，原文一样，加密出来的密文也是一样的。
	2. CBC
		① CBC：Cipher-block chaining，密码块链接，每个明文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有明文块
		② 优点：同样的原文生成的密文不一样
		③ 缺点：串行化处理数据
九、填充模式
	1. 当需要按块处理的数据，数据长度不符合块处理需求时，按照一定的方法填充满块上的规则。
	2. NoPadding
		① 不填充
		② 在 DES 加密算法下，要求原文长度必须是 8byte 的整数倍
		③ 在 AES 加密算法下，要求原文长度必须是 16byte 的整数倍
	3. PKCS5Padding：数据块的大小为 8 位，不够就补足
	4. Tips
		① 默认情况下，加密模式和填充模式为：ECB/PKCS5Padding
		② 如果使用 CBC 模式，在初始化 Cipher 对象时，需要增加参数，初始化向量 IV：IvParameterSpec iv = new IvParameterSpec(secret.getBytes());，IV 的字节向量必须是 8bit 
	5. 加密模式和填充模式举例：
		① DES/ECB/PKCS5Padding：如果只写“DES”，没有指定加密模式和填充模式，则默认使用的是 DES/ECB/PKCS5Padding
			public class DESECBPKCS5PaddingDemo {
				public static void main(String[] args) throws Exception {
					// 原文
					String text = "李晓亮";
					// 密钥，密钥必须为8字节
					String secret = "12345678";
					// 采用的算法/加密模式/填充模式：DES：加密算法；ECB：加密模式；PKCS5Padding：填充模式。
					// String transformation = "DES";
					String transformation = "DES/ECB/PKCS5Padding";
					// 加密类型
					String algorithm = "DES";

					// 使用 DES 进行加密
					String encryptText = encryptDes(text, secret, transformation, algorithm);
					System.out.println(encryptText); // 7lFMXVfmDbQ2BxG+Uonupg== / 7lFMXVfmDbQ2BxG+Uonupg==

					// 使用 DES 进行解密
					String decryptText = decryptDes(encryptText, secret, transformation, algorithm);
					System.out.println(decryptText);
				}
			}
		② DES/CBC/PKCS5Padding：如果采用该模式，则会报参数错误，因为在使用 CBC加密模式时，需要使用一个向量。
			public class DESCBCPKCS5PaddingDemo {
				public static void main(String[] args) throws Exception {
					// 原文
					String text = "李晓亮";
					// 密钥，密钥必须为8字节
					String secret = "12345678";
					// 采用的算法
					// String transformation = "DES";
					// 采用的算法/加密模式/填充模式：DES：加密算法；ECB：加密模式；PKCS5Padding：填充模式。
					// String transformation = "DES/ECB/PKCS5Padding";
					String transformation = "DES/CBC/PKCS5Padding";
					// 加密类型
					String algorithm = "DES";
					
					// 使用 DES 进行加密
					String encryptText = encryptDes(text, secret, transformation, algorithm);
					System.out.println(encryptText); // 7lFMXVfmDbQ2BxG+Uonupg== / 7lFMXVfmDbQ2BxG+Uonupg==

					// 使用 DES 进行解密
					String decryptText = decryptDes(encryptText, secret, transformation, algorithm);
					System.out.println(decryptText);
				}
				
				/**
				 * 使用 DES 进行加密
				 * @param text 原文
				 * @param secret 密钥（DES，密钥的长度必须是8个字节）
				 * @param transformation 获取Cipher对象采用的算法/加密模式/填充模式
				 * @param algorithm 获取密钥的算法
				 * @return 加密后的密文
				 * @throws Exception
				 */
				private static String encryptDes(String text, String secret, String transformation, String algorithm) throws Exception {
					// 创建加密对象
					Cipher cipher = Cipher.getInstance(transformation);
					// 创建加密规则，第一个参数：表示 secret 的字节，第二个参数：表示加密的类型
					SecretKeySpec secretKeySpec = new SecretKeySpec(secret.getBytes(), algorithm);
					// 创建 iv 向量，当加密模式为 CBC 时，需要使用该向量
					IvParameterSpec iv = new IvParameterSpec(secret.getBytes());
					// 进行加密初始化，第一个参数：加密模式，第二个参数：加密规则，第三个参数：iv向量，长度必须为 8bite
					cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, iv);
					// 调用加密方法，参数：原文字节数组
					byte[] bytes = cipher.doFinal(text.getBytes());
					// 创建 base64，对得到的字节数组进行Base64编码
					String encode = Base64.encode(bytes);
					// 打印密文，如果直接打印密文会因为在编码表上找不到对应字符，因此出现乱码
					// System.out.println(new String(encryotText));
					return encode;
				}
				
				/**
				 * 使用 DES 进行解密
				 * @param text 密文
				 * @param secret 密钥（DES，密钥的长度必须是8个字节）
				 * @param transformation 获取Cipher对象采用的算法/加密模式/填充模式
				 * @param algorithm 获取密钥的算法
				 * @return 解密后的明文
				 * @throws Exception
				 */
				public static String decryptDes(String text, String secret, String transformation, String algorithm) throws Exception {
					// 创建加密对象
					Cipher cipher = Cipher.getInstance(transformation);
					// 创建加密规则，第一个参数：表示 secret 的字节，第二个参数：表示加密的类型
					SecretKeySpec secretKeySpec = new SecretKeySpec(secret.getBytes(), algorithm);
					// 创建 iv 向量，当加密模式为 CBC 时，需要使用该向量
					IvParameterSpec iv = new IvParameterSpec(secret.getBytes());
					// 进行加密初始化，第一个参数：加密模式，第二个参数：加密规则，第三个参数：iv向量,长度必须为 8bite
					cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, iv);
					// 创建base64，对密文进行Base64解码，得到解密后的字节数组
					byte[] decode = Base64.decode(text);
					// 调用解密方法，参数：密文的字节数组
					byte[] bytes = cipher.doFinal(decode);

					return new String(bytes);
				}
			}
		③ DES/CBC/NoPadding：不使用填充模式，如果加密算法是 DES， 原文必须是 8byte 的整数倍，如果是加密算法是 AES，原文必须是 16byte 的整数倍
十、消息摘要
	1. 简介
		① 消息摘要（Message Digest）又称为数字摘要（Digital Digest）
		② 它是一个唯一对应一个消息或者文本的固定长度的值，它由一个单向 Hash 加密函数对消息进行作用而产生
		③ 使用数字摘要生成的值是不可篡改的，为了保证文件或者值的安全，
	2. 特点：
		① 无论输入的消息有多长，计算出来的消息摘要的长度总是固定的。例如应用 MD5 算法摘要的消息有 128个 bit 位，用 SHA-1 算法摘要的消息最终有 160bit 的输出
		② 只要输入的消息不同，对其进行摘要以后产生的摘要消息也必不同；担相同的输入必会产生相同的输出
		③ 消息摘要是单向、不可逆的。
		④ 常见算法
			A. MD5
			B. SHA-1
			C. SHA-256
			D. SHA-512
		⑤ 在tomcat 官网下载 tomcat 时，会发现不同版本后面带着 sha1 或者 sha512，这些都是数字摘要，目的是保护软件的安全，即下载该软件后进行 sha1 或者 sha512 数字摘要后
		与官方提供的软件的 sha1 或者 sha512 数字摘要进行比对，如果比对的结果相同，则证明该软件是没被篡改过，反之，代表该软件被篡改过，不安全。
	3. 获取字符串消息摘要，
		① 使用 Base64 进行编码
			import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;

			import java.security.MessageDigest;

			public class DigestBase64Demo {

				public static void main(String[] args) throws Exception {
					// 明文
					String text = "李丽璇";
					// 采用的算法
					String algorithm = "MD5";
					// 创建消息摘要对象
					MessageDigest digest = MessageDigest.getInstance(algorithm);
					// 执行消息摘要算法
					byte[] bytes = digest.digest(text.getBytes());
					// 使用 Base64 进行转码
					String encode = Base64.encode(bytes);
					System.out.println(encode);
				}
			}
		② 使用在线md5加密，发现在线生成的值和代码生成的值不一样，那是因为消息摘要不是使用 Base64 进行编码的，需要手动将字节数组转成16进制
			import java.security.MessageDigest;

			public class Digest0xffDemo {

				public static void main(String[] args) throws Exception {
					// 明文
					String text = "李丽璇";
					// 采用的算法
					String algorithm = "MD5";
					// 创建消息摘要对象
					MessageDigest digest = MessageDigest.getInstance(algorithm);
					// 执行消息摘要算法
					byte[] bytes = digest.digest(text.getBytes());
					// 将字节数组转成16进制
					StringBuilder sb = new StringBuilder();
					for (byte aByte : bytes) {
						String s = Integer.toHexString(aByte & 0xff);
						if (s.length() == 1) {
							s = "0" + s;
						}
						sb.append(s);
					}
					System.out.println(sb.toString());
				}
			}
		③ 其他数字摘要算法
			import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;

			import java.security.MessageDigest;

			public class DigestDemo {

				public static void main(String[] args) throws Exception {
					// 明文
					String text = "李丽璇";
					// 采用的算法，常见的有 MD5、SHA-1、SHA-256、SHA-512
					String algorithm = "MD5";
					System.out.println(getDigest(text, algorithm));

					System.out.println(getDigest(text, "SHA-1"));
					System.out.println(getDigest(text, "SHA-256"));
					System.out.println(getDigest(text, "SHA-512"));
				}

				/**
				 * 获取数字摘要
				 * @param text 明文
				 * @param algorithm 算法
				 * @return
				 * @throws Exception
				 */
				private static String getDigest(String text, String algorithm) throws Exception {
					// 创建消息摘要对象
					MessageDigest digest = MessageDigest.getInstance(algorithm);
					// 执行消息摘要算法
					byte[] bytes = digest.digest(text.getBytes());
					return toHex(bytes);
				}

				/**
				 * 将字节数组转成16进制
				 * @param bytes 数字摘要后得到的字节数组
				 * @return
				 */
				private static String toHex(byte[] bytes) {
					StringBuilder sb = new StringBuilder();
					for (byte aByte : bytes) {
						String s = Integer.toHexString(aByte & 0xff);
						if (s.length() == 1) {
							s = "0" + s;
						}
						sb.append(s);
					}
					return sb.toString();
				}

				/**
				 * 将字节数组进行Base64编码
				 * @param bytes 数字摘要后得到的字节数组
				 * @return
				 */
				private static String toBase64(byte[] bytes) {
					return Base64.encode(bytes);
				}
			}
十一、非对称加密
	1. 简介：
		① 非对称加密算法又称为“现代加密算法”
		② 非对称加密是计算机通信安全的基石，保证了加密数据不会被破解
		③ 与对称加密算法不同的是，非对称加密算法需要两个密钥：公开密钥（publickey）和 私有密钥（private可以）
		④ 公开密钥和私有密钥是一对
		⑤ 如果用公开密钥对数据进行加密，只有对应的私有密钥才能解密
		⑥ 如果用私有密钥对数据进行加密，只有对应的公开密钥才能解密
		⑦ 因为加密和解密使用的是两个不同的密钥，所以这种算法叫做非对称加密算法
		⑧ 示例：
			A. 首先生成密钥对，公钥为（5,14），私钥为（11,14）
			B. 现在 A 希望将原文2发送给 B
			C. A 使用公钥加密数据，2的5次方 mod 14 = 4，将密文4发送给B
			D. B 使用私钥解密数据，4的11次方 mod 14 = 2，得到原文2
		⑨ 特点
			A. 加密和解密使用不同的密钥
			B. 如果使用私钥加密，只能使用公钥解密
			C. 如果使用公钥加密，只能使用私钥解密
		⑩ 常见的算法
			A. RSA 
			B. ECC
	2. 生成公钥和私钥
		import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;

		import java.security.*;

		public class RsaDemo {

			public static void main(String[] args) throws Exception {
				//  算法
				String algorithm = "RSA";
				// 返回一个 KeyPairGenerator 对象，该对象为指定的算法生成公钥/私钥对
				KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm);
				// 生成密钥对
				KeyPair keyPair = keyPairGenerator.generateKeyPair();
				// 生成公钥
				PublicKey publicKey = keyPair.getPublic();
				// 生成私钥
				PrivateKey privateKey = keyPair.getPrivate();
				// 获取公钥字节数组
				byte[] publicKeyEncoded = publicKey.getEncoded();
				// 获取私钥字节数组
				byte[] privateKeyEncoded = privateKey.getEncoded();
				// 使用Base64对公钥/私钥的Base64进行编码
				System.out.println(Base64.encode(publicKeyEncoded));
				System.out.println(Base64.encode(privateKeyEncoded));
			}
		}
	3. 使用私钥进行加密
		import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;

		import javax.crypto.Cipher;
		import java.security.*;

		public class RsaDemo {

			public static void main(String[] args) throws Exception {
				// 加密明文
				String text = "余彩欣";

				//  算法
				String algorithm = "RSA";
				// 返回一个 KeyPairGenerator 对象，该对象为指定的算法生成公钥/私钥对
				KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm);
				// 生成密钥对
				KeyPair keyPair = keyPairGenerator.generateKeyPair();
				// 生成公钥
				PublicKey publicKey = keyPair.getPublic();
				// 生成私钥
				PrivateKey privateKey = keyPair.getPrivate();
				// 获取公钥字节数组
				byte[] publicKeyEncoded = publicKey.getEncoded();
				// 获取私钥字节数组
				byte[] privateKeyEncoded = privateKey.getEncoded();
				// 使用Base64对公钥/私钥的Base64进行编码
				System.out.println(Base64.encode(publicKeyEncoded));
				System.out.println(Base64.encode(privateKeyEncoded));

				// 创建Cipher对象进行加密，使用 RSA 算法
				Cipher cipher = Cipher.getInstance(algorithm);
				// 对Cipher对象进行初始化，第一个参数：加密模式，第二个参数：使用公钥或者私钥加密
				cipher.init(Cipher.ENCRYPT_MODE, privateKey);
				// 使用私钥进行加密
				byte[] bytes = cipher.doFinal(text.getBytes());
				// 使用 Base64 进行编码
				System.out.println(Base64.encode(bytes));
			}
		}



























































































