一、JVM 与 Java 体系结构
	1. 虚拟机与 Java 虚拟机
		① 虚拟机
			A. 所谓的虚拟机（Virtual Machine），就是一台虚拟的计算机。它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机
			和程序虚拟机。
				a. 大名鼎鼎的 Visual Box，VMware 就是属于系统虚拟机，它们完全对物理计算机的仿真，提供了一个可运行完整操作系统的软件平台。
				b. 程序虚拟机的典型代表就是 Java 虚拟机，它专门为执行单个计算机程序而设计，在 Java 虚拟机中执行的指令我们称为 Java 字节码指令。
			B. 无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供资源中。
		② Java 虚拟机
			A. Java 虚拟机是一台执行 Java 字节码的虚拟计算机，它拥有独立的运行机制，其运行的 Java 字节码也未必由 Java 语言编译而成。
			B. JVM 平台的各种语言可以共享 Java  虚拟机带来的跨平台性、优秀的垃圾回收器，以及可靠的即时编译器。
			C. Java 技术的核心就是 Java 虚拟机（JVM，Java Virtual Machine），因为所有的 Java 程序都运行在 Java 虚拟机内部。
			D. 作用：Java 虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器执行执行。每一条 Java 指令，Java 虚
			拟机规范中都有详细定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里。
			E. 特点
				a. 一次编译，到处运行
				b. 自动内存管理
				v. 自动垃圾回收功能
		③ JVM 的位置，JVM 是运行在操作系统之上的，它与硬件没有直接的交互。
			+-------------------------------------------------------+
			|					  用户 User							|
			|	+-----------------------------------------------+	|
			|	|				  字节码文件					|	|
			|	|	+---------------------------------------+	|	|
			|	|	|				 JVM					|	|	|
			|	|	|	+-------------------------------+	|	|	|
			|	|	|	|  操作系统（如：Windows/Linux）|	|	|	|
			|	|	|	|	+----------------------+	|	|	|	|
			|	|	|	|	| 硬件（如：Intel 等） |	|	|	|	|
			|	|	|	|	+----------------------+	|	|	|	|
			|	|	|	+-------------------------------+	|	|	|
			|	|	+---------------------------------------+	|	|
			|	+-----------------------------------------------+	|
			+-------------------------------------------------------+
	2. JVM 的整体结构
		① HotSpot VM 是目前市面上高性能虚拟机的代表作之一
		② 它采用解释器与即使编译器并存的架构
		③ 在今天，Java 程序的运行性能早已脱胎换骨，已经达到了可以和 C/C++ 程序一较高下的地步。
			+-------------+		  +----------------------------+
			| Class files | ----> | 类装载器子系统 ClassLoader |
			+-------------+		  +----------------------------+
											 |	 ↑
											 ↓	 |
			+-------------------------------------------------------------------+
			|	+-------------+		+------------+	  +---------------------+	|
			|	|   方法区	  | 	|  Java 栈   |	  | 	本地方法栈		|	|
			|	| Method Area |		| Java Stack |	  | Native Method Stack |	|
			|	+-------------+		+------------+	  +---------------------+	|
			|	+-------------+		+---------------------------------------+	|
			|	| 	   堆	  |		| 			  程序计数器				|	|
			|	| 	  heap	  |		| 		 Program Counter Register		|	|
			|	+-------------+		+---------------------------------------+	|
			+-------------------------------------------------------------------+
				   |  ↑							|  ↑
				   ↓  |							↓  |
			+-----------------+			+------------------+
			| 	 执行引擎	  |	------> |   本地方法接口   | <---- 本地方法库
			| Execute Engine  |	<------ | Native Interface |
			+-----------------+			+------------------+
	3. Java 代码执行流程
							  +--------------------------------------------------------------------------+
							  |									Java 编译器								 |
							  |							  +----+					+----+		 +----+	 |
							  |	+----+		 +----+		  | 语 |	   +----+		| 注 |		 | 字 |	 |
		+-----------+		  |	| 词 |		 | 语 |		  | 法 |	   | 语 |		| 解 |		 | 节 |	 |			+-------------+
		| Java 源码 |  生成	  |	| 法 |		 | 法 |		  | 抽 |	   | 法 |		| 抽 |		 | 码 |	 |   生成	|   字节码 	  |
		| (xxx.java)| ------> | | 分 | ----> | 分 | ----> | 象 | ----> | 分 | ---->	| 象 | ----> | 生 |	 | -------> | (xxx.class) |
		+-----------+		  |	| 析 |		 | 析 |		  | 语 |	   | 析 |		| 语 |		 | 成 |	 |			+-------------+
							  | +----+		 +----+		  | 法 |	   +----+		| 法 |		 | 器 |	 |
							  |							  | 树 |					| 树 |		 |    |	 |
							  |							  +----+					+----+		 +----+	 |
							  +--------------------------------------------------------------------------+
		+-------------------------------------------------------------------------------------------------------------------------+
		|														  Java 虚拟机												 	  |
		|		+-----------------------+																						  |
		|		|	+--------------+	|																						  |
		|		|	| 编译字节码   |	|																						  |
		|		|	| （解析执行） |	|																						  |
		|		|	+--------------+	|						+--------------+						+----------+			  |
		|		|						| <-------------------- | 字节码校验器 | <--------------------- | 类加载器 |			  |
		|		|	+--------------+	|						+--------------+						+----------+			  |
		|		|	| JIT 编译器   |	|																						  |
		|		|	| （编译执行） |	|																						  |
		|		|	+--------------+	|																						  |
		|		+-----------------------+																						  |
		+-------------------------------------------------------------------------------------------------------------------------+
																	|
																	↓
		+-------------------------------------------------------------------------------------------------------------------------+
		|														操作系统														  |
		+-------------------------------------------------------------------------------------------------------------------------+
	4. VM 的架构模型
		① Java 编译器输入的指令流基本上是一种基于栈的指令集架构，另一种指令集架构则是基于寄存器的指令集架构
		② 这两种架构之间的区别
			A. 基于栈架构的特点
				a. 设计和实现更简单，适用于资源受限的系统
				b. 避开了寄存器的分配难题：使用零地址指令方式分配
				c. 指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现
				d. 不需要硬件支持，可移植性更好，更好实现跨平台
			B. 基于寄存器架构的特点
				a. 典型得到应用是 x86 的二进制指令集：比如传统的 PC 以及 Android 的 Davlik 虚拟机
				b. 指令集架构则完全依赖硬件，可移植性差
				c. 性能优秀和执行更高效
				d. 花费更少的指令去完成一项操作
				e. 在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令为主。
		③ 总结：
			A. 由于跨平台性的设计，Java 的指令都是根据栈来设计的。不同平台 CPU 架构不同，所以不能设计为基于寄存器的，优点是跨平台，指令集小，编译容易
			实现，缺点是性能下降，实现同样的功能需要更多指令。
			B. 时至今日，尽管嵌入式平台已经不是 Java 程序的主流运行平台了（准确来说应该是 HotSpotVM 的宿主环境已经不局限于嵌入式平台了），那么为什么不
			将架构更换为基于寄存器的架构呢？基于栈式的架构在设计和实现简单，在资源非受限的场景中（嵌入式平台属于资源受限），也是能够使用，所以没必要更
			换架构
	5 JVM 的生命周期
		① 虚拟机的启动：Java 虚拟机的启动是通过引导类加载器（bootstrap class loader）创建一个初始类（initial class）来完成的，这个类是由虚拟机的具体
		实现指定的
		② 虚拟机的执行
			A. 一个运行中的 Java 虚拟机有着一个清晰的任务：执行 Java 程序
			B. 程序开始执行时它才运行，程序结束时它就停止。
			C. 执行一个所谓的 Java 程序的时候，真真正正在执行的是一个叫做 Java 虚拟机的进程。
		③ 虚拟机的退出，有以下几种情况
			A. 程序正常执行结束
			B. 程序在执行过程中遇到了异常或者错误而异常终止
			C. 由于操作系统出现错误而导致 Java 	虚拟机进程终止
			D. 某线程调用 Runtime 类或 System 类的 exit 方法，或 Runtime 类的 halt 方法，并且 Java 安全管理器也允许这次 exit 或 halt 操作。
			E. 除此之外，JNI（Java Native Interface）规范描述了用 JNI Invocation API 来加载或者卸载 Java 虚拟机时，Java 虚拟机的退出情况。
	6. JVM 发展历程
		① Sun Classic VM 
			A. 早在 1996 年 Java 1.0 版本的时候，Sun 公司发布了一款名为 Sun Classic VM 的 Java 虚拟机，它同时也是世界上第一款商用 Java 虚拟机，JDK 1.4
			时完全被淘汰。
			B.这款虚拟机内部只提供解释器
			C. 如果使用 JIT 编译器，就需要进行外挂。但是一旦使用了 JIT 编译器，JIT就会接管虚拟机的执行系统，解释器就不再工作了。解释器和编译器不能配合
			工作。
			D. 现在 HotSpot 内置了此虚拟机。
		② Exact VM
			A. 为了解决上一个虚拟机问题，jdk 1.2 时，Sun 提供了此虚拟机。
			B. Exact Memory Management
				a. 准确式内存管理，也可以叫 Non-Conservative/Accurate Memory Management
				b. 虚拟机可以知道内存中某个位置得数据具体是什么类型
			C. 具备现代高性能虚拟机的雏形
				a. 热点探测
				b. 编译器与解释器混合工作模式
			D. 只在 Solaris 平台短暂使用，其他平台上还是 Classic VM
				a. 英雄气短，终被 HotSpot 虚拟机取代
		③ SUN 公司的 HotSpot VM
			A. HotSpot 历史
				a. 最初由一家名为“Longview Technologies”的小公司设计
				b. 1997 年，此公司被 SUN 收购；2009 年，SUN 公司被甲骨文收购
				c. JDK 1.3 时，HotSpot VM 成为默认虚拟机
			B. 目前 HotSpot VM 占有绝对的市场地位
				a. 不管是现在仍在广泛使用的 JDK 6，还是使用比例较多的 JDK 8中，默认的虚拟机都是 HotSpot
				b. Sun/Oracle JDK 和 OpenJDK 的默认虚拟机
				c. 接下来学习的虚拟机都是 HotSpot，相关机制也是指 HotSpot 的 GC 机制。（比如其他两个商用虚拟机都没有方法区的概念）
			C. 从服务器、桌面到移动端、嵌入式都有应用
			D. 名称中的 HotSpot 指的就是它的热点代码探测技术
				a. 通过计数器找到最具编译价值代码，触发即使编译或栈上替换
				b. 通过编译器与解释器协调工作，在最优化的程序响应时间与最佳执行性能中取得平衡
		④ BEA 的 JRockit
			A. 专注于服务器端应用：它可以不太关注于程序启动速度，因此 JRockit 内部不包含解析器实现，全部代码都靠即时编译器编译后执行。
			B. 大量的行业基准测试显示，JRockit JVM 是世界上最快的 JVM：使用 JRockit 产品，客户已经体验到了显著的性能提高（一般超过了70%）和硬件成本的减少
			（50%）
			C. 优势：全面的 Java 运行时解决方案组合
				a. JRockit 面向延迟敏感型应用的解决方案 JRockit Real Time 提供毫秒或微妙的 JVM 响应时间，适合财务、军事指挥、电信网络的需要
				b. MissionControl服务套件，它是一组以极低的开销来监控、管理和分析生产环境中的应用程序的工具。
			D. 2008 年，BEA 被 Oracle 收购
			E. Oracle 表达了整合两大优秀虚拟机的工作，大致在 JDK 8 中完成。整合的方式是在 HotSpot 的基础上，移植 JRockit 的优秀特性。
		⑤ IBM 的 J9
			A. 全称：IBM Technology for Java Virtual Machine，简称：IT4j，内部代号：J9
			B. 市场定位于 HotSpot 接近，服务器端、桌面应用、嵌入式等多用途 VM
			C. 广泛运用于 IBM 的各种 Java 产品
			D. 目前，有影响力的三大商用虚拟机之一，也号称是世界上最快的 Java 虚拟机。
			E. 2017 年左右，IBM 发布了开源 J9 VM，命名为 OpenJ9，交给 Eclipse 基金会管理，也称为 Eclipse OpenJ9
		⑥ KVM 和 CDC/CLDC HotSpot
			A. Oracle 在 Java ME 产品线上的两款虚拟机为：CDC/CLDC HotSpot Implementation VM
			B. KVM（Kilobyte）是 CLDC-HI 早期产品
			C. 目前移动领域地位尴尬，智能手机被 Android 和 IOS 二分天下
			D. KVM 简单、轻量、高度可移植性，面向更低端的设备上还维持自己的一片市场
				a. 智能控制器、传感器
				b. 老人手机、经济欠发达地区的功能手机
			E. 所有虚拟机的原则：一次编译，到处运行。
		⑦ Azul VM
			A. 前面三大“高性能 Java 虚拟机”使用在通用硬件平台上
			B. 这里Azul VM和 BEA Liquid VM 是与特定硬件平台绑定、软硬件配合的专有虚拟机（高性能 Java 虚拟机中的战斗机）
			C. Azul VM 是 Azul Systems 公司在 HotSpot 基础上进行大量改进，运行于 Azul Systems 公司的专有 硬件 Vega 系统上的 Java 虚拟机。
			D. 每个 Azul VM 实例都可以管理至少数十个 CPU 和数百 GB 内存的硬件资源，并提供在巨大内存范围内实现可控的 GC 时间的垃圾收集器、专有硬件优化的线程
			调度等优秀特性。
			E. 2010 年，Azul Systems 公司开始从硬件转向软件，发布自己的 Zing JVM，可以在通用 x86 平台上提供接近于 Vega 系统的特性。
		⑧ Liquid VM
			A. 高性能 Java 虚拟机中的战斗机
			B. BEA 公司开发的，直接运行在自家 Hypervisor 系统上
			C. Liquid VM 即是现在的 JRockit VE（Virtual Edition），Liquid VM 不需要操作系统的支持，或者说它自己本身实现了一个专用操作系统的必要功能，如线程
			调度、文件系统、网络支持等
			D. 随着 JRockit 虚拟机终止开发，Liquid VM 项目也停止了
		⑨ Apache Harmony
			A. Apache 也曾经推出过与 JDK 1.5 和 JDK 1.6 兼容的 Java 运行平台 Apache Harmony
			B. 它是 IBM 和 Intel 联合开发的开源 JVM，受到同样开源的 OpenJDK 的压制，Sun 坚决不让 Harmony 获得 JCP认证，最终于 2011 年退役，IBM 转而参与
			OpenJDK
			C. 虽然目前并没有 Apache Harmony 被大规模商用的案例，但是它的 Java 类库代码吸纳进了 Android SDK
		⑩ Microsoft JVM
			A. 微软为了在 IE3 浏览器中支持 Java Applets，开发了 Microsoft JVM。
			B. 只能在 Windows 平台下运行。但确实是当时 Windows 下性能最好的 Java VM
			C. 1997 年，Sun 以侵犯商标、不正当竞争罪名指控微软成功，赔了 Sun 很多钱。微软在 WindowsXP SP3 中抹掉了其 VM。现在 Windows 上安装的 jdk 都是 HotSpot
		①① TaobaoJVM
			A. 由 AliJVM 团队发布。阿里，国内使用 Java 最强大的公司，覆盖云计算、金融、物流、电商等众多领域，需要解决高并发、高可用、分布式的复合问题。有大量
			的开源产品。
			B. 基于 OpenJDK 开发了自己的定制版本 AlibabaJDK，简称 AJDK。是整个阿里 Java 体系的基石。
			C. 基于 OpenJDK HotSpot VM 发布国内第一个优化、深度定制且开源的高性能服务器版 Java 虚拟机
				a. 创新的 GCIH（GC Invisible heap）技术实现了 off-heap，即将生命周期较长的 Java 对象从 heap 中移到 heap 之外，并且 GC 不能管理 GCIH 内部的 Java
				对象，以此达到降低 GC 的回收频率和提升 GC 的回收效率的目的
				b. GCIH 中的对象能够在多个 Java 虚拟机进程中实现共享
				c. 使用 crc32 指令实现 JVM intrinsic 降低 JNI 的调用开销
				d. PMU heapware 的 Java profiling tool 和诊断协助功能
				e. 针对大数据场景的 ZenGC
			D. taobao vm 应用在阿里产品上性能高，硬件严重依赖 Intel 的 CPU，损失了兼容性，但是提高了性能，目前已经在淘宝、天猫上线，把 Oracle 官方 JVM 版本全部
			替换了。
		①② Davlik VM
			A. 谷歌开发，应用于 Android 系统，并在 Android 2.2 中提供了 JIT，发展迅猛
			B. Davlik VM 只能称作虚拟机，而不能称作 “Java 虚拟机”，它没有遵循 Java 虚拟机规范
			C. 不能直接执行 Java 的 class 文件
			D. 基于寄存器架构，不是 JVM 的栈架构
			E. 执行的是编译以后的 dex（Davlik Executable）文件，执行效率比较高。它执行的 dex（Davlik Executable）文件可以通过 Class 文件转化而来，使用 Java 语法
			编写应用程序，可以直接使用大部分的 Java API 等。
			F. Android 5.0 使用支持提前编译（Ahead of Time Compilation，AOT）的 ART VM 替换 Davlik VM。
		①③ Graal VM
			A. 2018 年 4 月，Oracle Labs 公开了 Graal VM，号称“Run Programs Faster Anywhere”，与 1995 年 Java 的“Write once，run anywhere”遥相呼应
			B. Graal VM 在 HotSpot VM 基础上增强而成的跨语言全栈虚拟机，可以作为“任何语言”的运行平台使用。语言包括：Java、Scala、Groovy、Kotlin；C、C++、JavaScript、
			Ruby、Python、R 等。
			C. 支持不同语言中混用对方的接口和对象，支持这些语言使用已经编译好的本地库文件
			D. 工作原理是将这些语言的源代码或源代码编译后的中间格式，通过解释器转换为能被 Graal VM 接受的中间表示。Graal VM 提供 Truffle 工具集快速构建面向一种新语
			言的解释器。在运行时还能进行即时编译优化，获得比原生编译器更优秀的执行效率。
			E. 如果说 HotSpot 有一天真的被取代了，Graal VM 希望最大。但是 Java 的软件生态没有丝毫变化。
二、类加载子系统
	1. 内存结构概述
											  +-------------------------------------------------------------------------------------+
											  |								   类加载子系统											|
											  |								Class Loader SubSystem									|
											  | +-------------------------------+		+-------------+								|
											  |	|			加载阶段			|		|	链接阶段  |								|
											  |	|			Loading				|		|	Linking	  |								|
											  | |	+-------------------------+	|		| +---------+ |								|
											  |	|	|	   引导类加载器	  	  |	|		| |  验证   | |								|
											  |	|	|   BootStrap ClassLoad   |	|		| | Verify  | |				初始化			|
						+-------------+		  |	|	+-------------------------+	|		| +---------+ |			Initialization		|
						| Class Files | ----> |	|	+-------------------------+	|		| +---------+ |		  +----------------+	|
						+-------------+		  | |	| 	   扩展类加载器	      |	| ----> | |  准备   | | ----> | 	初始化	   |	|
											  |	|	|  Extension ClassLoader  |	|		| | Prepare | |		  | Initialization |	|
											  |	|	+-------------------------+	|		| +---------+ |		  +----------------+	|
											  |	|	+-------------------------+	|		| +---------+ |								|
											  | |	|	   系统类加载器 	  |	|		| |  解析   | |								|
											  |	|	| Application ClassLoader |	|		| | Resolve | |								|
											  |	|	+-------------------------+	|		| +---------+ |								|
											  |	+-------------------------------+		+-------------+								|
											  +-------------------------------------------------------------------------------------+
																				|	↑
																				↓	|
		+-----------------------------------------------------------------------------------------------------------------------------------------------+
		|													 虚拟机栈								 PC 寄存器
		|													Stack Area								PC Registers										|
		|	+-----------+	+-----------+	+-------------+-------------+-------------+		+--------------------------+	+---------------------+		|
		|	|			|	|			|	|    线程 1	  |    线程 2	|    线程 3	  |		|   线程 1 的 PC 寄存器	   |	|					  |		|
		|	|     		|	|     	    |	|   Thread 1  |   Thread 2  |   Thread 3  |		| PC Register for Thread 1 |	|					  |		|
		|	|   	    |	|    	    |	+-------------+-------------+-------------+		+--------------------------+	|					  |		|
		|	|    	    |	|    	    |	|			  |			    |			  |		|   线程 2 的 PC 寄存器	   |	|					  |		|
		|	|	 	    |	|		    |	+-------------+-------------+-------------+		| PC Register for Thread 2 |	|					  |		|
		|	|		    |	|			|	|			  |			    |			  |		+--------------------------+	|					  |		|
		|	|	方法区	|	|	 堆		|	+-------------+-------------+-------------+		|   					   |	| 	  本地方法栈	  |		|
		|	|	Method	|	|	Heap	|	|	  栈帧	  |	    栈帧	|	  栈帧	  |		| 			……			   |	| Native Method Stack |		|
		|	|	 AREA	|	|	Area	|	| Stack Frame | Stack Frame | Stack Frame |		+--------------------------+	|					  |		|
		|	|			|	|			|	+-------------+-------------+-------------+		|   					   |	|					  |		|
		|	|			|	|			|	|	  栈帧	  |	    栈帧	|	  栈帧	  |		| 			……			   |	|					  |		|
		|	|			|	|			|	| Stack Frame | Stack Frame | Stack Frame |		+--------------------------+	|					  |		|
		|	|			|	|			|	+-------------+-------------+-------------+		|   线程 n 的 PC 寄存器	   |	|					  |		|
		|	|			|	|			|	| LV OS DL RA | LV OS DL RA | LV OS DL RA |		| PC Register for Thread n |	|					  |		|
		|	+-----------+	+-----------+	+-------------+-------------+-------------+		+--------------------------+	+---------------------+		|
		|																	  运行时数据区
		|																	Runtime Data Areas															|
		+-----------------------------------------------------------------------------------------------------------------------------------------------+
							  执行引擎		|	↑																|	↑
						  Execution Engine	↓	|																↓	|
		+-----------------------------------------------------------------------------------+			  +---------------+				+---------------+
		|				|			 即时编译器								|				|			  |				  |				|				|
		|				|			JIT Compiler							|				|			  |				  |				|				|
		|				|	+---------------------------+					|				|			  |				  |				|				|
		|				|	|	+-------------------+	|					|				|			  |				  |				|				|
		| 	  			|	|	|  中间代码生产器	|	|					|				|			  |				  |				|				|
		|				|	|	| Intermediate Code |	|					|				|			  |				  |				|				|
		|				|	|	|	  Generator 	|	|					|				|			  |				  |				|				|
		|				|	|	+-------------------+	|					|				|			  |				  |				|				|
		|				|	|			 ↓				|					|				|			  |				  |				|				|
		|				|	|	+-------------------+	|	+----------+	|	垃圾回收器	|			  |  本地方法接口 |			    |  本地方法库	|
		|	  解释器	|	|	| 	  代码优化器 	|	|	|  分析器  |	|	 Garbage	| ----------> | Native Method | ----------> | Native Method |
		|	Interpreter	|	|	|   Code Optimizer  |	|	| Profiler |	|	Collection	| <---------- |   Interface   | <---------- | 	 Library	|
		|				|	|	+-------------------+	|	+----------+	|				|			  |	   （JNI）	  |				|				|
		|				|	|			 ↓				|					|				|			  |				  |				|				|
		|				|	|	+-------------------+	|					|				|			  |				  |				|				|
		|				|	|	|  目标代码生成器 	|	|					|				|			  |				  |				|				|
		|				|	|	| 	 Target Code 	|	|					|				|			  |				  |				|				|
		|				|	|	|	  Generator  	|	|					|				|			  |				  |				|				|
		|				|	|	+-------------------+	|					|				|			  |				  |				|				|
		|				|	+---------------------------+					|				|			  |				  |				|				|
		+-----------------------------------------------------------------------------------+			  +---------------+				+---------------+
	2. 类加载器与类的加载过程
		① 类加载器子系统的作用
			A. 类加载器子系统负责从文件系统或者网络中加载 Class 文件，Class 文件在文件开头有特定的文件标识
			B. ClassLoad 只负责 Class 文件的加载，至于它是否可以运行，则由 Execution Engine（执行引擎） 决定。
			C. 加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包含字符串字面量和数字常量，（这部分常量信息是
			Class 文件中常量池部分的内存映射）。
		② 类加载器 ClassLoader 角色
			A. class file 存放于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到 JVM 当中来根据这个文件实例化出 n 个一模一样的实例。
			B. Class file 加载到 JVM 中，被称为 DNA 元数据模板，放在方法区。
			C. 在 .class 文件 -> JVM -> 最终成为元数据模板，此过程就要一个运输工具（类加载器 ClassLoader），扮演一个快递员的角色。
		③ 类的加载过程
							  +-------------------------------------------------------------+
							  |							链接（Linking）						|
			+---------+		  |	+--------------+	   +-------------+		 +------------+	|
			|  加载	  | ----> |	| 	  验证	   | ----> | 	准备	 | ----> | 	  解析	  |	|
			| Loading |		  |	| Verification |	   | preparation |		 | Resolution |	|
			+---------+		  |	+--------------+	   +-------------+		 +------------+	|
							  +-----------------------------------------------------|-------+
																					↓
																			+---------------+
																			|	  初始化	|
																			| initialization|
																			+---------------+
			A. 加载
				a. 通过一个类的全限定名获取定义此类的二进制字节流
				b. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构
				c. 在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口
				d. 补充：加载 .class 文件的方式
					(1) 从本地系统中直接加载
					(2) 通过网络获取，典型场景：Web Applet
					(3) 从 zip 压缩包中读取，成为日后 jar、war 格式的基础
					(4) 运行时计算生成，使用最多的是：动态代理技术
					(5) 由其他文件生成，典型场景：JSP 应用
					(6) 从专有数据库提取 .class，比较少见
					(7) 从加密文件中获取，典型的防 Class 文件被反编译的保护措施
			B. 链接：
				a. 验证（verify）
					(1) 目的在于确保 Class 文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全
					(2) 主要包含四种验证：文件格式验证、元数据验证、字节码验证、符号引用验证
				b. 准备（prepare）
					(1) 为类变量分配内存并且设置该类变量的默认初始值，即零值
					(2) 这里不包含 final 修饰的 static，因为 final 在编译的时候就会分配了，准备阶段会显示初始化
					(3) 这里不会实例化变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到 Java 堆中
				c. 解析（Resolve）
					(1) 将常量池内的符号引用转换为直接引用的过程
					(2) 事实上，解析操作往往会伴随着 JVM 在执行完初始化之后再执行
					(3) 符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《Java 虚拟机规范》的 Class 文件格式中。直接引用就是直接指向目标的指针、
					相对偏移量或一个间接定位到目标的句柄
					(4) 解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对常量池中的 CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Mothodref_info等。
			C. 初始化
				a. 初始化阶段就是执行类构造器方法 <clinit>() 的过程
				b. 此方法不需要定义，是 javac 编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来
				c. 构造器方法中指令按语句在源文件中出现的顺序执行
				d. <clinit>() 不同于类的构造器（关联：构造器是虚拟机视角下的 <init>()）
				e. 若该类具有父类，JVM 会保证子类的 <clinit>() 执行前，父类的 <clinit>() 已经执行完毕
				f. 虚拟必须保证一个类的 <clinit>() 方法在多线程下被同步加锁
	3. 类加载器的分类
		① JVM 支持两种类型的类加载器，分别为引导类加载器（Bootstrap ClassLoader）和自定义类加载器（User-Defined ClassLoader）
		② 从概念上讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是 Java 虚拟机规范却没有这么定义，而是将所有派生于抽象类 ClassLoader 的类加载器
		都划分为自定义类加载器
		③ 无论类加载器得到类型如何划分，在程序中我们最常见的类加载器始终只有 3 个：
											+-----------------------+
											| 	  引导类加载器		|
											| Bootstrap ClassLoader |
											+-----------------------+
														↑
											+-----------------------+			
											| 	  扩展类加载器		|
											| Extension ClassLoader |
											+-----------------------+
														↑
											+-----------------------+			
											| 	  系统类加载器		|
											|  System ClassLoader   |
											| 	 AppClassLoader		|
											+-----------------------+
														↑
									+-------------------+-------------------+
									|										|
					+-	+--------------------------+			+--------------------------+
					|	|	 自定义类加载器		   |			|	 自定义类加载器		   |
					|	| User-Defined ClassLoader |			| User-Defined ClassLoader |
					|	+--------------------------+			+--------------------------+
		   Optional +				↑										↑
					|	+--------------------------+			+--------------------------+
					|	|	 自定义类加载器		   |			|	 自定义类加载器		   |
					|	| User-Defined ClassLoader |			| User-Defined ClassLoader |
					+-  +--------------------------+			+--------------------------+
			这里的四者之间的关系是包含关系，不是上层下层，也不是子父类的继承关系
		④ 虚拟机自带的加载器
			A. 启动类加载器（引导类加载器，Bootstrap ClassLoader）
				a. 这个类加载使用  C/C++ 语言实现的，嵌套在 JVM 内部
				b. 它用来加载 Java 的核心库（JAVA_HOME/jre/lib/rt.jar、resource.jar 或 sun.boot.class.path 路径下的内容），用于提供 JVM 自身需要的类
				c. 并不继承自 java.lang.ClassLoader，没有父加载器
				d. 加载扩展类和应用程序类加载，并指定为它们的父类加载
				e. 处于安全考虑，Bootstrap 启动类加载器只加载包名为 java、javax、sun 等开头的类
			B. 扩展类加载器（Extension ClassLoader）
				a. Java 语言编写，由 sun.misc.Launcher$ExtClassLoader 实现
				b. 派生于 ClassLoader 类
				c. 父类加载器为启动类加载器
				d. 从 java.ext.dirs 系统属性所指定的目录中加载类库，或从 JAVA_HOME/jre/lib/ext 子目录（扩展目录）下加载类库。如果用户创建的 JAR 放在此目录下，也会由
				扩展类加载器加载
			C. 应用程序类加载器（系统类加载器，AppClassLoader）
				a. Java 语言编写，由 sun.misc.Launcher$AppClassLoader 实现
				b. 派生于 ClassLoader 类
				c. 父类加载器为扩展类加载器
				d. 它负责加载环境变量 classpath 或者系统属性，java.path.path 指定路径下的类库
				e. 该类加载是程序中默认的类加载器，一般来说，Java 应用的类都是由它来完成加载的
				f. 通过 ClassLoader#getSystemClassLoader() 方法可以获取该类加载器
			D. 用户自定义类加载器
				a. 在 Java 的日常应用程序开发中，类的加载几乎是由上述 3 中类加载器相互执行的，在必要的时候，我们还可以自定义类加载器，来定制类的加载方式
				b. 为什么需要自定义类加载器
					(1) 隔离加载类
					(2) 修改类加载的方式
					(3) 扩展加载源
					(4) 防止源码泄露
				c. 用户自定义类加载器实现步骤
					(1) 开发人员可以通过继承抽象类 java.lang.ClassLoader 类的方式，实现自己的类加载器，以满足一些特殊的需求。
					(2) 在 JDK 1.2 之前，在自定义类加载器时，总会去继承 ClassLoader 类并重写 loadClass() 方法，从而实现自定义的类加载类，但是在 JDK 1.2 之后已不再建议
					用户去覆盖 loadClass() 方法，而是建议把自定义的类加载逻辑写在 findClass() 方法中
					(3) 在编写自定义类加载时，如果没有太过于复杂的需求，可以直接继承 URLClassLoader 类，这样就可以避免自己去编写 findClass() 方法及其获取字节码流的方
					式，使自定义类加载器编写更加简洁
	4. ClassLoader 的使用说明
		① 关于 ClassLoader
			A. ClassLoader 类，它是一个抽象类，其后所有的类加载器都继承自 ClassLoader（不包括启动类加载器）
				+------------------------------------------------------+------------------------------------------------------------------------------+
				| 方法名称											   | 描述																		  |
				+------------------------------------------------------+------------------------------------------------------------------------------+
				| getParent()										   | 返回该类加载器的超类加载器													  |
				+------------------------------------------------------+------------------------------------------------------------------------------+
				| loadClass(String name)							   | 加载名称为 name 的类，返回结果为 java.lang.Class 类的实例					  |
				+------------------------------------------------------+------------------------------------------------------------------------------+
				| findClass(String name)							   | 查找名称为 name 的类，返回结果为 java.lang.Class 类的实例					  |
				+------------------------------------------------------+------------------------------------------------------------------------------+
				| findLoadedClass(String name)						   | 查找名称为 name 的已经被加载过的类，返回结果为 java.lang.class 类的实例	  |
				+------------------------------------------------------+------------------------------------------------------------------------------+
				| defineClass(String name, byte[] b, int off, int len) | 把字节数组 b 中的内存转换为一个 Java 类，返回结果为 java.lang.class 类的实例 |
				+------------------------------------------------------+------------------------------------------------------------------------------+
				| resolveClass(Class<?> c)							   | 连接指定的一个 Java 类														  |
				+------------------------------------------------------+------------------------------------------------------------------------------+
								+---------------------------------------+
								| 			abstract ClassLoader 		|
								+---------------------------------------+
								| loadClass(String)						|
								| resolveClass(Class<?>)				|
								| findClass(String)						|
								| defineClass(String, byte[], int, int) |
								+---------------------------------------+
													↑
								+---------------------------------------+
								| 			secureClassLoader			|
								+---------------------------------------+
													↑
								+---------------------------------------+
								| 			  URLClassLoader			|
								+---------------------------------------+
								| findClass(String)						|
								+---------------------------------------+
													↑
								+-------------------+-------------------+
								|										|
				+-------------------------------+		+-------------------------------+
				| 		secureClassLoader		|		| 		  AppClassLoader		|
				+-------------------------------+		+-------------------------------+
														| loadClass(String, boolean)	|
														+-------------------------------+
			B. sun.misc.Launcher 它是一个 java 虚拟机的入口应用。
		② 获取 ClassLoader 的途径
			+------------------------------------------------+
			| 方式一：获取当前类的 ClassLoader				 |
			+------------------------------------------------+
			| clazz.getClassLoader()						 |
			+------------------------------------------------+
			| 方式二：获取当前线程上下文的 ClassLoader		 |
			+------------------------------------------------+
			| Thread.currentThread().getContextClassLoader() |
			+------------------------------------------------+
			| 方式三：获取当前系统的 ClassLoader			 |
			+------------------------------------------------+
			| ClassLoader.getSystemClassLoader()			 |
			+------------------------------------------------+
			| 方式四：获取调用者的 ClassLoader				 |
			+------------------------------------------------+
			| DriverManager.getCallerClassLoader()			 |
			+------------------------------------------------+
	5. 双亲委派机制
		① Java 虚拟机对 Class 文件采用的是按需加载方式，也就是说需要使用该类时才会将它的 Class 文件加载到内存生成 Class 对象。而且加载某个类的 class 文件时，Java 虚拟机
		采用的是双亲委派模式，即请求交由父类处理，它是一种任务委派模式。
		② 工作原理
			A. 如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行
			B. 如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器
			C. 如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式
											+-----------------------+		|
											| 	  引导类加载器		|		|
											| Bootstrap ClassLoader |		|
											+-----------------------+		|
														↑					|
											  向上委托	|					|
											+-----------------------+		|	父类加载失败	  
											| 	  扩展类加载器		|		|	交由子加载器
											| Extension ClassLoader |		|	  自己处理
											+-----------------------+		|
														↑					|
											  向上委托	|					|
											+-----------------------+		|			
											| 	  系统类加载器		|		|
											|  System ClassLoader   |		|
											| 	 AppClassLoader		|		|
											+-----------------------+		↓
														↑
									+-------------------+-------------------+
									|										|
						+--------------------------+			+--------------------------+
						|	 自定义类加载器		   |			|	 自定义类加载器		   |
						| User-Defined ClassLoader |			| User-Defined ClassLoader |
						+--------------------------+			+--------------------------+
		③ 优势
			A. 避免类的重复加载
			B. 保护线程安全，防止核心 API 被随意篡改
				a. 自定义类：java.lang.String
				b. 自定义类：java.lang.ShkStart
		④ 沙箱安全机制：自定义 String 类，但是在加载自定义 String 类时会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载 jdk 自带的文件（rt.jar 包中的 java.
		lang.String.class），报错信息说明没有 main 方法，就是因为加载的是 rt.jar 包中的 String 类。这样可以保证对 Java 核心源代码的保护，这就是沙箱安全机制
	6. 其他
		① 在 JVM 中表示两个 Class 对象是否为同一个类存在两个必要条件
			A. 类的完整类名必须一致，包括包名
			B. 加载这个类的 ClassLoader（指 ClassLoader 实例对象）必须相同
			C. 换句话说：在 JVM 中，即时这两个类对象（Class 对象）来源同一个 Class 文件，被同一个虚拟机所加载，但只要加载它们的 ClassLoader 实例对象不同，那么这两个类对象
			也是不相等的。
		② 对类加载器的引用：JVM 必须知道一个类型是由启动类加载器加载的还是由用户类加载器加载的，如果一个类型是由用户类加载器加载的，那么 JVM 会将这个类加载器的一个引用作为
		类型信息的一部分保存在方法区中。当解析一个类型到另一个类型的引用的时候，JVM 需要保证这两个类型的类加载器是相同的
		③ 类的主动使用和被动使用：Java 程序对类的使用分为主动使用和被动使用
			A. 主动使用，由分为七种情况：
				a. 创建类的实例
				b. 访问某个类或者接口的静态变量，或者对该静态变量的赋值
				c. 调用类的静态方法
				d. 反射（比如：Class.forName("com.li.Test")）
				e. 初始化一个类的子类
				f. Java 虚拟机启动时被标明为启动类的类
				g. JDK 7 开始提供的动态语言支持：java.lang.invoke.MethodHandle 实例的解析结果 REF_getStatic、REF_putStatic、REF_invokeStatic 句柄对应的类没有初始化，则初始化
			B. 除了以上七种情况，其他使用 Java 类的方式都被看作是对类的被动使用，都不会导致类的初始化。
三、运行时数据区概述及线程
	1. 概述
		① 内存是非常重要的系统资源，是硬盘和 CPU 的中间仓库和桥梁，承载着操作系统和应用程序得到实时运行。JVM 内存布局规定了 Java 在运行过程中内存申请、分配、管理的策略，保证
		了 JVM 的高效稳定运行。不同的 JVM 对于内存的划分方式和管理机制存在着部分差异。
		② Java 虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应，这些与线程对应的数据
		区域会随着线程开始和结束而创建和销毁。
		③ 灰色的为单独线程私有的，红色的为多个线程共享的。即：
			A. 每个线程：独立包括程序计数器、栈、本地栈
			B. 线程间共享：堆、堆外内存（永久代或元空间、代码缓存）
									+------+
									| Heap | 红
									+------+
										↑
					+-------------------+-------------------+
					|					|					|
			+---------------+	+---------------+	+---------------+
			|	 线程A 灰	|	|	 线程B 灰	|	|	 线程C 灰	|
			|	+------+	|	|	+------+	|	|	+------+	|
			|	|  PC  |	|	|	|  PC  |	|	|	|  PC  |	|
			|	+------+	|	|	+------+	|	|	+------+	|
			|	+------+	|	|	+------+	|	|	+------+	|
			|	| VMS  |	|	|	| VMS  |	|	|	| VMS  |	|
			|	+------+	|	|	+------+	|	|	+------+	|
			|	+------+	|	|	+------+	|	|	+------+	|
			|	| NMS  |	|	|	| NMS  |	|	|	| NMS  |	|
			|	+------+	|	|	+------+	|	|	+------+	|
			+---------------+	+---------------+	+---------------+
					|					|					|
					+-------------------+-------------------+
										↓
								+-------------+
								| Method Area | 红
								+-------------+
		④ 关于线程间共享说明：每个 JVM 只有一个 Runtime 实例。即运行时环境，相当于内存结构的运行时数据区。
	2. 线程
		① 线程是一个程序里的运行单元。JVM 运行一个应用有多个线程并行的执行
		② 在 HotSpot JVM 里，每个线程都与操作系统的本地线程直接映射。当一个 Java 线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java 线程执行终止后，本地线程也会回收。
		③ 操作系统负责所有线程的安排调度到任何一个可用的 CPU 上。一旦本地线程初始化成功，它就会调用 Java 线程中的 run() 方法。
		④ JVM 系统线程
			A. 如果使用 jconsole 或者是任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用 public static void main(String[]) 的 main 线程以及所有这个 main 
			线程自己创建的线程
			B. 这些主要的后台线程在 HotSpot JVM 里主要是以下几个：
				a. 虚拟机线程：这种线程的操作是需要 JVM 达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要 JVM 达到安全点，这样堆才不会变化。这种线程的执行类型
				包括“stop-the-world”的垃圾收集，线程收集，线程挂起以及偏向锁撤销
				b. 周期任务线程：这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行。
				c. GC 线程：这种线程对在 JVM 里不同种类的垃圾收集行为提供了支持
				d. 编译线程：这种线程在运行时会将字节码编译成本地代码
				e. 信号调度线程：这种线程接收信号并发送给 JVM，在它内部通过调用适当的方法进行处理
四、程序计数器（PC 寄存器）
	1. PC Register 介绍
		① JVM 中的程序计数寄存器（Program Counter Register）中，Register 的命名源于 CPU 的寄存器，寄存器存储指令相关的现场信息。CPU 只有把数据装载到寄存器才能够运行。
		② 这里，并非是广义上所指的物理寄存器，或许将其翻译为 PC 计数器（或指令计数器）更加贴切（也称为程序钩子），并且也不容易引起一些不必要的误会，JVM 的 PC 寄存器是对物理 PC 寄
		存器的一种抽象模拟
		③ 作用：PC 寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令
							+---------------------------+
							|		   Java 栈			|
							|	+-------------------+	|
							|	|	   当前栈帧		|	|
							|	|	+------------+	|	|
							|	|	| 局部变量表 |	|	|
			+----------+	|	|	+------------+	|	|
			| 执行引擎 | ---+---+---+------------+	|	|
			+----------+	|	|	|  操作数栈  |	|	|
						 +--+---+-->+------------+	|	|
			+----------+ |	|	|	+------------+	|	|				+-----------+
			| PC寄存器 | +	|	|	|  动态链接  |	|	|		+------ |   方法区  |
			+----------+	|	|	+------------+	|	|		|	    +-----------+
							|	|	+------------+	|	|		|
							|	|	| 方法返回值 |	|	| ------+
							|	|	+------------+	|	|		|
							|	+-------------------+	|		|		+-----------+
							|	+-------------------+	|		+------ | Java 堆区 |
							|	|	    栈帧 n		|	|				+-----------+
							|	+-------------------+	|
							|	+-------------------+	|
							|	|	    栈帧 2		|	|
							|	+-------------------+	|
							|	+-------------------+	|
							|	|	    栈帧 1		|	|
							|	+-------------------+	|
							+---------------------------+
		④ 它是一块很小的内存空间，几乎可以忽略不记，也是运行速度最快得到存储区域
		⑤ 在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致
		⑥ 任何时间一个线程都只有一个方法在执行，也就是所有的当前方法。程序计数器会存储当前线程正在执行的 Java 方法的 JVM 指令地址；或者，如果是在执行 native 方法，则是未指定值（
		undefined）
		⑦ 它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成
		⑧ 字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令
		⑨ 它是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域
	2. 两个常见问题（面试）
		① 使用 PC 寄存器存储字节码指令地址有什么用？（为什么使用 PC 寄存器记录当前线程的执行地址？）
			A. 因为 CPU 需要不停地切换各个线程，这时候切换回来以后，就得知道接着从哪里开始继续执行。
			B. JVM 的字节码解释器就需要通过改变 PC 寄存器的值来明确下一条应该执行什么样的字节码指令
		② PC 寄存器为什么会被设定为线程私有
			A. 我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU 会不停地做任务切换，这样必然导致经常中断或恢复，如何保证分毫无差？为了能够准确地记录
			各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个 PC 寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况
			B. 由于 CPU 时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令
			C. 这样必然导致经常中断或恢复，如何保证分毫无差？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。
五、虚拟机栈
	1. 虚拟机栈概述
		① 虚拟机栈出现的背景
			A. 由于跨平台性的设计，Java 的指令都是根据栈来设计的，不同平台 CPU 架构不同，所以不能设计为基于寄存器的
			B. 优点是跨平台性，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。
		② 内存中的栈和堆
			A. 栈是运行时的单位，而堆是存储的单位
			B. 即：栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。堆解决的是数据存储的问题，即数据怎么放、放哪里
		③ Java 虚拟机基本内容
			A. Java 虚拟机栈是什么
				a. Java 虚拟机栈（Java Virtual Machine Stack），早期也叫 Java 栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的
				Java 方法调用
				b. 是线程私有的
			B. 生命周期：生命周期和线程一致
			C. 作用：主管 Java 程序的运行，它保存方法的局部变量（8种基本数据类型、对象的引用地址）、部分结果，并参与方法的调用和返回
			D. 栈的特点（优点）
				a. 栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器
				b. JVM 直接对 Java 栈的操作只有两个
					(1) 每个方法执行，伴随着进栈（入栈、压栈）
					(2) 执行结束后的出栈工作
				c. 对于栈来说不存在垃圾回收问题
			E. 开发中遇到的异常有哪些（面试），栈中可能出现的异常：
				a. Java 虚拟机规范允许 Java 栈的大小是动态的或者是固定不变的
				b. 如果采用固定大小的 Java 虚拟机栈，那每一个线程的 Java 虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过 Java 虚拟机栈允许的最大容量，Java
				 虚拟机将会抛出一个 StackOverflowError 异常。
				c. 如果 Java 虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那 Java 虚拟机将会抛出一个
				OutOfMemoryError 异常。
			F. 设置栈内存大小：可以使用参数 -Xss 选项来设置线程的最大空间，栈的大小直接决定了函数调用的最大可达深度。
	2. 栈的存储单位
		① 栈中存储什么？
			A. 每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在
			B. 在这个线程上正在执行的每个方法都各自对应一个栈帧（Stack Frame）
			C. 栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息
		② 栈运行原理
			A. JVM 直接对 Java 栈的操作只有两个，就是对栈帧的压栈和出栈，遵循“先进后出”/“后进先出”原则
			B. 在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为当前栈（Current Frame），与当前栈帧相对应
			的方法就是当前方法（Current Method），定义这个方法的类就是当前类（Current Class）
			C. 执行引擎运行的所有字节码指令只针对当前栈进行操作
			D. 如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，称为新的当前栈
											 +--------------+
											 |				| <---------------- 栈顶
				+--------+					 |	+--------+	|
				| 方法 4 | ----------------> |	| 栈帧 4 |	| <---------------- 当前栈帧
				+--------+					 |	+--------+	|					 +--------------------------------------+
					↑						 |				|					 |	+------------+	+--------------+	|
				+--------+					 |	+--------+	|					 |	| 局部变量表 |	| 方法返回地址 |	|
				| 方法 3 | ----------------> |	| 栈帧 3 |--+---------+			 |	+------------+	+--------------+	|
				+--------+					 |	+--------+	|		  |			 |	+------------+	+--------------+	|
					↑					 	 |				| 		  +--------> |	|  操作数栈  |	|   动态链接   |	|
				+--------+					 |	+--------+	|					 |  +------------+	+--------------+	|
				| 方法 2 | ----------------> |	| 栈帧 2 |	|					 |  +------------------------------+	|
				+--------+					 |	+--------+	|					 |  | 		一些附加信息 		   |	|
					↑					 	 |				|					 |  +------------------------------+	|
				+--------+					 |	+--------+	|					 +--------------------------------------+
				| 方法 1 | ----------------> |	| 栈帧 1 |	| <---------------- 栈底
				+--------+					 |	+--------+	|
											 +--------------+
			E. 不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧
			F. 如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧
			G. Java 方法有两种返回函数的方式，一种是正常的函数返回，使用 return 指令；另外一种是抛出异常（没有被处理）。不管使用哪种方式，都会导致栈帧被弹出
		③ 栈帧的内部结构，每个栈帧中存储着
			A. 局部变量表（Local Variables）
			B. 操作数栈（或表达式栈）（Operand Stack）
			C. 动态链接（或指向运行时常量池的方法引用）（Dynamic Linking）
			D. 方法返回地址（或方法正常退出或者异常退出的定义）（Return Address）
			E. 一些附加信息
	3. 局部变量表
		① 概述
			A. 局部变量表（Local Variables）也被称之为局部变量数组或本地变量表
			B. 定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量，这些数据类型包括各类基本数据类型、对象引用（reference），以及 returnAddress 类型
			C. 由于局部变量表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题
			D. 局部变量表所需的容量大小是在编译器确定下来的，并保存在方法的 Code 属性的 maximun local variables 数据项中。在方法运行期间是不会改变局部变量表的大小
			E. 方法嵌套调用的次数由栈的大小决定。一般来说，栈越大，方法嵌套调用次数越多。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用
			所需传递的信息增大的需求。进而函数调用就会占有更多的栈空间，导致其嵌套调用次数就会减少
			F. 局部变量表中的变量只有在当前方法调用中有效。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。当方法调用结束后，随着方法栈帧的销毁，局部变量
			表也会随之销毁
		② 关于 Slot 的理解
			A. 参数值的存放总是在局部变量数组的 index0 开始，到数组长度减 1 的索引结束
			B. 局部变量表，最基本得存储单元是 Slot（变量槽）
			C. 局部变量表中存放编译期可知的各种基本数据类型（8 种），引用类型（reference），returnAddress 类型的变量
			D. 在局部变量表里，32 位以内的类型只占用一个 Slot（包括 returnAddress 类型）,64 位的类型（long 和 double）占有两个 slot
				a. byte、short、char 在存储前被转换为 int，boolean 也被转换为 int，0 表示 false，非 0 表示 true
				b. long 和 double 则占据两个 Slot
			E. JVM 会为局部变量表中的每一个 Slot 都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值
			F. 当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会按照顺序被复制到局部变量表中的每一个 Slot 上
			G. 如果需要访问局部变量表中的一个 64 bit 的局部变量值时，只需要使用前一个索引即可。（比如：访问 long 或 double 类型变量）
			H. 如果当前栈帧是由构造方法或者实例方法创建的，那么该对象引用 this 将会存放在 index0 的 slot 处，其余的参数按照参数顺序继续排列
		③ Slot 的重复利用: 栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期的局部变量的槽位，从而达到
		节省资源的目的
		④ 举例：静态变量与局部变量的对比
			A. 参数表分配完毕之后，再根据方法体内定义的变量的顺序和作用域分配
			B. 类变量有两次初始化的机会，第一次是在“准备阶段”，执行系统初始化，对类变量设置零值，另外一次则是在“初始化”阶段，赋予程序员在代码中定义的初始化值
			C. 和类变量初始化不同的是，局部变量表不存在系统初始化的过程，这意味着一旦定义了局部变量则必须人为的初始化，否则无法使用
		⑤ 补充说明
			A. 在栈帧中，与性能调优关系最为密切的部分就是前面提到的局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递
			B. 局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收
	4. 操作数栈
		① 每一个独立的栈帧中除了包含局部变量表以外，还包含一个后进先出（Last-In-First-Out）的操作数栈，也可以称之为表达式栈（Expression Stack）
		② 操作数栈，在方法执行的过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈（push）/出栈（pop）。
			a. 某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈
			b. 比如：执行复制、交换、求和等操作
		③ 操作数栈，主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间
		④ 操作数栈就是 JVM 执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的。
		⑤ 每一个操作数栈都会拥有一个明确的栈深度用于存储，其所需的最大深度在编译期就定义好了，保存在方法的 Code 属性中，为 max_stack 的值
		⑥ 栈中的任何一个元素都是可以任意的 Java 数据类型
			a. 32 bit 的类型占用一个栈单位深度
			b. 32 bit 的类型占用两个栈单位深度
		⑦ 操作数栈并非采用访问索引的方式进行数据访问的，而是只能通过标准的入栈（push）和出栈（pop）操作来完成一次数据访问
		⑧ 如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新 PC 寄存器中下一条需要执行的字节码指令
		⑨ 操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证
		⑩ 另外，Java 虚拟机的解释引擎是基于栈的执行引擎，其中的栈指的就是操作数栈
	5. 代码追踪
		① 代码
			public int getSum() {
				int i = 1;
				int j = 2;
				int k = i + j;
				int m = 3;
				return k + m;
			}
		② 使用 jclasslib 进行字节码指令分析
											+-------------------------------+												+-------------------------------+
											|				+-----------+	|												|				+-----------+	|
											| PC 寄存器		|     0     |	|												| PC 寄存器		|     1     |	|
			+---------------------------+	|				+-----------+	|				+---------------------------+	|				+-----------+	|
			|	指令地址	操作指令	|	+-------------------------------+				|	指令地址	操作指令	|	+-------------------------------+
			|	+--------------------+	|	+-------------------------------+				|	 0 			iconst_1	|	+-------------------------------+			
			|	| 0 		iconst_1 |	|	|				+-----+-----+	|				|	+--------------------+  |	|				+-----+-----+	|
			|	+--------------------+	|	|				|  1  |     |	|				|	| 1 		istore_1 |	|	|				|  1  |  1  |	|
			|	  1 		istore_1	|	|				+-----+-----+	|				|	+--------------------+	|	|				+-----+-----+	|
			|	  2 		iconst_2	|	|				|  2  |     |	|				|	  2 		iconst_2	|	|				|  2  |     |	|
			|	  3 		istore_2	|	|				+-----+-----+	|				|	  3 		istore_2	|	|				+-----+-----+	|
			|	  4 		iload_1		|	| 局部变量表	|  3  |     |	|				|	  4 		iload_1		|	| 局部变量表	|  3  |     |	|
			|	  5 		iload_2		|	|				+-----+-----+	|				|	  5 		iload_2		|	|				+-----+-----+	|
			|	  6 		iadd		|	|				|  4  |     |	|				|	  6 		iadd		|	|				|  4  |     |	|
			|	  7 		istore_3	|	|				+-----+-----+	|				|	  7 		istore_3	|	|				+-----+-----+	|
			|	  8 		iconst_3	|	|				|  5  |     |	|				|	  8 		iconst_3	|	|				|  5  |     |	|
			|	  9 		istore 4	|	|				+-----+-----+	|				|	  9 		istore 4	|	|				+-----+-----+	|
			|	  11 		iload_3		|	+-------------------------------+				|	  11 		iload_3		|	+-------------------------------+
			|	  12 		iload 4		|	+-------------------------------+				|	  12 		iload 4		|	+-------------------------------+
			|	  14 		iadd		|	| 					  +-----+	|				|	  14 		iadd		|	| 					  +-----+	|
			|	  15 		ireturn		|	|					  |		|	|				|	  15 		ireturn		|	|					  |		|	|
			+---------------------------+	| 操作数栈		  	  +-----+	|				+---------------------------+	| 操作数栈		  	  +-----+	|
											|			栈顶 ---> |	 1	|	|												|			栈顶 ---> |	 	|	|
											|					  +-----+	|												|					  +-----+	|
											+-------------------------------+												+-------------------------------+
											
											+-------------------------------+												+-------------------------------+
											|				+-----------+	|												|				+-----------+	|
											| PC 寄存器		|     4     |	|												| PC 寄存器		|     5     |	|
			+---------------------------+	|				+-----------+	|				+---------------------------+	|				+-----------+	|
			|	指令地址	操作指令	|	+-------------------------------+				|	指令地址	操作指令	|	+-------------------------------+
			|	  0 		iconst_1	|	+-------------------------------+				|	  0 		iconst_1	|	+-------------------------------+			
			|	  1 		istore_1	|	|				+-----+-----+	|				|	  1 		istore_1	|	|				+-----+-----+	|
			|	  2 		iconst_2	|	|				|  1  |  1  |	|				|	  2 		iconst_2	|	|				|  1  |  1  |	|
			|	  3 		istore_2	|	|				+-----+-----+	|				|	  3 		istore_2	|	|				+-----+-----+	|
			|	+-------------------+	|	|				|  2  |  2  |	|				|	  4 		iload_1		|	|				|  2  |  2  |	|
			|	| 4 		iload_1	|	|	|				+-----+-----+	|				|	+-------------------+  	|	|				+-----+-----+	|
			|	+-------------------+	|	| 局部变量表	|  3  |     |	|				|	| 5 		iload_2	|	|	| 局部变量表	|  3  |     |	|
			|	  5 		iload_2		|	|				+-----+-----+	|				|	+-------------------+  	|	|				+-----+-----+	|
			|	  6 		iadd		|	|				|  4  |     |	|				|	  6 		iadd		|	|				|  4  |     |	|
			|	  7 		istore_3	|	|				+-----+-----+	|				|	  7 		istore_3	|	|				+-----+-----+	|
			|	  8 		iconst_3	|	|				|  5  |     |	|				|	  8 		iconst_3	|	|				|  5  |     |	|
			|	  9 		istore 4	|	|				+-----+-----+	|				|	  9 		istore 4	|	|				+-----+-----+	|
			|	  11 		iload_3		|	+-------------------------------+				|	  11 		iload_3		|	+-------------------------------+
			|	  12 		iload 4		|	+-------------------------------+				|	  12 		iload 4		|	+-------------------------------+
			|	  14 		iadd		|	| 					  +-----+	|				|	  14 		iadd		|	| 					  +-----+	|
			|	  15 		ireturn		|	|					  |		|	|				|	  15 		ireturn		|	|					  |	 1	|	|
			+---------------------------+	| 操作数栈		  	  +-----+	|				+---------------------------+	| 操作数栈		  	  +-----+	|
											|			栈顶 ---> |	 1	|	|												|			栈顶 ---> |	 2	|	|
											|					  +-----+	|												|					  +-----+	|
											+-------------------------------+												+-------------------------------+
	6. 栈顶缓存技术
		① 基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派（
		instruction dispatch）次数和内存读/写次数
		② 由于操作数栈是存储在内存中的，因此频繁地执行内存读/写操作必然会影响执行次速度。为了解决这个问题，HotSpot JVM 的设计者们提出了栈顶缓存（ToS,Top-OF-Stack 
		Caching）技术，将栈顶元素全部缓存在物理 CPU 的寄存器中，以此降低对内存得到读/写次数，提升执行引擎的执行效率
	7. 动态链接
		① 概述
			A. 每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接（Dynamic Linking）。
			比如：invokedynamic 指令
			B. 在 Java 源文件被编译到字节码文件中，所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在 Class 文件的常量池里。比如：描述一个方法调用了另
			外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用。
																														Method Area
																												+----------------------------+
																												|	+--------------------+	 |
																												|	|	  类型信息		 |	 |
																												|	+--------------------+	 |
			+---------------------------+																		|	+--------------------+	 |
			|		   Thread			|																		|	|	   域信息		 |	 |
			|	+-------------------+	|																		|	+--------------------+	 |
			|	|    PC Register    |	|																		|	+--------------------+	 |
			|	+-------------------+	|																		|	|	  方法信息		 |	 |
			|	+--------+ +--------+ 	|																		|	+--------------------+	 |
			|	| Native | | Stack	| 	|																		|			……				 |
			|	| Stack	 | |		|	|																		|	+--------------------+	 |
			|	+--------+ +--------+	|																		|	|	运行时常量池	 |	 |
			|	|		 | |		|	|																		|	+--------------------+	 |
			|	+--------+ +--------+	|																		|	|  string constants  |	 |
			|	|		 | |		|	|																		|	+--------------------+	 |
			|	+--------+ +--------+	|																		|	| numberic constants |	 |
			+-------------------+-------+																		|	+--------------------+	 |
								↓																				|	|  class reference   |	 |
			+-------------------------------------------------------------------------------------------+		|	+--------------------+	 |
			|	Stack Frame																				|		|	|  field reference   |	 |
			|						 Local Variables	  Operand Stack		+------------------------+	|		|	+--------------------+	 |
			|	+--------------+	+---+---+---+---+	+---+---+---+---+	| Current Class Constant |--+-------+-->|  method reference  |	 |
			|	| Return Value |	|   |   |   |   |	|   |   |   |   |	| 	  Pool Reference	 |	|		|	+--------------------+	 |
			|	+--------------+	+---+---+---+---+	+---+---+---+---+	+------------------------+	|		|	| 	name and type	 |	 |
			+-------------------------------------------------------------------------------------------+		|	+--------------------+	 |
																												|	|		 ……			 |	 |
																												|	+--------------------+	 |
																												+----------------------------+
		② 为什么需要常量池：常量池的作用，就是为了提供一些符号和常量，便于指令得到识别
	8. 方法的调用：解析与分派
		① 概述
			A. 在 JVM 中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关
			B. 静态链接：当一个字节码文件被装载进 JVM 内部时，如果调用的目标方法在编译期可知，且运行期保持不变时，这种情况下将调用方法的符号引用转换为直接引用的
			过程称之为静态链接
			C. 动态链接：如果被调用的方法在编译期无法被确定下来，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，
			因此也就被称之为动态链接。
			D. 对应的方法绑定机制为：早期绑定（Early Binding）和晚期绑定（Late Binding）。绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生
			一次
				a. 早期绑定：指被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟
				是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用
				b. 晚期绑定：如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关方法，这种绑定方式也被称之为晚期绑定
			E. 随着高级语言的横空出世，类似于 Java 一样的基于面向对象的编程语言如今越来越多，尽管这类编程语言在语法风格上存在一定的差别，但是它们彼此之间始终保持
			着一个共性，那就是都支持封装、继承和多态等面向对象特性，既然这一来的编程语言具备多态特征，那么自然也就具备早期绑定和晚期绑定两种绑定方式
			F. Java 中任何一个普通的方法其实都具备虚函数的特征（具备晚期绑定的特征），它们相当于 C++ 语言中的虚函数（C++ 中则需要使用关键字 virtual 来显示定义）。
			如果在 Java 程序中不希望某个方法拥有虚函数的特性时，则可以使用关键字 final（不能被重写，因此表现为早期绑定的特征）来标记这个方法。
		② 虚方法和非虚方法
			A. 非虚方法：
				a. 如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称之为非虚方法
				b. 静态方法、私有方法、final 方法、实例构造器、父类方法都是非虚方法
				c. 其他方法称为虚方法
			B. 虚拟中提供了以下几条方法调用指令
				a. 普通调用指令
					(1) invokestatic：调用静态方法，解析阶段确定唯一方法版本
					(2) invokespecial：调用 <init> 方法、私有方法及父类方法，解析阶段确定唯一方法版本
					(3) invokevirtual：调用所有虚方法
					(4) invokeinterface：调用接口方法
				b. 动态调用指令：invokedynamic，动态解析出需要调用的方法，然后执行
				c. 前四条指令固化在虚拟机内部，方法的调用执行不可人为干预，而 invokedynamic 指令则支持由用户确定方法版本。其中 invokestatic 指令和 invokespecial
				指令调用的方法称为非虚方法，其余的（final 修饰的除外）称为虚方法
		③ 关于 invokedynamic 指令
			A. JVM 字节码指令集一直比较稳定，一直到 jdk 7 中才增加了一个 invokedynamic 指令，这是 Java 为了实现动态类型语言支持而做的一种改进
			B. 但是在 jdk 7 中并没有提供直接生成 invokedynamic 指令的方法，需要借助 ASM 这种底层字节码工具来产生 invokedynamic 指令。知道 jdk 8 的 Lambda 表达式
			的出现，invokedynamic 指令的生成，在 Java 中才有了直接的生成方式。
			C. jdk 7 中增加的动态语言类型支持的本质是对 Java 虚拟机规范的修改，而不是对 Java 语言规范的修改，这一块相对来说比较复杂，增加了虚拟机中的方法调用，最
			直接的受益者就是运行在 Java 平台的动态语言的编译器
			D. 动态类型语言和静态类型语言
				a. 动态类型语言和静态类型语言两者的区别就在于对类型的检查是在编译期还是在运行期，满足前者就是静态类型语言，反之是动态类型语言
				b. 静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息，这是动态语言的一个重要特征。
		④ 方法重写的本质
			A. Java 语言中方法重写的本质
				a. 找到操作数栈顶的第一个元素所执行的对象的实际类型，记作 C
				b. 如果在类型 c 中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返
				回 java.lang.IllegalAccessError 异常
				c. 否则，按照继承关系从下往上依次对 c 的各个父类进行第 2 步的搜索和验证过程
				d. 如果始终没有找到合适的方法，则抛出 java.lang.AbstractMethodError 异常。
			B. IllegalAccessError 介绍：程序试图访问或修改一个属性或调用一个方法，这个属性或方法，你没有权限访问。一般的，这个会引起编译器异常。这个错误如果发生在
			运行时，就说明一个类发生了不兼容的改变
		⑤ 虚方法表
			A. 在面向对象的编程中，会很频繁的使用到动态分派，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话就可能影响到执行效率。因此，为
			了提高性能，JVM 采用在类的方法区建立一个虚方法表（virtual method table）（非虚方法不会不会出现在表中）来实现。使用索引表来代替查找
			B. 每个类中都有一个虚方法表，表中存放着各个方法的实际入口
			C. 虚方法的创建时机：虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始化值准备完成之后，JVM 会把该类的方法表也初始化完毕
	9. 方法返回地址
		① 存放调用该方法的 PC 寄存器的值
		② 一个方法的结束，有两种方式
			a. 正常执行完成
			b. 出现未处理的异常，非正常退出
		③ 无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，调用者的 PC 计数器的值作为返回地址，即调用该方法的指令的下一条指令地址。
		而通过异常退出的，返回地址是要通过异常表来确定，栈帧一般不会保存这部分信息
		④ 当一个方法开始执行后，只有两种方式可以退出这个方法：
			A. 执行引擎遇到任何一个方法返回的字节码指令（return），会有返回值传递给长层的方法调用者，简称正常完成出口
				a. 一个方法在正常调用完成之后究竟需要哪一个返回指令还需要根据方法返回值的实际数据类型而定
				b. 在字节码指令中，返回值包含ireturn（当返回值是 boolean、byte、char、short 和 int  类型时使用）、lreturn、freturn、dreturn 以及 areturn，另外
				还有一个 return 指令供声明为 void 的方法、实例初始化方法、类和接口的初始化方法使用
			B. 在方法执行的过程中遇到了异常（Exception），并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法
			退出。简称异常完成出口
			C. 方法执行过程中抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码
			D. 本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置 PC 寄存器值等，让
			调用者方法继续执行下去
			E. 正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给上层调用者产生任何的返回值
 	10. 一些附加信息：栈帧中还允许携带与 Java 虚拟机实现相关的一些附加信息。例如：对程序调式提供支持的信息
	11. 栈的相关面试题
		① 举例栈溢出（StackOverFLowError）的情况
			可以通过 -Xss 设置栈地大小，当栈空间一味地加栈帧时，导致栈空间不足时，会出现栈溢出异常。
		② 调整栈大小，就能保证不出现栈溢出吗？
			不能，如果出现死循环或者递归无法终止时，无论栈大小如何调整，都无法避免栈溢出，只能让栈溢出出现地时机更晚一些
		③ 分配的栈内存越大越好吗？
			不是，因为一个线程对应一个栈，在有限的内存资源里，栈内存越大，线程数越少
		④ 垃圾回收是否会涉及到虚拟机栈？
			不会，虚拟机栈本质是一个栈，只有入栈和出栈两个操作，当方法执行结束时，栈帧就会出栈，当重新调用一个方法时，会将该方法的栈帧入栈。
		⑤ 方法中定义的局部变量是否线程安全
			A. 具体问题具体分析
			B. 线程安全
				a. 如果只有一个线程才可以操作此数据，则必须是线程安全的
				b. 如果有多个线程操作此数据，则此数据是共享数据。如果不考虑同步机制，会存在线程安全问题 
			C. 如果变量是在方法中产生和消亡，则是线程线程安全的；如果变量不是在方法中产生或者消亡，则是线程线程不安全的
六、本地方法接口
	1. 什么是本地方法
		① 一个 Native Method 就是一个 Java 调用非 Java 代码的接口。一个 Native Method 是这样一个 Java 方法：该方法的实现由非 Java 语言实现，比如 C 语言。这个特征
		并非 Java 所特有，很多其它的编程语言都有这一机制，比如在 C++中，可以用 extern "C" 告知 C++ 编译器去调用一个 C 的函数
		② "A native method is a Java  method whose implementation is provided by non-java code."
		③ 在定义一个 native method 时，并不提供实现体（有些像定义一个 Java interface），因为其实现体是由非 Java 语言在外面实现的
		④ 本地接口的作用是融合不同的编程语言为 Java 所用，它的初衷是融合 C/C++ 程序
	2. 举例
		public class IHaveNatives {
		
			public native void native1(int x);
			
			public native static long native2();
			
			private native synchronized float native3(Object o);
			
			native void native4(int[] ary) throws Exception;
		}
		标识符 native 可以与所有其他的 java 标识符连用，但是 abstract 除外。
	3. 为什么要使用 Native Method
		① Java 使用起来非常方便，然而有些层次的任务用 Java 实现起来不容易，或者我们对程序的效率很在意时，问题就来了
		② 与 Java 环境外交互： 有时 Java 应用需要与 Java 外面的环境交互，这是本地方法存在的主要原因。Java 需要与一些底层系统，如操作系统或某些硬件交换信息的情况。
		本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解 Java 应用之外的繁琐的细节
		③ 与操作系交互：JVM 支持着 Java 语言本身和运行时库，它是 Java 程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎么
		样，它毕竟不是一个完整的系统，它经常依赖于一些底层系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用 Java 实现了 jre 与底层系统的
		交互，甚至 JVM 的一部分就是用 C 写的。还有，如果我们要使用一些 Java 语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。
		④ Sun's Java：Sun 的解释器是用 C 实现的，这使得它能像一些普通的 C 一样与外部交互。jre 大部分是 Java 实现的，它也通过一些本地方法与外界交互。例如：类
		Java.lang.Thread 的 setProperty() 方法是用 Java 实现的，但是它实现调用的是该类里的本地方法 setProperty0()。这个本地方法是用 C 实现的，并被植入 JVM 内部，
		在 Windows 95 的平台上，这个本地方法最终调用 Win32 setProperty() API。这是一个本地方法的具体实现由 JVM 直接提供，更多的情况是本地方法由外部的动态链接库（
		external dynamic link library）提供，然后被 JVM 调用。
	4. 现状：目前该方法使用越来越少了，除非是与硬件有关的应用，比如通过 Java 程序驱动打印机或者 Java 系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构
	领域间的通信很发达，比如可以使用 Socket 通信，也可以使用 Web Service 等等。
七、本地方法栈
	1. 概述
		① Java 虚拟机栈用于管理 Java 方法的调用，而本地方法栈用于管理本地方法的调用
		② 本地方法栈，也是线程私有的
		③ 允许被实现成固定或者是可动态扩展的内存大小。（在内存溢出方面是相同的）
			A. 如果线程请求分配的栈容量超过本地方法栈允许的最大容量，Java 虚拟机将会抛出一个 StackOverflowError 异常
			B. 如果本地方法栈可以动态扩展，并且还尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的本地方法栈，那么 Java 虚拟机将
			会抛出一个 OutOfMemoryError 异常
		④ 本地方法是使用 C 语言实现的
		⑤ 它的具体做法是 Native Method Stack 中等级 native 方法，在 Execution Engine 执行加载本地方法库
		⑥ 当某个线程调用一个本地方法时，它就进入了一个全新的并且不受 Java 虚拟机限制的世界。它和 Java 虚拟机拥有同样的权限
			A. 本地方法可以通过本地方法接口来访问 Java 虚拟机内部的运行时数据区
			B. 它甚至可以直接使用本地处理器中的寄存器
			C. 直接从本地内存的堆中分配任意数量的内存
		⑦ 并不是所有的 JVM 都支持本地方法。因为 Java 虚拟机规范并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构等。如果 JVM 产品不打算支持 native 方法，
		也无需实现本地方法栈
		⑧ 在 HotSpot JVM 中，直接将本地方法栈和虚拟机栈合二为一
八、堆
	1. 堆的核心概念
		① 一个 JVM 实例只存在一个堆内存，堆也是 Java 内存管理的核心区域
		② Java 堆区在 JVM 启动的时候即被创建，其空间大小也就确定了。是 JVM 管理的最大一块内存空间。堆内存的大小是可以调节的
		③ 《Java 虚拟机规范》中规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的
		④ 所有的线程共享 Java 堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。
		⑤ 《Java 虚拟机规范》中对 Java 堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（The heap is the run-time data area from which memory for all
		class instances and arrays is allocated）。“几乎”所有的对象实例都在这里分配内存。从实际使用角度看的
		⑥ 数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置
		⑦ 在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除
		⑧ 堆，是 GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域
		⑨ 内存细分
			A. 现代垃圾收集器大部分都基于分代收集理论设计。堆空间细分为：
				a. Java 7 及之前堆内存逻辑上分为三部分：新生区+养老区+永久区
					(1) Young Generation Space  新生区	Young/New
					又被划分为 Eden 区和 Survivor 区
					(2) Tenure Generation Space	养老区	Old/Tenure
					(3) Permanent Space			永久区	Perm
				b. Java 8 及之后堆内存逻辑上分为三部分：新生区+养老区+元空间
					(1) Young Generation Space  新生区	Young/New
					又被划分为 Eden 区和 Survivor 区
					(2) Tenure Generation Space	养老区	Old/Tenure
					(3) Meta Space				元空间	Meta
			B. 约定：新生区< => 新生代 <=> 年轻代，养老区< => 老年区 <=> 老年代 永久区 <=> 永久代
			C. 堆空间内部结构（JDK 7）
						堆空间（The Heap Space）
					+---------------------+---------------------+
					|					  						|
					+---------------------+---------------------+---------------------+ -+
					|				   	  |					   	|					  |	 |
					| 	伊甸园区（Eden）  |					    |					  |	 |
					|				   	  | 老年代（Tenure/Old  |  永久代（Permanent  |  + 方法区
					+----------+----------+ generation）		|  generation）		  |  |
					| 	 S0	   |    S1    |					   	|					  |  |
					| （from） |  （to）  |					    |					  |  |
					+----------+----------+---------------------+---------------------+ -+
					|					  |
					+----------+----------+
				 年轻代（Young/New generation）
	2. 设置堆内存大小与 OOM
		① Java 堆区用于存储 Java 对象实例，那么堆的大小在 JVM 启动时就已经设定好了，可以通过选项“-Xmx”和“-Xms”来进行设置
			A. “-Xms” 用于表示堆区的起始内存，等价于 -XX:InitialHeapSize
			B. “-Xmx” 用于表示堆区的最大内存，等价于 -XX:MaxHeapSize
			C. “-X” 是 JVM 的运行参数，ms 是 memory start 的缩写，mx 是 memory max 的缩写
			D. 手动设置：-Xms600m -Xmx 600m 或者 -XX:InitialHeapSize=600m -XX:MaxHeapSize=600m
		② 一旦堆区中的内存大小超过“-Xmx”所指定的最大内存时，将会抛出 OutOfMemoryError 异常
		③ 通常会将“-Xmx”和“-Xms”两个参数配置相同的值，其目的就是为了能够在 Java 垃圾回收机制清理完堆区后不需要分隔计算堆区的大小，从而提高性能
		④ 默认情况下，初始内存大小：物理内存大小 / 64，最大内存大小：物理内存大小 / 4
		⑤ 查看堆空间设置的参数大小
			A. 方式一：打开命令行，输入 jps 查看进程号，输入 jstat -gc 进程 id
			B. 方式二：在虚拟机参数中加入 -XX:+PrintGCDetails
		⑥ OutOfMemory 举例
			A. 代码
				public class OOMTest {

					public static void main(String[] args) {


						ArrayList<Picture> list = new ArrayList<>();
						while (true) {

							list.add(new Picture(new Random().nextInt(1024 * 1024)));
						}
					}
				}

				class Picture {

					private byte[] pixels;

					public Picture(int length) {

						this.pixels = new byte[length];
					}
				}
			B. 设置虚拟机参数：-Xms1000m -Xmx1000m -XX:+PrintGCDetails
			C. 报 OOM 异常：堆内存超出堆设置的最大内存
				Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
				at com.li.Picture.<init>(OOMTest.java:29)
				at com.li.OOMTest.main(OOMTest.java:18)
	3. 年轻代与老年代
		① 存储在 JVM 中的 Java 对象可以被划分成两类：
			A. 一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速
			B. 另外一类对象的生命周期却非常长，在某些极端的情况下还能与 JVM 的生命周期保持一致
		② Java 堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（OldGen）
		③ 其中年轻代又可以划分为 Eden 空间、Survivor0空间 和 Survivor1空间（有时候也叫做 from 区 和 to 区）
			+-----------------------------------------------------------+
			|	年轻代（YoungGen）										|
			|	+---------------------------------------------------+	|
			|	|	+-----------+	+-----------+	+-----------+	|	|
			|	|	| 	Eden	|	| Survivor0 |	| Survivor1 |	|	|
			|	|	|	   		|	| （From）	|	|  （To）	|	|	|
			|	|	+-----------+	+-----------+	+-----------+	|	|
			|	+---------------------------------------------------+	|
			|															|
			|	老年代（OldGen）										|
			|	+---------------------------------------------------+	|
			|	|	+------------------------------------------+	|	|
			|	|	| 					OldGen				   |	|	|
			|	|	+------------------------------------------+	|	|
			|	+---------------------------------------------------+	|
			+-----------------------------------------------------------+
		④ 配置新生代与老年代在堆结构的占比
			A. 默认 -XX:NewRatio=2，表示新生代占 1，老年代占 2，新生代占整个堆的 1/3，该默认大小在开发中一般不会调
			B. 可以修改 -XX:NewRatio=4，表示新生代占 1，老年代占 4，新生代占整个堆的 1/5
		⑤ 在 HotSpot 中，Eden 空间和另外两个 Servivor 空间缺省所占的比例是 8:1:1
			A. 可以通过选项“-XX:ServivorRatio”调整这个空间比例。比如：-XX:ServivorRatio=8
			B. 几乎所有的 Java 对象都是在 Eden 区被 new 出来的
			C. 绝大部分的 Java 对象销毁都在新生代进行了
			D. 可以使用选项“-Xmn” 设置新生代最大内存大小，这个参数一般使用默认值就可以了，如果同时指定新生代最大内存大小，又通过 -XX:NewRatio 参数设置新生代的比例，
			则以 -Xmn 为准
			E. 默认比例是 8，但是实际比例却不是 8，是因为新生代存在自适应机制，想要关闭自适应内存分配策略，可以使用选项“-XX:-UseAdaptiveSizePolicy”（暂时用不着）
			F. 要想真正实现比例是 8:1:1，则必须设置选项“-XX:SurvivorRatio=8”
	4. 图解对象分配过程
		① 概述
			A. 为新对象分配内存是一件非常严谨和复杂的任务，JVM 的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，
			所以还需要考虑 GC 执行完内存回收后是否会在内存空间中产生内存碎片
				a. new 的对象先放伊甸园区。此区有大小限制
				b. 当伊甸园的空间填满时，程序又需要创建对象，JVM 的垃圾回收器将对伊甸园区进行垃圾回收（YGC/Minor GC），将伊甸园区中的不再被其他对象引用的对象进行销毁。
				再加载新的对象放到伊甸园区
				c. 然后将伊甸园中的剩余对象移动到幸存者 0 区。
				d. 如果再次触发垃圾回收，此时上次幸存下来的放到幸存者 0 区，如果没有回收，就会放到幸存者 1 区
				e. 如果再次经历垃圾回收，此时会重新放回幸存者 0 区，接着再去幸存者 1 区
				f. 什么时候能去养老区，可以设置次数，默认是 15 次，可以通过：-XX:MaxTenuringThreshold=<N> 进行设置。
				g. 在养老区，相对悠。当养老区内存不足时，再次触发 GC：Major GC，进行养老区的内存清理
				h. 若养老区执行了 Major GC 之后发现依然无法进行对象的保存，就会产生 OOM 异常
					java.lang.OutOfMemoryError: Java heap space
					
											YGC/Minor GC
											  +---------------------------+
											  |							  |
					  +-----------------------+-------------------+		  |
					  |						  |					  |		  |
				+-----+-----------------------+-------------+-----↓-------↓-----+---------------------------+
				|	+---+	+---+	+---+	+---+	+---+	|	+---+	+---+	|							|
				|	|	|	|	|	|	|	|	|	|	|	|	| 1	|	| 1	|	|							|
				|	| g	|	| r |	| r |	| g |	| r |	|	| g	|	| g |	|							|
				|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|							|
				|	+---+	+---+	+---+	+---+	+---+	|	+---+	+---+	|							|
				+-------------------------------------------+-------------------+---------------------------+
				↑											↑					↑							↑
				+---------------------+---------------------+---------+---------+-------------+-------------+
									 Eden							  S0					  S1
									 
											YGC/Minor GC
																		  +---------------------------+
																		  |							  |
																  +-------+-------------------+		  |
											  					  |		  |					  |		  |
									  +---------------------------+-------+-----------+		  |		  |
					  				  |	  					  	  |	  	  |		  	  |		  |		  |
				+---------------------+---------------------+-----+-------+-----+-----↓-------↓-------↓-----+
				|	+---+	+---+	+---+	+---+	+---+	|	+---+	+---+	|	+---+	+---+	+---+	|
				|	|	|	|	|	|	|	|	|	|	|	|	| 1	|	| 1	|	|	| 1	|	| 2	|	| 2	|	|
				|	| r	|	| r |	| g |	| r |	| r |	|	| g	|	| g |	|	| g	|	| g |	| g |	|
				|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|
				|	+---+	+---+	+---+	+---+	+---+	|	+---+	+---+	|	+---+	+---+	+---+	|
				+-------------------------------------------+-------------------+---------------------------+
				↑											↑					↑							↑
				+---------------------+---------------------+---------+---------+-------------+-------------+
									 Eden							  S0					  S1

											YGC/Minor GC										Promotion（晋升）
																									  +-------------------+
																									  |					  |
									  +---------------------------+		  +-----------+		  +-------+-----------+		  |
									  |							  |		  |			  |		  |		  |			  |		  |
				+---------------------+---------------------+-----↓-------↓-----+-----+-------+-------+-----+-----↓-------↓-----+
				|	+---+	+---+	+---+	+---+	+---+	|	+---+	+---+	|	+---+	+---+	+---+	|	+---+	+---+	|
				|	|	|	|	|	|	|	|	|	|	|	|	| 1	|	| 2	|	|	| 1	|	|15	|	|15	|	|	|16	|	|16	|	|
				|	| r	|	| r |	| g |	| r |	| r |	|	| g	|	| g |	|	| g	|	| g |	| g |	|	| g	|	| g |	|
				|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|
				|	+---+	+---+	+---+	+---+	+---+	|	+---+	+---+	|	+---+	+---+	+---+	|	+---+	+---+	|
				+-------------------------------------------+-------------------+---------------------------+-------------------+
				↑											↑					↑							↑					↑
				+---------------------+---------------------+---------+---------+-------------+-------------+---------+---------+
									 Eden							  S0					  S1				 Tenured/Old
		② 总结：
			A. 针对幸存者 S0 和 S1 的总结：复制之后有交换，谁空谁是 to
			B. 关于垃圾回收：频繁在新生区收集，很少在养老区收集，几乎不在永久区/元空间收集。
		③ 对象分配的特殊情况
			+---------------+
			|   新对象申请  |											+-------------------------------------------+
			+---------------+											|				YGC							|
					↓													|											|
			+---------------+		  			+-----+					|	   +-------------------+				|
			| Eden 放得下？ | -----  否 ------> | YGC | ----------------+----> |  Servivor 放得下  | --------+		|
			+---------------+		  			+-----+					|	   +-------------------+		 |		|
					|						  	   |					|				|					 |		|
					是						  	   |					|				是					 |		|
					↓						 	   ↓					|				↓					 |		|
			+---------------+		  		+---------------+			|	   +-------------------+		 |		|
			| 分配对象内存  | <---- 是 ---- | Eden 放得下？ | 			|	   | 放置在 S0/S1 区域 | <---+   |		|
			+---------------+		  		+---------------+			|	   +-------------------+	 |	 |		|
					↑	↑						   |					|				↓				 否	 否		|
					|	|				超大对象   否					|	   +-------------------+	 |	 |		|
					|	|						   ↓					|	   | 对象存活超过阈值  | ----+ 	 |		|
					|	|					+---------------+			|	   +-------------------+		 |		|
					是	是 ---------------- |  Old 放得下？ |			|				|					 |		|
					|						+---------------+			|				是					 |		|
					|							   |					|				↓					 |		|
					|							   否					|		  +------------+			 |		|
					|							   ↓					|		  | 晋升老年代 | <-----------+		|
			+---------------+					+-----+					|		  +------------+					|
			|  Old 放得下？ | <---------------- | FGC |					+-------------------------------------------+
			+---------------+					+-----+
					|
					否
					↓
				 +-----+
				 | OOM |
				 +-----+
	5. Minor GC、Major GC、Full GC
		① JVM 在进行 GC 时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代
		② 针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集（Pertial GC），一种是整堆收集（Full GC）
			A. 部分收集：不是完整收集整个 Java 堆的垃圾收集。其中又分为：
				a. 新生代收集（Minor GC / Young GC）：只是新生代的垃圾收集
				b. 老年代收集（Major GC / Old GC）：只是老年代的垃圾收集
					(1) 目前，只有 GMS GC 会有单独收集老年代的行为
					(2) 注意，很对时候 Major GC 会和 Full GC 混淆使用，需要具体分辨是老年代回收还是整堆回收
				c. 混合收集（Mixed GC）：收集整个新生代以及部分部分老年代的垃圾收集，目前只有 G1 GC 会有这种行为
			B. 整堆收集（Full GC）：收集整个 Java 堆和方法区的垃圾收集
		③ 最简单的分代式 GC 策略的触发条件
			A. 年轻代 GC（Minor GC）触发机制：
				a. 当年轻代空间不足时，就会触发 Minor GC，这里的年轻代满指的是 Eden 代满，Survivor 满不会引发 GC。（每次 Minor GC 会清理年轻代的内存）
				b. 因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解
				c. Minor GC 会引发 STW，暂停其他用户线程，等垃圾回收结束，用户线程才恢复运行。
			B. 老年代 GC（Major GC/Full GC）触发机制：
				a. 指发生在老年代的 GC，对象从老年代消失时，我们说“Major GC”或“Full GC”发生了
				b. 出现了 Major GC，经常会伴随至少一次的 Minor GC（但非绝对的，在 Parallel Scavenge 收集器的收集策略里就有直接进行 Major GC 的策略选择过程）。
				也就是在老年代空间不足时，会先尝试触发 Minor GC。如果之后空间还是不足，则触发 Major GC
				c. Major GC 的速度一般会比 Minor GC 慢十倍以上，STW 的时间更长
				d. 如果 Major GC 后，内存还不足，就报 OOM 了。
			C. Full GC 触发机制（触发 Full GC 执行的情况有如下五种）：
				a. 调用 System.gc() 时，系统建议执行 Full GC，但是不必然执行
				b. 老年代空间不足
				c. 方法区空间不足
				d. 通过 Minor GC 后进入老年代的平均大小大于老年代的可用内存
				e. 由 Eden区、Survivor space0（From Space）区向 Survivor space1（To Space）区复制时，对象大小大于 To Space 可用内存，则把该对象转存到老年代，
				且老年代的可用内存小于该对象大小
				f. 说明：Full GC 是开发或者中尽量要避免的。这样暂时时间会短一些
	6. 堆空间分代思想
		① 经研究，不同对象的生命周期不同。70%-99% 的对象是临时对象
			A. 新生代：有 Eden、两块大小相同的 Survivor（又称为 from/to，S0/S1）构成，To 总为空
			B. 老年代：存放新生代中经历多次 GC 仍然存活的对象
		② 其实不分代完全可以，分代的唯一理由就是优化 GC 性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC 的时候要找到哪些对象
		没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一个地方，当 GC 的时候先把这块存储“朝生夕死”对象的区
		域进行回收，这样就会腾出很大的空间出来
	7. 内存分配策略
		① 如果对象在 Eden 出生并经过第一次 Minor GC 后仍然存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间中，并且将对象年龄设为 1。对象在 Survivor
		区中每熬过一次 Minor GC，年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁，其实每个 JVM、每个 GC 都有所不同）时，就会被晋升到老年代中。
		② 对象晋升老年代的年龄阈值，可以通过选项 -XX:MaxTenuringThreshold 来设置
		③ 针对不同年龄段的对象分配原则如下所示：
			A. 优先分配到 Eden
			B. 大对象直接分配到老年代，尽量避免程序中出现过多的大对象
			C. 长期存活的对象分配到老年代
			D. 动态对象年龄判断，如果 Survivor 区中相同年龄的所有对象大小总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无需等到
			MaxTenuringThreshold 中要求的年龄
			E. 空间分配担保：-XX:HandlePromotionFailure
	8. 为对象分配内存：TLAB
		① 为什么有 TLAB（Thread Local Allocation Buffer）
			A. 堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据
			B. 由于对象实例的创建在 JVM 中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的
			C. 为避免多个线程操作同一地址，需要使用加锁机制，进而影响分配速度
		② 什么是 TLAB
			A. 从内存模型而不是垃圾收集的角度，对 Eden 区域继续划分，JVM 为每个线程分配了一个私有缓存区域，它包含在 Eden 空间内
			B. 多线程同时分配内存时，使用 TLAB 可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此可以将这种内存分配方式称之为快速分配策略
			C. 所有 OpenJDK 衍生出来的 JVM 都提供了 TLAB 的设计
		③ TLAB 的再说明：
			A. 尽管不是所有的对象实例都能够在 TLAB 中成功分配内存，担 JVM 确实是将 TLAB 作为内存分配的首选
			B. 在程序中，开发人员可以通过选项“-XX:UseTLAB”设置是否开启 TLAB 空间
			C. 默认情况下，TLAB 空间的内存非常小，仅占有整个 Eden 空间的 1%，当然可以通过选项“-XX:TLABWasteTargetPercent”设置 TLAB 空间所占用 Eden 空间的百分比
			大小。
			S. 一旦对象在 TLAB 空间分配内存失败时，JVM 就会尝试通过使用加锁机制确保数据操作的原子性，从而直接在 Eden 空间中分配内存。
	9. 小结堆空间的参数设置
			① 官网说明：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html
			② -XX:+PrintFlagsInitial：查看所有参数的默认初始值
			③ -XX:+PrintFlagsFinal：查看所有的参数的最终值（可能会存在修改，不再是初始值），具体查看某个参数的指令：jps（查看查看当前运行中的进行），jinfo -flag
			SurvivorRatio 进程 id
			④ -Xms：初始堆空间内存（默认为物理内存的 1/64）
			⑤ -Xmx：最大堆空间内存（默认为物理内存的 1/4）
			⑥ -Xmn：设置新生代的大小（初始值及最大值）
			⑦ -XX:NewRatio：配置新生代与老年代在堆结构的占比
			⑧. -XX:SurvivorRatio：设置新生代中 Eden 和 S0/S1 空间的比例
			⑨ -XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄
			⑩ -XX:+PrintGCDetails：输出详细的 GC 处理日志。打印 GC 简要信息：-XX:+PrintGC；-verbose:gc
			①①. -XX:HandlePromotionFailure：是否设置空间分配担保
				A. 在发生 Minor GC 之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间
					a. 如果大于，则此次 Minor GC 是安全的
					b. 如果小于，则虚拟机会查看 -XX:HandlePromotionFailure 设置值是否允许担保失败，如果 HandlePromotionFailure=true，那么会继续检查老年代最大可用
					连续空间是否大于历次晋升到老年代的对象的平均大小，如果大于，则尝试进行一次 Minor GC，但这次 Minor GC 依然是有风险的，如果小于，则改为进行一次
					Full GC。如果 HandlePromotionFailure=false，则改为进行一次 Full GC
				B. 在 JDK6 Update 24 之后，HandlePromotionFailure 参数不会再影响到虚拟机的空间分配担保策略，观察 OpenJDK 中的源码变化，虽然源码中还定义了
				HandlePromotionFailure 参数，但是在代码中已经不会再使用它。JDK6 Update24 之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均
				大小就会进行 Minor GC，否则将进行 Full GC
	10. 堆是分配对象的唯一选择吗
		① 在《深入理解 Java 虚拟机》中关于 Java 堆内存有这样一段描述：随着 JIT 编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变
		化，所有的对象都分配到堆上也渐渐变得不那么绝对了。
		② 在 Java 虚拟机中，对象是在 Java 堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过逃逸分析（Escape Analysis）后发现，一个对象并没
		有逃逸出方法的话，那么就可能被优化成栈上分配。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。
		③ 此外，前面提到的基于 OpenJDK 深度定制的 TaoBaoVM，其中创新的 GCIH（GC Invisible Heap）技术实现 OFF-Heap，将生命周期较长的 Java 对象从 Heap 中移至Heap 
		外，并且 GC 不能管理 GCIH 内部的 Java 对象，以此达到降低 GC 的回收频率和提升 GC 的回收率的目的
		④ 逃逸分析概述
			A. 如何将堆上的对象分配到栈，需要使用逃逸分析手段
			B. 这是一种可以有效减少 Java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法
			C. 通过逃逸分析，Java HotSpot 编译器能够分析出一个新的对象的引用的使用范围从而决定是否将这个对象分配到堆上
			D. 逃逸分析的基本行为就是分析对象动态作用域：
				a. 当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸
				b. 当一个对象在方法中被定义后，它被外部方法所引用，则认为发生了逃逸。例如作为调用参数传递到其他地方中。
			E. 参数设置：
				a. 在 JDK 6u23 版本之后，HotSpot 中默认就已经开启了逃逸分析
				b. 如果使用的是较早的版本，开发人员则可以通过：
					(1) 选项“-XX:+DoEscapeAnalysis”显示开启逃逸分析
					(2) 通过选项“-XX:+PrintEscapeAnalysis”查看逃逸分析的筛选结果
			F. 结论：开发中能使用局部变量的，就不要使用在方法外定义的
			G. 代码分析
				public class EscapeAnalysis {
				
					public EscapeAnalysis obj;
					
					/*
					方法返回 EscapeAnalysis 对象，发生逃逸
					*/
					public EscapeAnalysis getInstance() {
						return obj == null ? new EscapeAnalysis() : obj;
					}
					
					/*
					为成员属性赋值，发生逃逸，如果当前 obj 引用声明为 static 的，仍然会发生逃逸
					*/
					public void setObj() {
						this.obj = new EscapeAnalysis();
					}
					
					/*
					对象的作用域仅在当前方法中有效，没有发生逃逸
					*/
					public void useEscapeAnalysis() {
						EscapeAnalysis e = new EscapeAnalysis();
					}
					
					/*
					引用成员变量的值，发生逃逸
					*/
					public void useEscapeAnalysis1() {
						EscapeAnalysis e = getInstance();
					}
				}
		⑤ 逃逸分析：代码优化。使用逃逸分析，编译器可以对代码做如下优化：
			A. 栈上分配。将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是在栈分配的候选，而不是堆分配
				a. JIT 编译器在编译期间根据逃逸分析结果，发现如果一个对象并没有逃逸出方法的话，就可以被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结
				束，栈空间被回收，局部变量对象也被回收。这样就无徐进行垃圾回收
				b. 常见的栈上分配的场景：在逃逸分析中，已经说明了，分别是给成员变量赋值、方法返回值、实例引用传递
			B. 同步省略。如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步
				a. 线程同步的代价是相当高的，同步的后果是降低并发性和性能
				b. 在动态编译同步块的时候，JIT 编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT 编
				译器在编译这个同步块的时候就会取消这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除。
			C. 分离对象或者标量替换。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在 CPU 寄存器中。
				a. 标量（Scalar）是指一个无法再分解成更小的数据的数据，Java 中的原始数据类型就是标量。
				b. 相对的，那些还可以分解的数据叫做聚合量（Aggregate），Java 中的对象就是聚合量，因为它可以分解成其他聚合量和标量
				c. 在 JIT 阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过 JIT 优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个
				过程就是标量替换
				d. 标量替换参数设置：参数 -XX:+EliminateAllocations，开启了标量替换（默认打开），允许将对象打散分配在栈上
		⑥ 逃逸分析小结：逃逸分析并不成熟
			A. 关于逃逸分析的论文在 1999 年就已经发表了，但直到 JDK1.6 才有实现，而且这项技术到如今也并不是十分成熟
			B. 其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以实现标量替换、栈上分配和锁消除。但是逃逸分析自身也是需要进行一些列复
			杂的分析的，这其实也是一个相对耗时的过程
			C. 一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了
			D. 虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段
			E. 注意到有一些观点，认为通过逃逸分析，JVM 会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于 JVM 设计者们的选择。Oracle HotSpot JVM 中并未
			这么做，这一点在逃逸分析相关的文档中已经说明，所以可以明确所有的对象实例都是创建在堆上的。
			F. 目前很多书籍还是基于 JDK 7 以前的版本，JDK 已经发生了很大的变化，intern 字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代了。但
			是，intern 字符串的缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点结论：对象实例都是分配在堆上。
	11. 小结
		① 年轻代是对象的诞生、成长、消亡的区域，一个对象在年轻代产生、应用、最后被垃圾回收器收集、结束生命
		② 老年代放置长生命周期的对象，通常都是从 Survivor 区域筛选拷贝过来的 Java 对象。当然，也有特殊情况，普通对象会被分配在 TLAB 上；如果对象较大，JVM 会试图直接分
		配在 Eden 其他位置上；如果对象太大，完全无法在新生代找到足够上的连续空闲空间，JVM 就会直接分配到老年代。
		③ 当 GC 只发生在年轻代中，回收年轻代对象的行为被称为 Minor GC。当 GC 发生在老年代时则被称为 Major GC 或者 Full GC。一般的，Minor GC 的发生频率要比 Major GC 高
		很多，即老年代中垃圾回收发生的频率将大大低于年轻代
九、方法区
	1. 栈、堆、方法区的交互关系
		① 运行时数据区结构图
														+----------+
														| 内存区域 |
														+----------+
															  |
								+-----------------------------+-----------------------------+
								↓															↓
						   +----------+		   		   +-------------+		  		   +----------+
						   | 线程共享 | -------------> | ThreadLocal | --------------> | 线程私有 |
						   +----------+	  	   		   +-------------+		  		   +----------+
								|															|
					+-----------+-----------+							+-------------------+-------------------+
					↓						↓							↓					↓					↓
				 +----+					+--------+				  +----------+	  	 +------------+   	 +------------+
				 | 堆 |				    | 元空间 |				  | 虚拟机栈 |	  	 | 本地方法栈 |   	 | 程序计数器 |
				 +----+					+--------+				  +----------+	  	 +------------+		 +------------+
					|						↓							|					|
					|			+----------------------------+			|					|
					|			| OutOfMemoryError:Metaspace |			+-------------------+
					|			+----------------------------+								|
					↓																		↓
			+-----------------------------------+								  +--------------------+
			| OutOfMemoryError：Java heap space |								  | StackOverFLowError |
			+-----------------------------------+								  +--------------------+
		② 栈、堆、方法区的交互关系
			+---------------------------------------------------+
			|	  方法区	  Java 栈			Java 堆			|
			|	+--------+	+--------+		+--------------+	|
			|	| Person |	| person |	=	| new Person() |	|
			|	+--------+	+--------+		+--------------+	|
			+---------------------------------------------------+
			+------------+		+---------------------------------------+	
			| 	Java 栈  |		|				Java 堆					|
			| 本地变量表 |		|	+-------------------------------+	|
			+------------+		|	|	+----------------------+	|	|
			| 	 int	 |	 +--+-->|	| 到对象类型数据的指针 | ---+---+---+
			+------------+	 |	|	|	+----------------------+	|	|	|
			|	short	 |	 |	|	|		  对象实例数据			|	|	|
			+------------+	 |	|	+-------------------------------+	|	|
			| reference  | --+	+---------------------------------------+	|
			+------------+													|
			|	double 	 |		+---------------------------------------+	|
			|			 |		|				方法区					|	|
			+------------+		|			+--------------+			|	|
			|	float 	 |		|			| 对象类型数据 | <----------+---+
			+------------+		|			+--------------+			|
			|	 ……		 |		+---------------------------------------+
			+------------+
	2. 方法区的理解
		① 方法区在哪里？
			A. 《Java 虚拟机规范》中明确说明：“尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩”。但对于 HotSpot JVM 而
			言，方法区还有一个别名叫做 Non-Heap（非堆），目的就是要和堆分开
			B. 所以，方法区看作是一块独立于 Java 堆的内存空间
		② 方法区的基本理解
			A. 方法区（Method Area）与 Java 堆一样，是各个线程共享的内存区域
			B. 方法区在 JVM 启动的时候被创建，并且它的实例物理内存空间中和 Java 堆区一样都可以是不连续的
			C. 方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。
			D. 方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误：java.lang.OutOfMemoryError: PermGen space
			或者 java.lang.OutOfMemoryError: Metaspace
			E. 关闭 JVM 就会释放这个区域的内存
		③ HotSpot 中方法区的演进
			A. 在 jdk7 及以前，习惯上把方法区，称为永久代。jdk8 开始，使用元空间取代了永久代
			B. 本质上，方法区和永久代并不等价。仅是对 HotSpot 而言的。《Java 虚拟机规范》对如何实现方法区，不做统一要求。例如：BEA JRockit / IBM J9 中不存在永久代的概念。
			现在看来，当年使用永久代，不是好的 idea。导致 Java 程序更容易 OOM（超过 -XX:MaxPermSize 上限）
			C. 而到了 JDK8，终于完全废弃了永久代的概念，改用与 JRockit、J9 一样在本地内存中实现的元空间（Metaspace）来代替
			D. 元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代最大的区别在于：元空间不在虚拟机设置的内存中，而是使用本地内存
			E. 永久代、元空间二者并不只是名字变了，内部结构也调整了
			F. 根据《Java 虚拟机规范》的规定，如果方法区无法满足新的内存分配的需求时，将抛出 OOM 异常
	3. 设置方法区大小与 OOM
		① 设置方法区内存大小
			A. 方法区的大小不必是固定的，JVM 可以根据应用的需求动态调整
			B. JDK7 及以前：
				a. 通过 -XX:PermSize 来设置永久代初始分配空间。默认值是 20.75M
				b. 通过 -XX:MaxPermSize 来设置永久代最大可分配空间。32 位机器默认是 64M，64 位机器默认是 82M
				c. 当 JVM 加载的类信息容量超过了这个值，就会报异常 OutOfMemoryError: PermGen Space
			C. JDK8 及以后：
				a. 元数据区大小可以使用参数 -XX:MetaspaceSize 和 -XX:MaxMetaspaceSize 指定，替代上述原有的两个参数
				b. 默认值依赖于平台。Windows 下，-XX:MetaspaceSize 是 21M，-XX:MaxMetaspaceSize 的值是 -1.即没有限制
				c. 与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常 OutOfMemoryError：Metaspace
				d. -XX:MetaspaceSize：设置初始的元空间大小。对于一个 64 位的服务器端 JVM 来说，其默认的 -XX:MetaspaceSize 值为 21 MB。这就是初始的高水位线，一旦触及这个水
				位线，Full GC 将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于 GC 后释放了多少元空间。如果释放
				的空间不足，那么在不超过 MaxMetaspaceSize 时，适当提高该值。如果释放空间过多，则适当降低该值
				e. 如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到 Full GC 多次调用。为了避免频繁地 GC，建议将 
				-XX:MetaspaceSize 设置为一个相对较高的值。
		② 代码举例：使得方法区出现 OOM
			public class MethodAreaOOM extends ClassLoader {

				public static void main(String[] args) {

					int j = 0;

					try {
						MethodAreaOOM test = new MethodAreaOOM();

						for (int i = 0; i < 10000; i++) {
							// 创建 ClassWriter 对象，用于生成类的二进制字节码
							ClassWriter classWriter = new ClassWriter(0);
							// 指明 JDK 版本号，修饰符，类名，包名，父类
							classWriter.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC, "Class" + i, null, "java/lang/Object", null);
							// 返回 byte[]
							byte[] bytes = classWriter.toByteArray();
							// 类的加载
							test.defineClass("Class" + i, bytes, 0, bytes.length);
							j++;
						}
					} finally {
						System.out.println(j);
					}
				}
			}
			A. 如果是 JDK8及以后需要设置选项：-XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m -XX:-UseCompressedClassPointers，其中，-XX:-UseCompressedClassPointers 选项为
			关闭允许类指针压缩。如果是 JDK7 及以前需要设置选项：-XX:PermSize=10m -XX:MaxPermSize=10m
			B. 上述代码报 Exception in thread "main" java.lang.OutOfMemoryError: Metaspace 或 java.lang.OutOfMemoryError: PermGen Space
		③ 如何解决这些 OOM
			A. 要解决 OOM 异常或者 heap space 的异常，一般的手段是首先通过内存映像分析工具（如 Eclipse Memory Analyzer）对 dump 出现的堆转储快照进行分析，重点是确认内存中的
			对象是否是必要的，也就是要先分清楚到底是出现了内存泄露（Memory Leak）还是内存溢出（Memory Overflow）
			B. 如果是内存泄露，可进一步通过工具查看泄露对象到 GC Roots 的引用链。于是就能找到泄露对象是通过怎样的路径与 GC Roots 相关联导致垃圾收集器无法自动回收它们的。掌握
			了泄露对象的类型信息，以及 GC Roots 引用链的信息，就可以比较准确地定位出泄露代码地位置
			C. 如果不存在内存泄露，换句话说就是内存中地对象确实都还必须存活着，那就应当检查虚拟机的堆参数（-Xms 和 -Xmx），与机器物理内存对比看是否还可以调大，从代码上检查是
			否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗
	4. 方法区的内部结构
		① 方法区（Method Area）存储什么？
			A. 《深入理解 Java 虚拟机》书中对方法区（Method Area）存储内容描述如下：它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码缓存等。
			B. 类型信息：对每个加载的类型（类 Class、借口 interface、枚举 enum、注解 Annotation），JVM 必须在方法区中存储以下类型信息：
				a. 这个类型的完整有效名称（全名 = 包名.类名）
				b. 这个类型直接父类的完整有效名（对于 interface 或是 java.lang.Object，都没有父类）
				c. 这个类型的修饰符（public、abstract、final 的某个子集）
				d. 这个类型直接接口的一个有序列表
			c. 域（Field）信息
				a. JVM 必须在方法区中保存类型的所有域相关信息以及域的声明顺序
				b. 域的相关信息包括：域名称、域类型、域修饰符（public、private、protectde、static、final、volatile、transient 的某个子集）
			D. 方法（Method）信息：JVM 必须保存所有方法的以下信息，同域信息一样包括声明顺序：
				a. 方法名称
				b. 方法的返回类型（或 void）
				c. 方法参数的数量和类型（按顺序）
				d. 方法的修饰符（public、private、protectde、static、final、synchronized、native、abstract 的一个子集）
				e. 方法的字节码（bytecodes）、操作数栈、局部变量表及大小（abstract 和 native 方法除外）
				f. 异常表（abstract 和 native 方法除外），每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引
			E. non-final 的类变量
				a. 静态变量和类关联在一起，随着类的加载而加载，它们成为类数据在逻辑上的一部分
				b. 类变量被类的所有实例共享，即时没有类的实例时也可以访问它
			F. 补充说明：全局常量（static final）：被声明为 final 的类变量的处理方法则不同，每个全局常量在编译的时候就会被分配了。
		② 运行时常量池和常量池
			A. 方法区，内部包含了运行时常量池
			B. 字节码文件，内部包含了常量池
			C. 要弄清楚方法区，需要理解清楚 ClassFile，因为加载类的信息都在方法区。
			D. 要弄清楚方法区的运行时常量池，需要理解清楚 ClassFile 中的常量池
			E. 一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述信息外，还包含一项信息那就是常量池表（Constant Pool Table），包括各种字面量和对类型、域和方法
			的符号引用
		③ 为什么需要常量池
			A. 一个 java 源文件中的类、接口，编译后产生一个字节码文件。而 Java 中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另外一种方式，可以存到常
			量池，这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池。
			B. 比如：如下代码
				public class SimpleClass {
					public void sayHello() {
						System.out.println("hello")
					}
				}
			C. 虽然只有 194 字节，但是里面却使用了 String、System、PrintStream 及 Object 等结构，这里代码量其实已经很小了。如果代码多，引用到的结构会更多，这里就需要常量池了
		④ 常量池中有什么：几种在常量池内存储的数据类型包括
			A. 数量值
			B. 字符串值
			C. 类引用
			D. 字段引用
			E. 方法引用
		⑤ 小结：常量池，可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型
		⑥ 运行时常量池
			A. 运行时常量池（Runtime Constant Pool）是方法区的一部分
			B. 常量池表（Constant Pool Table）是 Class 文件的一部分，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中
			C. 运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池
			D. JVM 为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项与数组项一样，是通过索引访问的
			E. 运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换成
			真实地址。运行时常量池，相对于 Class 文件常量池的另一重要特征是：具备动态性
			F. 运行时常量池类似于传统编程语言中的符号表（symbol table），但是它所包含的数据却比符号表要更加丰富一些
			G. 当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则 JVM 会抛出 OutOfMemoryError 异常
	5. 方法区使用举例
	6. 方法区的演进细节
		① 首先明确：只有 HotSpot 才有永久代。BEA JRockit、IBM J9 等来说，是不存在永久代的概念的。原则上如何实现方法区属于虚拟机实现细节，不受《Java 虚拟机规范》管束，并不要求
		统一。
		② HotSpot 中方法区的变化
			+-------------+----------------------------------------------------------------------------------------------+
			| jdk6 及之前 | 有永久代（Permanent generation），静态变量存放在永久代上 									 |
			+-------------+----------------------------------------------------------------------------------------------+
			| jdk7		  | 有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中						 |
			+-------------+----------------------------------------------------------------------------------------------+
			| jdk8 及之后 | 无永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆中 |
			+-------------+----------------------------------------------------------------------------------------------+
			JDK6
			+-------------------------------------------------------------------------------+
			|	+-----------------------------------------------+	+-------------------+	|
			|	|	  方法区（概念）永久代（PermGen 实现）		|	|	  堆 heap		|	|
			|	|	+----------+	+--------+	+---------+		|	|					|	|
			|	|	| 类型信息 |	| 域信息 |	|方法信息 |		|	|					|	|
			|	|	+----------+	+--------+	+---------+		|	|					|	|
			|	|	+--------------+	+----------+			|	|					|	|
			|	|	| JIT 代码缓存 |	| 静态变量 |			|	|					|	|
			|	|	+--------------+	+----------+			|	|					|	|
			|	|	+-------------------------------------+		|	|					|	|
			|	|	|				+--------------+	  |		|	|					|	|
			|	|	| 运行时常量池	| String Table |	  |		|	|					|	|
			|	|	|				+--------------+	  |		|	|					|	|
			|	|	+-------------------------------------+		|	|					|	|
			|	+-----------------------------------------------+	+-------------------+	|
			+-------------------------------------------------------------------------------+
			JDK7
			+-------------------------------------------------------------------------------+
			|	+-----------------------------------------------+	+-------------------+	|
			|	|	  方法区（概念）永久代（PermGen 实现）		|	|	  堆 heap		|	|
			|	|	+----------+	+--------+	+---------+		|	|					|	|
			|	|	| 类型信息 |	| 域信息 |	|方法信息 |		|	|	+----------+	|	|
			|	|	+----------+	+--------+	+---------+		|	|	| 静态变量 |	|	|
			|	|	+--------------+							|	|	+----------+	|	|
			|	|	| JIT 代码缓存 |							|	|					|	|
			|	|	+--------------+							|	|  +--------------+ |	|
			|	|	+-------------------------------------+		|	|  | String Table |	|	|
			|	|	|									  |		|	|  +--------------+	|	|
			|	|	| 运行时常量池						  |		|	|					|	|
			|	|	|									  |		|	|					|	|
			|	|	+-------------------------------------+		|	|					|	|
			|	+-----------------------------------------------+	+-------------------+	|
			+-------------------------------------------------------------------------------+
			JDK8
								本地内存						+---------------------------------------+
			+-----------------------------------------------+	|				+-------------------+	|
			|	  		元空间 Metaspace（实现）			|	|				|	  堆 heap		|	|
			|	+----------+	+--------+	+---------+		|	|				|					|	|
			|	| 类型信息 |	| 域信息 |	|方法信息 |		|	|				|	+----------+	|	|
			|	+----------+	+--------+	+---------+		|	|				|	| 静态变量 |	|	|
			|	+--------------+							|	|	+--------+	|	+----------+	|	|
			|	| JIT 代码缓存 |							|<--+---| 方法区 |	|					|	|
			|	+--------------+							|	|	|（概念）|  |  +--------------+ |	|
			|	+-------------------------------------+		|	|	+--------+	|  | String Table |	|	|
			|	|									  |		|	|				|  +--------------+	|	|
			|	| 运行时常量池						  |		|	|				|					|	|
			|	|									  |		|	|				|					|	|
			|	+-------------------------------------+		|	|				|					|	|
			+-----------------------------------------------+	|				+-------------------+	|
																+---------------------------------------+
		③ 永久代为什么要被元空间替换？	
			A. 随着 Java8 的到来，HotSpot VM 中再也见不到永久代了。但是这并不意味着类的元数据信息也消失了。这些数据被移到了一个与堆不相连的本地内存区域，
			这个区域叫做元空间（Metaspace）。
			B. 由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间
			C. 这项改动是很有必要的，原因有：
				a. 为永久代设置空间大小是很难确定的。在某些场景下，如果动态类加载过多，容易产生 Perm 区的 OOM。比如某个实际 Web 工程中，因为功能点比较，
				在运行过程中，要不断动态加载很多类，经常出现致命错误。而元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，
				默认情况下，元空间的大小仅受本地内存限制
				b. 对永久代进行调优是很困难的
		④ StringTable 为什么要调整
			A. jdk7 中将 StringTable 放到了堆空间中。因为永久代的回收效率很低，在 Full GC 的时候才会触发。而 Full GC 是老年代的空间不足、永久代空间不足
			时才会触发。
			B. 这就导致 StringTable 回收率不高，而开发中会有大量的字符串被创建，回收率低，导致永久代内存不足。放到堆中，能及时回收内存
		⑤ 静态变量放在哪里
			A. 《深入理解 Java 虚拟机》中的案例：
				public class StaticObjTest {
					static class Test {
						static ObjectHolder staticObj = new ObjectHolder();
						ObjectHolder instanceObj = new ObjectHolder();
						
						void foo() {
							ObjectHolder localObj = new ObjectHolder();
							System.out.println("done");
						}
					}
				
				
					private static class ObjectHolder {
					
					}
					
					public static void main(String[] args) {
						Test test = new StaticObjTest.Test();
						test.foo();
					}
				}
			B. staticObj 随着 Test 的类型信息存放在方法区，instanceObj 随着 Test 的对象实例存放在 Java 堆，localObj 则是存放在 foo() 方法栈帧的局部变量表中。
			C. 测试发现：三个对象的数据在内存中的地址都落在 Eden 区范围内，所以结论：只要是对象实例必然会在 Java 堆中分配
			D. 接着，找到了一个引用该 staticObj 对象的地方，是在一个 java.lang.Class 的实例里，并且给出了这个实例的地址，通过 Inspector 查看该对象实例，可以
			清楚看到这确实是一个 java.lang.Class 类型的对象实例，里面有一个名为 staticObj 的实例字段
			E. 从 《Java 虚拟机规范》所定义的概念模型来看，所有 Class 相关的信息都应该存放在方法区之中，但方法区该如何实现，《Java 虚拟机规范》并未做出规定，
			这就成了一件允许不同虚拟机自己灵活把握的事情。JDK7 及以后版本的 HotSpot 虚拟机选择把静态变量与类型在 Java 语言一端的映射 Class 对象存放在一起，
			存储于 Java 堆之中。
	7. 方法区的垃圾回收
		① 有些人认为方法区（如 HotSpot 虚拟机中得元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java 虚拟机规范》对方法区的约束是非常宽松的，提到过可以
		不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如 JDK11 时期的 ZGC 收集器就不支持类卸载）
		② 一般来说这个区域的回收效果比较难以令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时确实是必要的。以前 SUN 公司的 Bug 列表当中，曾
		出现过若干个严重的 Bug 就是由于低版本的 HotSpot 虚拟机对此区域未完全回收而导致内存泄露
		③ 方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型。
		④ 先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。字面量比较接近 Java 语言层次的常量概念，如文本字符串、被声明为 final 的常量值等。
		而符号引用则属于编译原理方面的概念，包括下面三类常量：
			A. 类和接口的全限定名
			B. 字段的名称和描述符
			C. 方法的名称和描述符
		⑤ HotSpot 虚拟机对常量池的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收
		⑥ 回收废弃常量与回收 Java 堆中的对象非常类似。
		⑦ 判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：
			A. 该类所有的实例都已经被回收了，也就是 Java 堆中不存在该类及其任何派生子类的实例
			B. 加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如 OSGi、JSP 的重加载等，否则通常是很难达成的。
			C. 该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法
		⑧ Java 虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而不是和对象一样，没有引用了就必然回收。关于是否要对类型进行回收，
		HotSpot 虚拟机提供了“-XnoClassgc”参数进行控制，还可以使用“-verbose:class”以及“-XX:+TraceClass-Loading”、“-XX:+TraceClass-UnLoading”查看类加载和卸载
		信息
		⑨ 在大量使用放射、动态代理、CGLib 等字节码框架，动态生成 JSP 以及 OSGi 这类频繁自定义类加载器的场景中，通常都需要 Java 虚拟机具备类型卸载的能力，以保
		证不会对方法区造成过大的内存压力。
	8. 总结
																														Method Area
																												+----------------------------+	+---------------------------+---+
																												|	+--------------------+	 |	|							|	|
																												|	|	  类型信息		 |	 |	| 		   伊甸园区			|	|
																												|	+--------------------+	 |	|							|	|
			+---------------------------+																		|	+--------------------+	 |	+-------------+-------------+	+ Minor GC
			|		   Thread			|																		|	|	   域信息		 |	 |	|			  |				|	|
			|	+-------------------+	|																		|	+--------------------+	 |	| 幸存者 0 区 | 幸存者 1 区 |	|
			|	|    PC Register    |	|																		|	+--------------------+	 |	|			  |				|	|
			|	+-------------------+	|																		|	|	  方法信息		 |	 |	+-------------+-------------+---+
			|	+--------+ +--------+ 	|																		|	+--------------------+	 |	|							|	|
			|	| Native | | Stack	| 	|																		|			……				 |	|							|	|
			|	| Stack	 | |		|	|																		|	+--------------------+	 |	|							|	|
			|	+--------+ +--------+	|																		|	|	运行时常量池	 |	 |	|							|	|
			|	|		 | |		|	|																		|	+--------------------+	 |	|							|	|
			|	+--------+ +--------+	|																		|	|  string constants  |	 |	|							|	|
			|	|		 | |		|	|																		|	+--------------------+	 |	|							|	|
			|	+--------+ +--------+	|																		|	| numberic constants |	 |	|							|	|
			+-------------------+-------+																		|	+--------------------+	 |	|			老年代			|	+ Major GC
								↓																				|	|  class reference   |	 |	|							|	|
			+-------------------------------------------------------------------------------------------+		|	+--------------------+	 |	|							|	|
			|	Stack Frame																				|		|	|  field reference   |	 |	|							|	|
			|						 Local Variables	  Operand Stack		+------------------------+	|		|	+--------------------+	 |	|							|	|
			|	+--------------+	+---+---+---+---+	+---+---+---+---+	| Current Class Constant |--+-------+-->|  method reference  |	 |	|							|	|
			|	| Return Value |	|   |   |   |   |	|   |   |   |   |	| 	  Pool Reference	 |	|		|	+--------------------+	 |	|							|	|
			|	+--------------+	+---+---+---+---+	+---+---+---+---+	+------------------------+	|		|	| 	name and type	 |	 |	|							|	|
			+-------------------------------------------------------------------------------------------+		|	+--------------------+	 |	|							|	|
																												|	|		 ……			 |	 |	|							|	|
																												|	+--------------------+	 |	|							|	|
																												+----------------------------+	+---------------------------+---+
	9. 常见面试题
		① 百度
			A. 三面：说一下 JVM 内存模型，有哪些区？分别是干什么的
		② 蚂蚁金服
			A. Java8 的内存分代改进
			B. 内存分哪几个区，每个区的作用是什么
			C. 一面：JVM 内存分布/内存结构？栈和堆的区别？堆的结构？为什么需要两个 Survivor 区
			D. 二面：Eden 和 Survivor 的比例分配
		③ 小米
			A. JVM 内存分区，为什么需要新生代和老年代
		④ 字节跳动
			A. 二面：Java 的内存分布
			B. 二面：讲讲 JYM 运行时数据区
			C. 什么时候对象会进入老年代
		⑤ 京东
			A. JVM 的内存结构，Eden 和 Survivor 比例
			B. JVM 内存为什么要分成新生代、老年代、持久代。新生代中为什么要分成 Eden 和 Survivor
		⑥ 天猫
			A. 一面：JVM 内存模型以及分区，需要详细到每个区放什么
			B. 一面：JVM 的内存模型，Java8 做了什么修改
		⑦ 拼多多
			A. JVM 内存分哪几个区，每个区的作用是什么
		⑧ 美团
			A. Java 内存分配
			B. JVM 的永久代中会发生垃圾回收吗
			C. 一面：JVM 内存分区，为什么要有新生代和老年代
十、对象的实例化内存布局与访问定位
	1. 对象的实例化
		① 面试题
			A. 美团
				a. 对象在 JVM 中怎么样存储的
				b. 对象头信息里面有什么东西
			B. 蚂蚁金服
				a. 二面：Java 对象头里有什么
		② 对象的实例化
			A. 创建对象的方式
				a. new
					(1) 最常见的方式
					(2) 变形1：单例模式中 Xxx 的静态方法
					(3) 变形2：XxxBuilder/XxxFactory 的静态方法
				b. Class 的 newInstance()：放射的方式，只能调用空参的构造器，权限必须是 public
				c. Constructor 的 newInstance(Xxx)：反射的方式，可以调用空参、带参的构造器，权限没有要求
				d. 使用 clone()：不需要任何构造器，当前类需要实现 Cloneable 接口，重写 clone()
				e. 使用反序列化：从文件、网络中获取一个对象的二进制流
				f. 第三方库 Objenesis
			B. 创建对象的步骤
				a. 判断对象对应的类是否加载、链接、初始化
					(1) 虚拟机遇到一条 new 指令，首先去检查这个指令的参数能否在 Metaspace 的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否
					已经被加载、解析和初始化。（即判断类元信息是否存在）。如果没有，那么在双亲委派模式下，使用当前类加载器以 ClassLoader + 包名 + 类名为 key
					进行查找对应的 .class 文件。如果没有找到对应的文件，则抛出 ClassNotFoundException 异常，如果找到，则进行类加载，并生成对应的 Class 类对象
				b. 为对象分配内存：首先计算对象占用空间大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，4 个字节大小
					(1) 如果内存规整：指针碰撞
						(A) 如果内存是规整的，那么虚拟机将采用的是指针碰撞法（Bump The Pointer）来为对象分配内存
						(B) 意思是所有用过的内存在一边，空闲的内存在另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针指向空闲的那边挪动一段
						与对象大小相等的距离罢了。如果垃圾收集器选择的是 Serial、ParNew 这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带有 Compact（整理）
						过程的收集器时，使用指针碰撞
					(2) 如果内存不规整
						(A) 虚拟机需要维护一个列表
						(B) 空虚列表分配
							(a) 如果内存不是规整的，已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表法来为对象分配内存
							(b) 意思是虚拟机维护一个列表，记录上哪些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。
							这种分配方式成为“空闲列表（Free List）”
					(3) 说明：选择哪种分配方式由 Java 堆是否规则决定的，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定
				c. 处理并发安全问题
					(1) 采用 CAS 配上失败重试保证更新的原子性
					(2) 每个线程预先分配一块 TLAB，通过“-XX:+/-UseTLAB”参数来设定
				d. 初始化分配到的空间：所有属性设置默认值，保证对象实例字段在不赋值时可以直接使用
				e. 设置对象的对象头：将对象的所属类（即类的元数据信息）、对象的 HashCode 和对象的 GC 信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置
				方式取决于 JVM 实现
				f. 执行 init 方法进行初始化
					(1) 在 Java 程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内存对象的首地址赋值给引用变量
					(2) 因此一般来说（由字节码中是否跟随有 invokespecial 指令所决定），new 指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一
					个真正可用的对象才算完全创建出来
	2. 对象的内存布局
		① 对象头（Header）
			A. 包含两部分
				a. 运行时元数据（Mark World）
					(1) 哈希值（HashCode）
					(2) GC分代年龄
					(3) 锁状态标志
					(4) 线性持有的锁
					(5) 偏向线程 ID
					(6) 偏向时间戳  
				b. 类型指针：指向类元数据 InstanceKlass，确定该对象所属的类型
			B. 说明：如果是数组，还需记录数组的长度
		② 实例数据（Instance Data）
			A. 说明：它是对象真正存储的有效信息，包括程序代码中定义的各种类型的字段（包括从父类继承下来的和本身拥有的字段）
			B. 规则
				a. 相同宽度的字段总是被分配在一起
				b. 父类中定义的变量会出现在子类之前
				c. 如果 CompactFields 参数为 true（默认为 true），子类的窄变量可能插入到父类变量的空隙
		③ 对齐填充（Padding）：不是必须的，也没有特别含义，仅仅起到占位符的作用
		④ 说明
			A. 代码
				public class Customer {
					int id = 1001;
					String name;
					Account acct;
					
					{
						name = "匿名客户"
					}
					
					public Customer() {
						acct = new Account();
					}
					
					public static void main(String[] args) {
						Customer cust = new Customer();
					}
				}
				
				class Account {
				}
			B. 图示
						主线程的虚拟机栈																	 堆空间
				+-------------------------------+								+-------------------------------------------------------------------+
				|		  main() 的栈帧			|								|		new Customer() 实例											|
				|	+-----------------------+	|		+---------------+  +----+-->+-----------------------+		+-------------+					|
				|	|	+--------------+	|	|		|	+------+	|  |	|	|	+--------------+	|		| 哈希值 	  |					|
				|	|	|  局部变量表  |----+---+-----> |	| args |	|  |	|	|	| 运行时元数据 |----+-----> | GC 分代年龄 |					|
				|	|	+--------------+	|	|		|	+------+	|  |	|	|	+--------------+	|		| 锁状态标志  |					|
				|	|	+--------------+	|	|		|	+------+	|  |	|	|	+--------------+	|		|	  ……	  |					|
				|	|	|    操作数栈  |	|	|		|	| cust |----+--+ +--+---+---|	类型指针   |	|		+-------------+					|
				|	|	+--------------+	|	|		|	+------+	|	 |	|	|	+--------------+	| 对象头（Header）						|
				|	|	+--------------+	|	|		+---------------+	 |	|	+-----------------------+						字符串常量池	|
				|	|	|   动态链接   |	|	|							 |	|	|	父类的实例数据：略	|	  实例数据			+----------+	|
				|	|	+--------------+	|	|							 |	|	|	id: 1001			| （Instance Data）		|		   |	|
				|	|	+--------------+	|	|							 |	|	|	name: --------------+---------------------> | 匿名客户 |	|
				|	|	| 方法返回地址 |	|	|							 |	|	|	acct: --------------+---> +----------+		|		   |	|
				|	|	+--------------+	|	|							 |	|	+-----------------------+	  | 类型指针 |		+----------+	|
				|	|	+--------------+	|	|							 |	|	|	对齐填充（Padding） |	  +----------+						|
				|	|	|   附加信息   |	|	|							 |	|	+-----------------------+	new Account() 实例					|
				|	|	+--------------+	|	|							 |	+-------------------------------------------------------------------+
				|	+-----------------------+	|							 |								 方法区
				+-------------------------------+							 |			+---------------------------------------------------+
																			 |			|	+-------------------+	+-------------------+	|
																			 +----------+-->| Customer 的 Klass |	| Account 的 Klass  |	|
																						|	|	  类元信息		|	|	  类元信息		|	|
																						|	+-------------------+	+-------------------+	|
																						+---------------------------------------------------+
	3. 对象的访问定位
		① 图示
										+---------------------------+
										|		   堆区				|
										| 	+-----------------+ 	|
									+---+-->| InstanceOOpDesc | 	|
									|	|	+-----------------+ 	|
			+-------------------+	|	+-----------+---------------+
			|	+-----------+	|	|				|
			|	| reference |---+---+				| 元数据指针
			|	+-----------+	|		+-----------↓---------------+
			|		栈帧		|		|	+-----------------+		|
			+-------------------+		|	|  InstanceKlass  |		|
										|	+-----------------+		|
										|		  方法区			|
										+---------------------------+					
		② 创建对象的目的就是为了使用它
		③ JVM 是如何通过栈帧中的对象引用访问到其内部的对象实例的呢：定位，通过栈上的 reference 访问
		④ 对象访问方式主要有两种
			A. 句柄访问
				a. 图示
																	Java 堆
					+------------+			+-------------------------------+-----------------------+
					|   Java 栈  |			|			句柄池				|		实例池			|
					| 本地变量表 |			|	+----------------------+	|	+--------------+	|
					+------------+	  +-----+-->| 到对象实例数据的指针 |----+-->| 对象实例数据 |	|
					|	 int	 |	  |		|	+----------------------+	|	+--------------+	|
					+------------+	  |		|	| 到对象类型数据的指针 |----+-------+				|
					|	short	 |	  |		|	+----------------------+	|		|				|
					+------------+	  |		+-------------------------------+-------+---------------+
					|  reference |----+												|
					+------------+													|
					|	double	 |													|
					|			 |			+---------------------------------------↓---------------+
					+------------+			|							+-----------------------+	|
					| 	 float   |			|							|						|	|
					+------------+			|			方法区			|	  对象类型数据		|	|
					|	  ……	 |			|							| 	  					|	|
					|			 |			|							+-----------------------+	|
					+------------+			+-------------------------------------------------------+
				b. 好处：reference 中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，即reference 本身不需要被修改
				c. 缺点：需要在堆内存中开辟空间用于存放句柄，造成空间浪费，访问对象时，需要通过引用找到句柄，句柄中记录了堆空间中的对象实例数据，效率低
			B. 直接指针（HotSpot 采用）
				a. 图示
																	Java 堆
					+------------+			+-------------------------------------------------------+
					|   Java 栈  |			|	+-------------------------------+					|
					| 本地变量表 |			|	|	+----------------------+	|					|
					+------------+	  +-----+-->|	| 到对象实例数据的指针 |----+---+				|
					|	 int	 |	  |		|	|	+----------------------+	|	|				|
					+------------+	  |		|	| 	  	   对象实例数据 		|	|				|
					|	short	 |	  |		|	+-------------------------------+	|				|
					+------------+	  |		+---------------------------------------+---------------+
					|  reference |----+												|
					+------------+													|
					|	double	 |													|
					|			 |			+---------------------------------------↓---------------+
					+------------+			|							+-----------------------+	|
					| 	 float   |			|							|						|	|
					+------------+			|			方法区			|	  对象类型数据		|	|
					|	  ……	 |			|							| 	  					|	|
					|			 |			|							+-----------------------+	|
					+------------+			+-------------------------------------------------------+
				b. 好处：通过 reference 一步到位找到堆空间的对象，效率高
十一、直接内存
	1. 直接内存概述
		① 不是虚拟机运行时数据区的一部分，也不是《Java 虚拟机规范》中定义的内存区域
		② 直接内存是在 Java 堆外的、直接向系统申请的内存区间
		③ 来源于 NIO，通过存在堆中的 DirectByteBuffer操作 Native 内存
		④ 通常，访问直接内存的速度会优于 Java 堆，即读写性能高
			A. 因此出于性能考虑，读写频繁的场合可能会考虑使用直接内存
			B. Java 的 NIO 库允许 Java 程序使用直接内存，用于数据缓冲区
		⑤ 非直接缓冲区
			A. 读写文件，需要与磁盘交互，需要由用户态切换到内核态。在内核态时，需要内存如下图的操作
			B. 使用 IO，见下图，这里需要两份内存存储重复数据，效率低
								+-----------------------+		|		+-----------------------+
			OS					|						|		|		|						|				 JVM
								|	+---------------+	|		|		|	+---------------+	|
			物理磁盘			|	| 内核地址空间  |	|		|		|	| 用户地址空间  |	|			应用程序
			+-------+	read() 	|	|	+-------+	|	|  copy |		|	|	+-------+	|	|	read()	+-------+
			|		|-----------+---+-->|		|---+---+-------+-------+---+-->|		|---+---+---------->|		|
			|		|<----------+---+---|  缓存 |<--+---+-------+-------+---+---|  缓存 |<--+---+-----------|		|
			+-------+	write()	|	|	|		|	|	|		|  copy |	|	|		|	|	|	write()	+-------+
								|	|	+-------+	|	|		|		|	|	+-------+	|	|
								|	+---------------+	|		|		|	+---------------+	|
								|						|		|		|						|
								+-----------------------+		|		+-----------------------+
		⑥ 直接缓冲区
			A. 使用 NIO 时，如下图，操作系统划出的直接缓冲区可以被 Java 代码直接访问，只有一份。NIO 适合对大文件的读写操作
								+-----------------------+		|		+-----------------------+
			OS					|						|		|		|						|				 JVM
								|	+---------------+	|		|		|	+---------------+	|
			物理磁盘			|	| 内核地址空间  |	|	X	|	X	|	| 用户地址空间  |	|			应用程序
			+-------+	read() 	|	|	+-------+	|	|  copy |		|	|	+-------+	|	|	read()	+-------+
			|		|-----------+---+-->|		|---+---+-------+-------+---+-->|		|---+---+---------->|		|
			|		|<----------+---+---|  缓存 |<--+---+-------+-------+---+---|  缓存 |<--+---+-----------|		|
			+-------+	write()	|	|	|		|	|	|		|  copy |	|	|		|	|	|	write()	+-------+
								|	|	+-------+	|	|	X	|	X	|	|	+-------+	|	|
								|	+---+-------+---+	|		|		|	+---+-------+---+	|
								|		|		|		|		|		|		|		|		|
								+-------+-------+-------+		|		+-------+-------+-------+
										|		|								|		|
										|		|								|		|
										|		+-----------+-------+-----------+		|
										|					|		|					|
										|					|		|					|
										+-------------------+-------+-------------------+
															物理内存
															映射文件
		⑦ 也可能导致 OutOfMemoryError 异常：java.lang.OutOfMemoryError: Direct buffer memory
		⑧ 由于直接内存在 Java 堆外，因此它的大小不会直接受限于 -Xmx 指定的最大堆大小，但是系统内存是有限的，Java 堆和直接内存的总和依然受限于操作系统能给出
		的最大内存
		⑨ 缺点：
			A. 分配回收成本较高
			B. 不受 JVM 内存回收管理
		⑩ 直接内存大小可以通过“-XX:MaxDirectMemorySize”设置，如果不指定，默认与堆的最大值“-Xmx”参数一致
十二、执行引擎		
	1. 执行引擎概述
		① 执行引擎是 Java 虚拟机核心的组成部分之一
		② “虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚
		拟机，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎地结构体系，能够执行那些不被硬件直接支持地指令集格式
		③ JVM 的主要任务是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够
		被 JVM 所识别的字节码指令、符号表，以及其他辅助信息。
		④ 那么，如果想要让一个 Java 程序运行起来，执行引擎（Execution Engine）的任务就是将字节码指令解释/编译为对应平台上的本地机器指令才可以。简单来说，JVM
		中的执行引擎充当了将高级语言翻译成机器语言的译者
		⑤ 执行引擎的工作过程
							+---------------------------+
							|		   Java 栈			|
							|	+-------------------+	|
							|	|	   当前栈帧		|	|
							|	|	+------------+	|	|
							|	|	| 局部变量表 |	|	|
			+----------+	|	|	+------------+	|	|
			| 执行引擎 | ---+---+---+------------+	|	|
			+----------+	|	|	|  操作数栈  |	|	|
						 +--+---+-->+------------+	|	|
			+----------+ |	|	|	+------------+	|	|				+-----------+
			| PC寄存器 | +	|	|	|  动态链接  |	|	|		+------ |   方法区  |
			+----------+	|	|	+------------+	|	|		|	    +-----------+
							|	|	+------------+	|	|		|
							|	|	| 方法返回值 |	|	| ------+
							|	|	+------------+	|	|		|
							|	+-------------------+	|		|		+-----------+
							|	+-------------------+	|		+------ | Java 堆区 |
							|	|	    栈帧 n		|	|				+-----------+
							|	+-------------------+	|
							|	+-------------------+	|
							|	|	    栈帧 2		|	|
							|	+-------------------+	|
							|	+-------------------+	|
							|	|	    栈帧 1		|	|
							|	+-------------------+	|
							+---------------------------+
			A. 执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于 PC 寄存器
			B. 每当执行完一项指令操作后，PC 寄存器就会更新下一条需要被执行的指令地址
			C. 当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在 Java 堆区中的对象实例信息，以及通过对象头的元数据指针
			定位到目标对象的类型信息
			D. 从外观上来看，所有的 Java 虚拟机的执行引擎输入、输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行结果
	2. Java 代码编译和执行过程
		+-----------+			+-----------+			+-----------+			+-----------+
		|			|			|			|			|			|			|			|
		| 程序源码  | --------> | 词法分析  | -------->	|  单词流   | -------->	| 语法分析  |
		|			|			|			|			|			|			|			|
		+-----------+			+-----------+			+-----------+			+-----------+
																					  |
																					  ↓
		+-----------+			+-----------+			+-----------+			+-----------+
		|			|			|			|			|  指令流	|			|	抽象	|
		| 解释执行  | <-------- |  解释器   | <--------	|  		    | <--------	| 		    |
		|			|			|			|			| （可选）	|			|  语法树	|
		+-----------+			+-----------+			+-----------+			+-----------+
																					  |
																					  ↓
		+-----------+			+-----------+			+-----------+			+-----------+
		|			|			|			|			| 中间代码  |			|  优化器	|
		| 目标代码  | <-------- |  生成器   | <--------	|  		    | <--------	| 		    |
		|			|			|			|			| （可选）	|			| （可选）	|
		+-----------+			+-----------+			+-----------+			+-----------+
		① 大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过以上图中的各个步骤
		② Java 代码编译是由 Java 源码编译器来完成，流程图如下所示
		+---------------------------------------------------------------------------------------------------------------------------+
		|	+----+		 +----+		  +----+	   +----+		+----+		 +----+		  +----+	   +----+		+----+			|
		|	| 	 |		 | 	  |		  |    |	   |    |		| 语 |		 |	  |		  |	   |	   |	|		|	 |	Java	|
		|	|	 |		 |	  |		  | T  |	   |    |		| 法 |		 |	  |		  | 注 |	   | 字 |		| J  |	源码级	|
		|	|	 |		 | 词 |		  | o  |	   | 语 |		| 树 |		 | 语 |		  | 解 |	   | 节 |		| V  |	编译器	|
		|	| 源 |       | 法 |       | k  |	   | 法 |		} /  |		 | 义 |		  | 抽 |	   | 码 |		| M  |			|
		|	| 代 | ----> | 分 | ----> | e  | ----> | 分 | ----> | 抽 | ----> | 分 | ----> | 象 | ----> | 生 | ----> | 字 |			|
		|	| 码 |		 | 析 |		  | n  |	   | 析 |		| 象 |		 | 析 |		  | 语 |	   | 成 |		| 节 |			|
		|	|	 |		 | 器 |		  | 流 |	   | 器 |		| 语 |		 | 器 |		  | 法 |	   | 器 |		| 码 |			|
		|	|	 |		 | 	  |		  |    |	   |    |		| 法 |		 |	  |		  | 树 |	   |	|		|	 |			|
		|	|	 |		 | 	  |		  |    |	   |    |		| 树 |		 |	  |		  |	   |	   |	|		|	 |	符号表	|
		|	+----+		 +----+		  +----+	   +----+		+----+		 +----+		  +----+	   +----+		+----+			|
		+---------------------------------------------------------------------------------------------------------------------------+
		③ Java 字节码的执行是由 JVM 执行引擎来完成的，流程图如下所示
		+---------------------------------------------------------------------------------------------------------------------------+
		|				+-------------------------------------------------------------------------------------------+				|
		|	Java		|	+----+		 +----+		  +----+	   +----+		+----+		 +----+		  +----+	|				|
		|	虚拟机		|	| 机 |		 |	  |		  | 机 |	   |	|		| 寄 |		 |	  |		  | 目 |	|				|
		|	执行引擎	|	| 器 |		 | 中 |		  | 器 |	   | 中 |		| 存 |		 | 中 |		  | 标 |	|				|
		|	+----+		|	| 无 |		 | 间 |		  | 相 |	   | 间 |		| 器 |		 | 间 |		  | 代 |	|				|
		|	| J  | ---->|	| 关 | ----> | 代 | ----> | 关 | ----> | 代 | ----> | 分 | ----> | 代 | ----> | 码 |	|				|
		|	| V  |		|	| 优 |		 | 码 |		  | 优 |	   | 码 |		| 配 |		 | 码 |		  | 生 |	|				|
		|	| M  |		|	| 化 |		 |	  |		  | 化 |	   |	|		| 器 |		 |	  |		  | 成 |	|				|
		|	| 字 |		|	|	 |		 |	  |		  |	   |	   |	|		|	 |		 |	  |		  | 器 |	|				|
		|	| 节 |		|	+----+		 +----+		  +----+	   +----+	    +----+		 +----+		  +----+	|				|
		|	| 码 |--+	|	JIT 编译器																				|				|
		|	+----+	|	+-------------------------------------------------------------------------------------------+				|
		|			|	+-------------------------------------------+																|
		|			+-->|				字节码解释器				|																|
		|	符号表		+-------------------------------------------+																|
		+---------------------------------------------------------------------------------------------------------------------------+
		③ 问题：什么是解释器（Interpreter），什么是 JIT（Just In Time Compiler） 编译器
			A. 解释器：当 Java 虚拟机启动时会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行
			B. JIT 编译器：就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言。
		④ 问题：为什么说 Java 是半编译半解释型语言
			A. JDK1.0 时代，将 Java 语言定位为“解释执行”还是比较准确的。再后来，Java 也发展出可以直接生成本地代码的编译器
			B. 现在 JVM 在执行 Java 代码的时候，通常都会将解释执行与编译执行二者结合起来进行
	3. 机器码、指令、汇编语言
		① 机器码
			A. 各种用二进制编码方式表示的指令，叫做机器指令码。开始，人们就用它来编写程序，这就是机器语言
			B. 机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错
			C. 用它编写的程序一经输入计算机，CPU 直接读取运行，因此和其他语言编的程序相比，执行速度最快
			D. 机器指令码与 CPU 紧密相关，所以不同种类的 CPU 所对应的机器指令也就不相同
		② 指令
			A. 由于机器码是由 0 和 1 组成的二进制序列，可读性实在太差，于是人们发明了指令。
			B. 指令就是把机器中特定的 0 和 1 序列，简化成对应的指令（一般为英文简写，如 mov，inc 等），可读性稍好
			C. 由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同硬件平台的同一种指令（如 mov），对应的机器码也可能不同。
		③ 指令集
			A. 不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集
			B. 如常见的
				a. x86 的指令集，对应的是 x86 架构的平台
				b. ARM 的指令集，对应的是 ARM 架构的平台
		④ 汇编语言
			A. 由于指令的可读性还是太差，于是人们又发明了汇编语言
			B. 在汇编语言中，用助记符（Mnemonics）代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址
			C. 在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。由于计算机只认识指令码，所以用汇编语言编写的程序还必须
			翻译成机器指令码，计算机才能识别和执行
		⑤ 高级语言
			A. 为了使计算机用户编程更容易些，后来就出现了各种高级计算机语言。高级语言比机器语言、汇编语言更接近人的语言
			B. 当计算机执行高级语言编写的程序时，仍然需要把程序解释和编译成机器的指令码。完成这个过程的程序就叫做解释程序或编译程序
										+----------+
										| 高级语言 | -------+
										+----------+		|
											 |				|
											 ↓				+ 编译过程
			+----------+				+----------+		|
			| 汇编语言 |				| 汇编语言 | -------+
			+----------+				+----------+		|
				 |							 |				|
				 ↓							 ↓				+ 汇编过程
			+----------+				+----------+		|
			| 机器指令 |				| 机器指令 | -------+
			+----------+				+----------+
				 |							 |
				 +------------+--------------+
							  ↓
						+-----------+
						|    CPU    |
						+-----------+
		⑥ 字节码
			A. 字节码是一种中间状态（中间码）的二进制代码（文件），它比机器码更抽象，需要直译器转译后才能成为机器码
			B. 字节码主要为了实现特定软件运行和软件环境、与硬件环境无关
			C. 字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。字节码的典型应用为
			Java bytecode。
		⑦ C、C++ 源程序执行过程（编译过程又可以分成两个阶段：编译和汇编）
			A. 编译过程：是读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码
			B. 汇编过程：实际上指把汇编语言代码翻译成目标机器指令的过程
									+----------+
							.c .cpp	|  源代码  | ----+
									+----------+	 |
										 ↓			 |
									+----------+	 |
									|  编译器  |	 |
									+----------+	 |
										 ↓			 |
									+----------+	 |
							.s  	| 汇编代码 |	 + 编译过程
									+----------+	 |
										 ↓			 |
									+----------+	 |
									|  汇编器  |	 |
									+----------+	 |
										 ↓			 |
									+----------+	 |
							.o  	| 目标代码 | ----+
									+----------+
										 ↓
			+--------------+		+----------+	   +--------+
			| 其他目标代码 | ---->	|  链接器  | <---- | 库文件 |
			+--------------+		+----------+	   +--------+
										 ↓
									+----------+
									| 执行程序 |
									+----------+
	4. 解释器
		① JVM 设计者们的初衷仅仅只是单纯地满足 Java 程序实现跨平台性，因此避免采用静态编译地方式直接生成本地机器指令，从而诞生了实现解释器在运行时采用逐行
		解释字节码执行程序的想法
		② 解释器工作机制（或工作任务）
			A. 解释器真正意义上所承担的角色就是一个运行时“翻译者”，将字节码文件中的内容“翻译”为对应平台的本地机器指令执行
			B. 当一条字节码指令被解释执行完成后，接着再根据 PC 寄存器中记录的下一条需要被执行的字节码指令执行解释操作
		③ 解释器分类
			A. 在 Java 的发展历史里，一共有两套解释执行器，即古老的字节码解释器、现在普遍使用的模板解释器
				a. 字节码解释器在执行时通过纯软件代码模拟字节码的执行，效率非常低下
				b. 而模板解释器将每一条字节码和一个模板函数相关联，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能
			B. 在 HotSpot VM 中，解释器主要由 Interpreter 模块和 Code 模块构成
				a. Interpreter 模块：实现解释器的核心功能
				b. Code 模块：用于管理 HotSpot VM 在运行时生成的本地机器指令
		④ 现状
			A. 由于解释器在设计和实现上非常简单，因此除 Java 语言之外，还有许多高级语言同样也是基于解释器执行的，比如 pythod、Perl、Ruby 等。但是在今天，
			基于解释器执行已经沦落为低效的代名词.
			B. 为了解决这个问题，JVM 平台支持一种叫做即时编译的技术。即时编译的目的是避免函数被解释执行，而是将整个函数体编译成为机器码，每次函数执行时，
			只执行编译后的机器码即可，这种方式可以使执行效率大幅度提升。
			C. 不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献
	5. JIT 编译器
		① Java 代码的执行分类
			A. 第一种是将源代码编译成字节码文件，然后在运行时通过解释器将字节码文件转换为机器码执行
			B. 第二种是编译执行（直接编译成机器码）。现代虚拟机为了提高执行效率，会使用即时编译技术（JIT，Just In Time）将方法编译成机器码后再执行
			C. HotSpot VM 是目前市面上高性能虚拟机的代表作之一。它采用解释器与即时编译器并存的架构。在 Java 虚拟机运行时，解释器和即时编译器能够相互协作，
			各自取长补短，尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间
			D. 在今天，Java 程序的运行性能早已脱胎换骨，已经达到了可以和 C/C++ 程序一较高下的地步
		② HotSpot VM 为何解释器与 JIT 编译器并存
			A. 既然 HotSpot VM 已经内置了 JIT 编译器，那为什么还需要再使用解释器来“拖累”程序的执行性能呢，比如 JRockit VM 内部就不包含解释器，字节码全部
			都依靠即时编译器编译后执行
			B. 首先明确，当程序启动后，解释器可以马上发挥作用，省去编译的时间，立即执行。编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间。但
			编译为本地代码后，执行效率高
			C. 所以：尽管 JRockit VM  中程序的执行性能会非常高效，但程序在启动时必然需要花费更长的时间来进行编译。对于服务端应用来说，启动时间并非是关注
			重点，但对于那些看重启动时间的应用场景而言，或许就需要采用解释器与即时编译器并存的架构来换取一个平衡点。在此模式下，当 Java 虚拟机启动时，解
			释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。随着时间的推移，编译器发挥作用，把越老越多
			的代码编译成本地代码，获得更高的执行效率
			D. 同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的“逃生门”
		③ HotSpot VM 的执行方式
			A. 当虚拟机启动的时候，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成再执行，这样可以省去许多不必要的编译时间。并且随着程序运行时间
			的推移，即时编译器逐渐发挥作用，根据热点探测功能，将有价值的字节码编译为本地机器指令，以换取更高的程序执行效率
		④ 案例
			A. 注意解释执行与编译执行在线上环境微妙的辩证关系。机器在热机状态可以承受的负载要大于冷机状态。如果以热机状态时的流量进行切流，可能使处于冷机
			状态的服务器因无法承载流量而假死。
			B. 在生产环境发布过程中，以分批的方式进行发布，根据机器数量划分成多批次，每个批次的机器数至多占到整个集群的 1/8。曾经有这样的故障案例：某个程
			序员在发布平台进行分批发布，在输入发布总批数时，误填写成分为两批发布。如果是热机状态，在正常情况下一半的机器可以勉强承载流量，但由于刚启动的
			JVM 均是解释执行，还没有进行热点代码统计和 JIT 动态编译，导致机器启动之后，当前 1/2 发布成功的服务器马上全部宕机，此故障说明了 JIT 的存在。
		⑤ 概念解释
			A. Java 语言“编译器期”其实是一段“不确定”的操作过程，因为它可能是指一个前端编译器（其实叫“编译器的前端”更准确一点）把 .java 文件转变成 .class
			文件的过程
			B. 也可能是指虚拟机的后端运行期编译器（JIT 编译器，Just In Time Compiler）把字节码转变成机器码的过程
			C. 还可能是指使用静态提前编译器（AOT 编译器，Ahead Of Time Compiler）直接把 .java 文件编译成本地机器代码的过程
			D. 前端编译器：Sun 的 Javac、Eclipse JDT 中的增量式编译器（ECJ）
			E. JIT 编译器：HotSpot VM 的 C1、C2 编译器
			F. AOT 编译器：GNU Compiler for the Java（GCJ）、Excelsior JET
		⑥ 如何选择解释器与 JIT 编译器
			A. 热点代码及探测方式
			B. 当然是否需要启动 JIT 编译器将字节码直接编译为对应平台的本地机器指令，则需要根据代码被调用执行的频率而定。关于那些需要被编译为本地代码的字
			节码，也被称之为“热点代码”，JIT 编译器在运行时会针对那些频繁被调用的“热点代码”做出深度优化，将其直接编译为对应平台的本地机器指令，以此提升
			Java 程序的执行性能
		⑦ 热点代码及探测方式
			A. 一个被多次调用的方法，或者是一个方法体内部循环次数较多的循环体都可以被称之为“热点代码”，因此都可能通过 JIT 编译器编译为本地机器指令。由于
			这种编译方式发生在方法的执行过程中，因此也被称之为栈上替换，或简称为 OSR（On Stack Replacement）编译
			B. 一个方法究竟要被调用多少次，或者一个循环体究竟需要执行多少次循环才可以达到这个标准？必然需要一个明确的阈值，JIT 编译器才会将这些“热点代码”
			编译为本地机器指令执行。这里主要依靠热点探测功能。
			C. 目前 HotSpot VM 所采用的热点探测方式是基于计数器的热点探测
			D. 采用基于计数器的热点探测，HotSpot VM 将会为每一个方法都建立 2 个不同类型的计数器，分别为方法调用计数器（Invocation Counter）和回边计数器（
			Back Edga Counter）
				a. 方法调用计数器
					(1) 法调用计数器用于统计方法的调用次数，它的默认阈值在 Client 模式下是 1500 次，在 Server 模式下是 10000 次。超过这个阈值，就会触发
					 JIT编译
					(2) 这个阈值可以通过虚拟机参数“-XX:CompileThreshold”来认为设定
					(3) 当一个方法被调用时，会先检查该方法是否存在被 JIT 编译过的版本，如果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的
					版本，则将此方法的调用计数器值加 1，然后判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阈值。如果已超过阈值，那么将会向
					即时编译器提交一个该方法的代码编译请求。
						+---------------+												+-----------------------+
						| Java 方法入口 |												| Hot? 热点代码统计分析 |
						+---------------+												+-----------------------+
								|																   |
							方法调用															   |
								↓																   ↓
							+---------+				  +--------------------+			 +--------------------+
							| 已编译？| ---- 否 ----> | 方法调用计数器加 1 | ----------> | 计数器是否超过阈值 | ----+
							+---------+				  +--------------------+			 +--------------------+		|
								|																   |				|
								|																   是				|
								|				+--------------------------------------------------+------------+	|
								|				|												   ↓			|	|
								|				|					  +------------+		+--------------+	|	|
								是				|		JIT 动态编译  | JIT 编译器 | <----- | 提交编译请求 |	|	|
								|				|					  +------------+		+--------------+	|	|
								|				|							 |					   |			|	否
								|				|							 |					   |			|	|
								↓				|							 ↓					   |			|	|
					  +--------------------+	|	+------------+	  +--------------+			   |			|	|
					  | 执行编译后的机器码 | <--+-- | Code Cache |<---| 后台执行编译 |			   |			|	|
					  +--------------------+	|	+------------+	  +--------------+			   |			|	|
								|				+--------------------------------------------------+------------+	|
								|																   ↓				|
								|										+--------+			+--------------+		|
								|										| 解释器 | -------> | 解释方式执行 | <------+
								|										+--------+			+--------------+
								|					+----------+								   |
								+-----------------> | 方法返回 | <---------------------------------+
													+----------+
														  ↓
												   +--------------+
												   | 即时编译结束 |
												   +--------------+
					(4) 热度衰减
						(A) 如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数。当超过
						一定的时间限度，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会被减少一半，这个过程称为方法调用计
						数器热度的衰减（Counter Decay），而这段时间就被称为此方法统计的半衰周期（Counter Half Life Time）
						(B) 进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数“-XX:-UseCounterDecay”来关闭热度衰减，让方法计数器统计
						方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码
						(C) 另外，可以使用“-XX:CounterHalfLifeTime”参数设置半衰期的时间，单位是秒
				b. 回边计数器
					(1) 回边计数器用于统计一个方法中循环体代码执行的循环次数
					(2) 在字节码中遇到控制流向后跳转的指令称为“回边”（Back Edga）。显然，建立回边计数器统计的目的就是为了触发 OSR 编译。
													+--------------+
													| 遇到回边指令 |
													+--------------+
															↓
										否		 +--------------------+		   是
										+------- | 是否存在已编译版本 | --------+
										|		 +--------------------+			|
										↓										↓
							  +------------------+					+--------------------------+
							  | 回边计数器值加 1 |					| 执行编译后的本地代码版本 |
							  +------------------+					+--------------------------+
										|										|
										↓										|
						+----------------------------+							|
					+-- | 两计数器值之和是否超过阈值 |							|
					|	+----------------------------+							|
					|					|										|
					|					是										|
					|					↓										|
					|	 +---------------------------+							|
					|	 | 向编译器提交 OSR 编译请求 |							|
					|	 +---------------------------+							|
					|					|										|
					否					↓										|
					|		  +------------------+								|
					|		  | 调整回边计数器值 |								|
					|		  +------------------+								|
					|					|										|
					|					↓										|
					|		  +--------------------+							|
					+-------> | 以解释方式继续执行 |							|
							  +--------------------+							|
										|										|
										+-------------------+-------------------+
															↓
													+---------------+
													| Java 方法返回 |
													+---------------+
		⑧ HotSpot VM 设置程序执行方式
			A. 缺省情况下 HotSpot VM 是采用解释器与即时编译器并存的架构，可以根据具体的应用场景，通过命令显式地为 Java 虚拟机指定在运行时到底是完全采用解
			释器执行，还是完全采用即时编译器执行。
			B. -Xint：完全采用解释器模式执行程序
			C. -Xcomp：完全采用即时编译器模式执行程序。如果即时编译器出现问题，解释器会介入执行
			D. -Xmixed：采用解释器+即时编译器地混合模式共同执行程序
		⑨ HotSpot VM 中 JIT 分类
			A. 在 HotSpot VM 中内嵌有两个 JIT 编译器，分别为 Client Compiler 和 Server Compiler，但大多数情况下我们简称为 C1 编译器和 C2 编译器。可以通过
			如下命令显式指定 Java 虚拟机在运行时到底使用哪一种即时编译器
				a. -client：指定 Java 虚拟机运行在 Client 模式下，并使用 C1 编译器。C1 编译器会对字节码进行简单和可靠地优化，耗时短。以达到更快的编译速度
				b. -server：指定 Java 虚拟机运行在 Server 模式下，并使用 C2 编译器。C2 编译器进行耗时较长de优化，以及激进优化。但优化的代码执行效率更高
			B. 分层编译（Tiered Compilation）策略
				a. 程序解释执行（不开启性能监控）可以触发 C1 编译，将字节码编译成机器码，可以进行简单优化，也可以加上性能监控，C2 编译会根据性能监控信息
				进行激进优化
				b. 不过在 Java7 版本之后，一旦开发人员在程序中显式指定命令“-server”时，默认将会开启分层编译策略，由 C1 编译器和 C2 编译器相互协作共同来执
				行编译任务。
			C. C1 和 C2 编译器不同的优化策略
				a. 在不同的编译器上有不同的优化策略，C1 编译器上主要有方法内联，去虚拟化、冗余消除
					(1) 方法内联：将引用的函数代码编译到引用点处，这样可以减少栈帧的生成，减少参数传递以及跳转过程
					(2) 去虚拟化：对唯一的实现类进行内联
					(3) 冗余消除：在运行期间把一些不会执行的代码折叠掉
				b. C2 的优化主要是在全局层面，逃逸分析是优化基础。基于逃逸分析在 C2 上有如下几种优化
					(1) 标量替换：用标量值代替聚合对象的属性值
					(2) 栈上分配：对于未逃逸的对象分配对象对象在栈上而不是堆
					(3) 同步消除：清除同步操作，通常指 synchronized
			D. 总结：
				a. 一般来说，JIT 编译出来的机器码性能比解释器高
				b. C2 编译器启动时长比 C1 编译器慢，系统稳定执行以后，C2 编译器执行速度远远快于 C1 编译器
		⑩ 关于 Graal 编译器和 AOT 编译器
			A. Graal 编译器
				a. 自 JDK10 起，HotSpot 又加入一个全新的即时编译器：Graal 编译器
				b. 编译效果短短几年时间就追平了 C2 编译器。目前，带着“实验状态”标签，需要使用开关参数“-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler”
				去激活，才可以使用
			B. AOT 编译器
				a. JDK 9 引入了 AOT 编译器（静态编译器，Ahead Of Time Compiler）
				b. Java 9 引入了实验性 AOT 编译工具 jaotc。它借助了 Graal 编译器，将所输入的 Java 类文件转换为机器码，并存放至生成的动态共享文件中
				c. 所谓 AOT 编译，是与即时编译相对立的一个概念。即时编译器指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管
				环境中的过程。而 AOT 编译指的则是，在程序运行之前，便将字节码转换为机器码的过程
				d. 最大的好处：Java 虚拟机加载已经预编译成二进制库，可以直接执行。不必等待即时编译器的预热，减少 Java 应用给人带来“第一次运行慢”的不良体验
				e. 缺点：
					(1) 破坏了 Java “一次编译，到处运行”，必须为每个不同硬件、OS 编译对应的发行包
					(2) 降低了 Java 链接过程的动态性，加载的代码在编译期就必须全部已知
					(3) 还需要继续优化中，最初只支持 Linux x64 java base 
十三、String Table
	1. String 的基本特性
		① String：字符串，使用一对 "" 引起来表示
		② String 声明为 final的，不可被继承
		③ String 实现了 Serializable 接口：表示字符串是支持序列化的。实现了 Comparable 接口：表示 String 可以比较大小的
		④ String 在 JDK8 及以前内部定义了 final char[] value 用于存储字符串数据。JDK9 时改为 byte[]
		⑤ String 代表不可变的字符序列。简称：不可变性
			a. 当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的 value 进行赋值
			b. 当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的 value 进行赋值
			c. 当调用 String 的 replace() 方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的 value 进行赋值
		⑥ 通过字面量的方式（区别于 new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。
		⑦ 字符串常量池中是不会存储相同内容的字符串的
		⑧ String 的 String Pool 是一个固定大小的 HashTable，默认值大小长度是 1009。如果放进 String Pool 的 String 非常多，就会造成 Hash 冲突严重，从而导致链
		表会很长，而链表长了以后直接会造成的影响就是当调用 String.intern 时性能会大幅度下降
		⑨ 使用 -XX:StringTableSize 可设置 StringTable 的长度
		⑩ 在 JDK6 中StringTable是固定的，就是 1009 的长度，所以如果常量池中的字符串过多就会导致效率下降很快。StringTableSize 设置没有要求，在 JDK7 中，
		StringTable 的长度默认值是 60013，在JDK8中，1009 是可设置的最小值
	2. String 的内存分配
		① 在 Java 语言中有 8 种基本数据类型和一种比较特殊的类型 String。这些类型为了使它们在运行过程中速度更快、更节省内存，都提供了一种常量池的概念
		② 常量池就类似一个 Java 系统级别提供的缓存。8 种基本数据类型的常量池都是系统协调的，String 类型的常量池比较特殊。它的主要使用方法有两种。
			A. 直接使用双引号声明出来的 String 对象会直接存储在常量池中。比如：String info = "hello";
			B. 如果不是使用双引号声明的 String 对象，可以使用 String 提供的 intern() 方法。
		③ JDK6 及以前，字符串常量池存放在永久代
		④ JDK7 中 Oracle 的工程师对字符串池的逻辑做出了很大的改变，即将字符串常量池的位置调整到 Java 堆内
			A. 所有的字符串都保存到堆（heap）中，和其他普通对象一样，这样可以让你在进行调优应用时仅需要调整堆大小就可以了
			B. 字符串常量池概念原本使用得比较多，但是这个改动使得有足够得理由重新考虑 JDK7 中使用 String.intern()。
		⑤ JDK8 元空间，字符串常量在堆
	3. String 的基本操作
		① Java 语言规范里要求完全相同的字符串字面量，应该包含同样的 Unicode 字符序列（包含同一份码点序列的的常量），并且必须是指向同一个 String 类实例
	4. 字符串拼接操作
		① 常量与常量的拼接结果在常量池，原理是编译期优化
		② 常量池中不会存在相同内容的常量
		③ 只要其中有一个是变量，结果就在堆中。变量拼接的原理是 StringBuilder
		④ 如果拼接的结果调用 intern() 方法，则主动将常量池中还没有的字符串对象放入池中，并且返回对象地址
		⑤ 举例说明
			public class StringTest {

				String str = new String("good");
				char[] ch = {'t', 'e', 's', 't'};

				public void change(String str, char[] ch) {
					str = "test ok";
					ch[0] = 'b';
				}

				public void test1() {
					String s1 = "a" + "b" + "c"; // 等同于“abc”
					String s2 = "abc"; // “abc”一定是放在字符串常量池中，将此地址赋值给 s2

					System.out.println(s1 == s2); // true
					System.out.println(s1.equals(s2)); // true
				}

				public void test2() {
					String s1 = "JavaEE";
					String s2 = "Hadoop";

					String s3 = "JavaEEHadoop";
					// 常量与常量的拼接结果在常量池，原理是编译期优化
					String s4 = "JavaEE" + "Hadoop";
					// 如果拼接符号前后出现了变量，则需要在堆空间中 new String()，具体的内容为拼接后的 结果
					String s5 = s1 + "Hadoop";
					String s6 = "JavaEE" + s2;
					String s7 = s1 + s2;

					System.out.println(s3 == s4); // true
					System.out.println(s3 == s5); // false
					System.out.println(s3 == s6); // false
					System.out.println(s3 == s7); // false
					System.out.println(s5 == s6); // false
					System.out.println(s5 == s7); // false
					System.out.println(s6 == s7); // false

					// intern()：判断字符串常量池中是否存在“JavaEEHadoop”值，如果存在，则返回常量池中“JavaEEHadoop”的地址
					// 如果字符串常量池中不存在“JavaEEHadoop”，则在常量池中加载“JavaEEHadoop”，并返回对象的地址
					String s8 = s6.intern();
					System.out.println(s3 == s8); // true
				}

				public void test3() {
					String s1 = "a";
					String s2 = "b";
					String s3 = "ab";

					String s4 = s1 + s2;
					/*
					如下的 s1 + s2 的执行细节
					StringBuilder sb = new StringBuilder();
					sb.append("a");
					sb.append("b");
					s4 = sb.toString(); // 约等于 new String("ab")，即返回 new String() 的地址
					补充：在 JDK5 之后使用的是 StringBuilder，在 JDK5 之前使用的是 StringBuffer
					 */
					System.out.println(s3 == s4); // false
				}

				public void test4() {
					/*
					字符串拼接操作不一定使用的是 StringBuilder
					如果拼接符号左右两边都是字符串常量或常量引用，则仍然使用编译器优化，即非 StringBuilder 的方式
					针对于 final 修饰类、方法、基本数据类型，引用数据类型的结构时，能使用上 final 就使用
					 */
					final String s1 = "a";
					final String s2 = "b";
					String s3 = "ab";
					String s4 = s1 + s2;
					System.out.println(s3 == s4); // true
				}

				public static void main(String[] args) {
					StringTest stringTest = new StringTest();
					stringTest.change(stringTest.str, stringTest.ch);
					System.out.println(stringTest.str); // good
					System.out.println(stringTest.ch); // best

					stringTest.test1();
					stringTest.test2();
					stringTest.test3();
					stringTest.test4();
				}
			}
		⑥ 字符串拼接操作与 append 操作的效率对比
			A. 通过 StringBuilder 的 append() 方式添加字符串的效率要远高于使用 String 的字符串拼接方式
			B. StringBuilder 的 append() 的方式，自始自终只创建过一个 StringBuilder 的对象。使用 String 的字符串拼接方式，创建多个 StringBuilder 和 String
			对象
			C. 使用 String 的字符串拼接方式，内存中由于创建了较多的 StringBuilder 和 String 的对象，内存占用更大。如果进行 GC，需要花费更多的时间
			D. 改进的空间：在实际开发中，如果基本确定前前后后要添加的字符串长度不高于某个限定值 highLevel 的情况下，建议使用构造器 StringBuilder(highLevel)
	5. intern() 的使用
		① 如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern() 方法，intern() 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当
		前字符串放入常量池中。比如：String info = new String("hello").intern();
		② 也就是说，如果在任意字符串上调用 String.intern() 方法，那么其返回结果所指向的那个类的实例，必须和直接以常量形式出现的字符串实例完全相同。因此。下
		列表达式的值必定是 true：("a" + "b" + "c").intern() == "abc";
		③ 通俗点讲，Interned String 就是确保字符串在内存里只有一份拷贝，这样可以节约内存空间，加快字符串操作任务的执行速度。注意，这个值会被存放在字符串内部zhe
		池（String Intern Pool）
		④ 如何保证变量 s 指向的是字符串常量池中的数据
			A. 方式一：直接使用字面量定义的方式，String s = "Hello";
			B. 调用 Sting 的 intern() 方法
		⑤ 面试题
			A. 题目：new String("ab") 会创建几个对象
				a. 两个，通过字节码指令可以发现
				b. 一个对象是通过 new 关键字在堆空间创建的
				c. 另一个对象是字符串常量池中的对象 "ab"。
			B. 拓展：new String("a") + new String("b") 会创建几个对象
				a. 6 个
				b. 对象 1：new StringBuilder()
				c. 对象 2：new String("a")
				d. 对象 3：字符串常量池中的 "a"
				e. 对象 4：new String("b")
				f. 对象 5：字符串常量池中的 "b"
				g. 对象 6：深入 StringBuilder 的 toString()，new String("ab")
				h. 强调：toString() 的调用，在字符串常量池中，没有生成 "ab"
			C. 举例
				public void stringIntern1() {
					String s1 = new String("1");
					// 调用此方法之前，字符串常量池中已经存在 "1"
					s1.intern();
					String s2 = "1";
					/*
					JDK6：false，JDK7/8：false。
					s1 指向的是堆空间的 new String("1") 的对象地址
					而 s2 指向的是字符串常量池中的地址，因此两个变量的地址不相等
					 */
					System.out.println(s1 == s2);

					/*
					JDK6：false，JDK7/8：true。
					s3 指向的是堆空间的 new String("11") 的对象地址
					s4 指向的是字符串常量池中的地址

					调用 intern 之前，字符串常量池中不存在 "11"，调用 intern 之后，才生成 ”11“
					在 JDK6 中，创建了一个新的对象 "11"，也就有了新的地址
					在 JDK7 及以后，此时常量池中并没有创建 "11"，而是创建了一个指向堆空间中 new String("11") 的地址
					此时 s4 并不会在字符串常量池中再去创建 "11"，而是指向堆空间的 new String("11") 的地址
					 */
					String s3 = new String("1") + new String("1");
					s3.intern();
					String s4 = "11";
					System.out.println(s3 == s4);
				}

				public void stringIntern2() {
					String s3 = new String("1") + new String("1");
					String s4 = "11";
					s3.intern();
					System.out.println(s3 == s4); // false
				}
		⑥ 总结 String 的 intern() 的使用：
			A. JDK6 中，将这个字符串对象尝试放入字符串常量池中
				a. 如果字符串常量池中有，则不会放入，返回已有的字符串常量池中的对象地址
				b. 如果没有，会把此对象复制一份，放入字符串常量池中，并返回字符串常量池中的对象地址
			B. JDK7 及以后，将这个字符串对象尝试放入字符串常量池中
				a. 如果池中有，则不会放入。返回已有字符串常量池中的对象地址
				b. 如果没有，则会把 对象的引用地址复制一份，放入字符串常量池中，并返回字符串常量池中的引用地址
		⑦ 练习
			A. 练习1：
				public void stringExer1() {
					String s1 = new String("c") + new String("d");
					String s2 = s1.intern();

					System.out.println(s1 == "cd"); // true
					System.out.println(s2 == "cd"); // true
					System.out.println(s1 == s2); // true
				}
			
				public void stringExer2() {
					String s0 = "26";
					String s1 = new String("2") + new String("6");
					String s2 = s1.intern();

					System.out.println(s1 == s0); // false
					System.out.println(s2 == s0); // true
					System.out.println(s1 == s2); // false
				}
			B. 练习2：
				public void stringExer3() {
					String s1 = new String("4") + new String("8");
					s1.intern();
					String s2 = "48";
					System.out.println(s1 == s2); // true
				}

				public void stringExer4() {
					String s1 = new String("55");
					s1.intern();
					String s2 = "55";
					System.out.println(s1 == s2); // false
				}
		⑧ 使用 intern() 测试执行效率：空间使用上
			A. 对于程序中大量存在的字符串，尤其其中存在很多重复字符串时，使用 intern() 方法可以更节省堆空间
	6. String Table 的垃圾回收
	7. G1 中的 String 去重操作
		① 背景：对许多 Java 应用（有大的也有小的）做的测试得出以下结果
			A. 堆存活数据集合里面 String 对象占了 25%
			B. 堆存活数据集合里面重复的 String 对象有 13.5%
			C. String 对象平均长度是 45
		② 许多大规模的 Java 应用的瓶颈在于内存，测试表明，在这些类型的应用里面，Java 堆中存活的数据集合差不多 25% 是 String 对象。更进一步，这里面
		差不多一半 String 对象是重复的，重复的意思是说，string1.equal(string2) = true。堆上存在重复的 String 对象必然是一种内存的浪费。这个项目将在
		G1 垃圾收集器中实现自动持续对重复的 String 对象进行去重，这样就能避免浪费内存。
		③ 实现
			A. 当垃圾收集器工作的时候，会访问堆上存活的对象。对每一个访问的对象都会检查是否是候选的要去重的 String 对象。
			B. 如果是，把这个对象的一个引用插入到队列中等待后续的处理。一个去重的线程在后台运行，处理这个队列。处理队列的一个元素意味着从队列删除这
			个元素，然后尝试去重它引用的 String 对象
			C. 使用一个 hashtable 来记录所有被 String 对象使用的不重复的 char 数组。当去重时，会查这个 Hash Table，来看堆上是否已经存在一个一模一样
			的 char 数组
			D. 如果存在，String 对象会被调整引用那个数组，释放对原来的数组的引用，最终会被垃圾收集器回收掉
			E. 如果查找失败，char 数组会被插入到 Hash Table，这样以后就可以共享这个数组。
		④ 命令行选项
			A. UseStringDeduplication（bool）：开启 String 去重，默认是不开启的，需要手动开启
			B. PrintStringDeduplicationStatistics（bool）：打印详细的去重统计信息
			C. StringDeduplicationAgeThreshold（uintx）：达到这个年龄的 String 对象被认为是去重而定候选对象
十四、垃圾回收概述
	1. 什么是垃圾
		① 概述
			A. 垃圾收集，不是 Java 语言的伴生产物。早在 1960 年，第一门开始使用内存动态分配和垃圾收集技术的 Lisp 语言诞生
			B. 关于垃圾收集有三个经典的问题
				A. 哪些内存需要回收
				B. 什么时候回收
				C. 如何回收
			C. 垃圾收集机制是 Java 的招牌能力，极大地提高了开发效率。如今，垃圾收集几乎成为现代语言的标配，即使经过如从长时间的发展，Java 的垃圾收集
			机制仍然在不断地演进中，不同大小的设备、不同特征的应用场景，对垃圾收集提出了新的挑战。
		② 大厂面试题
			A. 蚂蚁金服
				a. 你知道哪几种垃圾回收器，各自的优缺点，重点讲一下 CMS 和 G1
				b. 一面：JVM GC 算法有哪些，目前的 JDK 版本采用什么回收算法
				c. 一面：G1 回收器讲下回收过程
				d. GC 是什么，为什么要有 GC？
				e. 一面：GC 的两种判定方法，CMS 收集器与 G1 收集器的特点
			B. 百度
				a. 说一下 GC 算法，分代回收说一下
				b. 垃圾收集策略和算法
			C. 天猫
				a. 一面：JVM GC 原理，JVM 怎么回收内存
				b. 一面：CMS 特点，垃圾回收算法有哪些，各自的优缺点，他们共同的缺点是什么
			D. 滴滴
				a. 一面：Java 的垃圾回收器都有哪些，说下 G1 的应用场景，平时你是如何搭配使用垃圾回收器的
			E. 京东
				a. 你知道哪几种垃圾收集器，各自的优缺点，重点讲一下 CMS 和 G1，包括原理，流程，优缺点。
				b. 垃圾回收算法的实现原理
			F. 阿里
				a. 讲一讲垃圾回收算法
				b. 什么情况下触发垃圾回收
				c. 如何选择合适的垃圾收集算法
				d. JVM 有哪三种垃圾回收器
			G. 字节跳动
				a. 常见的垃圾回收器算法有哪些，各自有什么优劣
				b. System.gc() 和 Runtime.gc() 会做什么事情
				c. 一面：Java GC 机制，GC Roots 有哪些
				d. 二面：Java 对象的回收方式，回收算法
				e. CMS 和 G1 了解吗，CMS 解决什么问题，说一下回收过程
				f. CMS 回收停顿了几次，为什么要停顿两次
		③ 什么是垃圾
			A. 什么是垃圾（Garbage）呢？
				a. 垃圾是指在运行程序中没有任何指针指向的对象，这个对象就是需要被回收的垃圾
				b. 外文：An object is considered garbage when it can no longer be reached from any pointer in the running program
			B. 如果不及时对内存中的垃圾进行清理，那么，这些垃圾对象所占的内存空间会一直保留到应用程序结束，被保留的空间无法被其他对象使用，甚至可能导致
			内存溢出
	2. 为什么需要 GC
		① 对于高级语言来说，一个基本认知是如果不进行垃圾回收，内存迟早都会被消耗完，因为不断地分配内存空间而不进行回收，就好像不停地生产生活垃圾而从来不
		打扫一样。
		② 除了释放没用的对象，垃圾回收也可以清除内存里的记录碎片。碎片整理将所占用的堆内存移到堆的一端，以便 JVM 将整理出的内存分配给新的对象
		③ 随着应用程序所应付的业务越来越庞大、复杂，用户越来越多，没有 GC 就不能保证应用程序的正常进行。而经常造成 STW 的 GC 又跟不上实际的需求，所以才
		会不断地尝试对 GC 进行优化。
	3. 早期垃圾回收
		① 在早期的 C/C++ 时代，垃圾回收基本上是手工进行的。开发人员可以使用 new 关键字进行内存申请，并使用 delete 关键字进行内存释放。比如如下代码：
			MibBridge *pBridge = new cmBaseGroupBridge();
			// 如果注册失败，使用 Delete 释放该对象所占用内存区域
			if(pBridge -> Register(kDestroy) != NO_ERROR) 
				delete pBridge;
		② 这种方式可以灵活控制内存释放的时间，但是会给开发人员带来频繁申请和释放内存的管理负担。倘若有一处内存区间由于程序员编码问题忘记被回收，那么就会
		产生内存泄露，垃圾对象永远无法被清除，随着系统运行时间的不断增长，垃圾对象所耗内存可能持续上升，直到出现内存溢出并造成应用程序崩溃
		③ 在有了垃圾回收机制后，上述代码块有可能变成这样
			MibBridge *pBridge = new cmBaseGroupBridge();
			pBridge -> Register(kDestroy)
		④ 现在，除了 Java 以外，C#、Python、Ruby 等语言都使用了自动垃圾回收的思想，也是未来发展趋势。可以说，这种自动化的内存分配和垃圾回收的方式已经成为
		现代语言必备的标准
	4. Java 垃圾回收机制
		① 自动内存管理，无需开发人员手动参与内存的分配和回收，这样降低内存泄露和内存溢出的风险。没有垃圾回收器，Java 也会和 cpp 一样，各种垂直指针、野指
		针，泄露问题
		② 自动内存管理机制，将程序员从繁重的内存管理中释放出来，可以更专心地专注于业务开发。
		③ 对于 Java 开发人员而言，自动内存管理就像是一个黑匣子，如果过度依赖于“自动”，那么将会是一场灾难，最严重地就会弱化开发人员在程序出现内存溢出时定位
		问题和解决问题地能力
		④ 此时，了解 JVM 的自动内存分配和内存回收原理就显得非常重要，只有在真正了解 JVM 是如何管理内存后，我们才能够在遇见 OutOfMemoryError 时，快速地根据
		错误异常日志定位问题和解决问题
		⑤ 当需要排查各种内存溢出、内存泄露问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就必须对这些“自动化”的技术实施必要的监控和调节。
		⑥ 垃圾回收器可以对年轻代回收，也可以对老年代回收，甚至是全堆和方法区的回收。其中，Java 堆是垃圾收集器的工作重点
		⑦ 从次数上讲：
			a. 频繁收集 Young 区
			b. 较少收集 Old 区
			c. 基本不动 Perm 区
十五、垃圾回收相关算法
	1. 标记阶段：引用技术算法
		① 垃圾标记阶段：对象存活判断
			A. 在堆里存放着几乎所有的 Java 对象实例，在 GC 执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为已经死亡
			的对象，GC 才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程可以称为垃圾标记阶段
			B. 那么在 JVM 中究竟是如何标记一个死亡对象的，简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。
			C. 判断对象存活一般有两种方式：引用计数算法和可达性分析算法
		② 方式一：引用计数算法
			A. 引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况
			B. 对一个对象 A，只要有任何一个对象引用了 A，则 A 的引用计数器就加 1；当引用失效时，引用计数器就减 1。只要对象 A 的引用计数器的值为 0，即表示对
			象 A 不可能再被使用，可进行回收
			C. 优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。
			D. 缺点：
				a. 它需要单独的字段存储计数器，这样的做法增加了存储空间的开销
				b. 每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了时间开销
				c. 引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一条致命缺陷，导致在 Java 的垃圾回收器中没有使用这类算法
				d. 循环引用
							+--------+		 +--------+		  +--------+
							|  next  |		 |  next  |		  |  next  |
					P ---->	+--------+ ----> +--------+ ----> +--------+
							| rc = 2 |		 | rc = 1 |		  | rc = 1 |
							+--------+		 +--------+		  +--------+
								↑								   |
								+----------------------------------+
						 +--------------------------------------------------+
						 |	+--------+		 +--------+		  +--------+	|
						 |	|  next  |		 |  next  |		  |  next  |	|
					P =  |	+--------+ ----> +--------+ ----> +--------+	|
					null |	| rc = 1 |		 | rc = 1 |		  | rc = 1 |	| 内存泄露
						 |	+--------+		 +--------+		  +--------+	|
						 |		↑								   |		|
						 |		+----------------------------------+		|
						 +--------------------------------------------------+
			E. 小结
				a. 引用计数算法，是很多语言的资源回收选择，例如 python，它更是同时支持引用计数算法和垃圾收集机制
				b. 具体哪种最优是要看场景的，业界有大规模实践中保留引用计数机制，以提高吞吐量的尝试
				c. Java 并没有选择引用计数算法，是因为其存在一个基本的难题，也就是很难处理循环引用关系
				d. Python 如何解决循环引用
					(1) 手动解除：很好理解，就是在合适的时机，解除引用关系
					(2) 使用弱引用 weakref，weakref 是 Python 提供的标准库，旨在解决循环引用
	2. 标记阶段：可达性分析算法
		① 方式二：可达性分析（根搜索算法、追踪性垃圾收集）
			A. 相对引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行效率高等特点，更重要的是该算法可以有效地解决在引用计数算法中循环引用的问题，防止
			内存泄露的发生
			B. 相较于引用计数算法，这里的可达性分析就是 Java、C# 选择的。这种类型的垃圾收集通常叫作追踪性垃圾收集（Tracing Garbage Collection）
			C. 所谓“GC Roots”根集合就是一组必须活跃的引用
			D. 基本思路：
				a. 可达性分析算法是以根对象集合（GC Roots）为起始点，按照从上到下的方式搜索被根对象集合所连接的目标对象是否可达
				b. 使用可达性分析算法后，内存中的存活对象都会被根据对象集合直接或间接连接着，搜索所走过的路径称为引用链（Reference Chain）
				c. 如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象已经死亡，可以标记为垃圾对象
				d. 在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象
				+-------------------------------------------------------------------+
				|		+----------+												|
				|		| GC Roots |												|
				|		+----------+									GC Root Set |
				+------------+------------------------------------------------------+
							 ↓
						+----------+							+----------+
						| Object 1 |							| Object 5 |
						+----------+							+----------+ 
							 |								 		 |
					+--------+--------+						+--------+--------+
					↓				  ↓						↓				  ↓
			  +----------+		+----------+		  +----------+		 +----------+
			  | Object 2 | 		| Object 3 |		  | Object 6 | 		 | Object 7 |
			  +----------+		+----------+		  +----------+		 +----------+
					↓
			  +----------+
			  | Object 4 | 
			  +----------+
						存活对象								可回收对象
		② GC Roots：在 Java 语言中，GC Roots 包括以下几类元素
			A. 虚拟机栈中引用的对象。比如：各个线程被调用的方法中使用到的参数、局部变量等
			B. 本地方法栈内 JNI（通常说本地方法）引用的对象
			C. 方法区中类静态属性引用的对象。比如：Java 类的引用类型静态变量
			D. 方法区中常量引用的对象。比如：字符串常量池（String Table）里的引用
			E. 所有被同步锁 synchronizde 持有的对象
			F. Java 虚拟机内部的引用。基本数据类型对应的 Class 对象，一些常驻的异常对象（如：NullPointerException、OutOfMemoryError），系统类加载器等。
			G. 反映 Java 虚拟机内部情况的 JMXBean、JVMTI 中注册的回调、本地代码缓存
			H. 除了这些固定的 GC Roots 集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整 GC Roots
			集合。比如：分代收集和局部回收（Partial GC）。如果只针对 Java 堆中地某一块区域进行垃圾回收（比如：典型地只针对新生代），必须考虑到内存区域是虚拟
			机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象加入 GC Roots 集合中去考虑，
			才能保证可达性分析的准确性
			I. 小技巧：由于 Root 采用栈方式存放变量和指针，所以如果一个指针，它保证了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个 Root
		③ 注意：
			A. 如果要使用可达性分析算法来判断内存是否回收，那么分析工作必须在一个能保障一致性的快照中进行。这点不满足的话分析结果的准确性就无法保证
			B. 这点也是导致 GC 进行时必须“Stop The World”的一个重要原因。即使是号称（几乎）不会发生停顿的 CMS 收集器中，枚举根节点时也是必须要停顿的	
	3. 对象的 finalization 机制
		① 概述
			A. Java 语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑
			B. 当垃圾回收器发现引用指向一个对象时，即：垃圾回收此对象之前，总会先调用这个对象的 finalize() 方法
			C. finalize() 方法允许在子类中被重写，用于在对象被回收时进行资源释放。通常在这个方法中进行一些资源释放和清理工作，比如关闭文件、套接字和数据库连
			接等。
			D. 永远不要主动调用某个对象的 finalize() 方法，应该交给垃圾回收器机制调用。理由包括如下三点：
				a. 在调用 finalize() 方法时可能会导致对象复活
				b. finalize() 方法的执行时间是没有保障的，它完全由 GC 线程决定，极端的情况下，若不发生 GC，则 finalize() 方法将没有执行机会
				c. 一个糟糕的 finalize() 会严重影响 GC 的性能
			E. 从功能上来说，finalize() 方法与 C++ 中的析构函数比较相似，但是 Java 采用的是基于垃圾回收器的自动内存管理机制，所以 finalize() 方法在本质上不
			同于 C++ 中的析构函数
			F. 由于 finalize() 方法的存在，虚拟机中的对象一般处于三种可能的状态
			G. 如果从所有的根节点都无法访问到某个对象，说明对象已经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是“非死不可”的，这时候它们暂时处
			于“缓刑”阶段。一个无法触及的对象有可能在某一个条件下“复活”自己，如果是这样，那么对它的回收就是不合理的，为此，定义虚拟机中的对象可能的三种状态。
			如下：
				a. 可触及的：从根节点开始，可以达到这个对象。
				b. 可复活的：对象的所有引用都被释放，但是对象有可能在 finalize() 中复活
				c. 不可触及的：对象的 finalize() 被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能复活，因为 finalize() 只会被调用一次
			H. 以上三种状态中，是由于 finalize() 方法的存在，进行区分的。只有在对象不可触及时才可以被回收。
		② 具体过程：判定一个对象 objA 是否可回收，至少要经历两次标记过程
			A. 如果对象 objA 到 GC Roots 没有引用链，则进行第一次标记
			B. 进行筛选，判断此对象是否有必要执行 finalize() 方法
				a. 如果对象 objA 没有重写 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，则虚拟机视为“没有必要执行”，objA 被判定为不可触及的。
 				b. 如果对象 objA 重写了 finalize() 方法，且还未执行过，那么 objA 会被插入到 F-Queue 队列中，由一个虚拟机自动创建的、低优先级的 Finalizer 线
				程触发其 finalize() 方法执行
				c. finalize() 方法是对象逃逸死亡的最后机会，稍后 GC 会对 F-Queue 队列中的对象进行第二次标记。如果 objA 在 finalize() 方法中与引用链上的任何
				一个对象建立了联系，那么在第二次标记时，objA 会被移出“即将回收”集合。之后，对象会再次出现没有引用存在的情况。在这个情况下，finalize() 方法
				不会被再次调用，对象会直接变成不可触及的状态，也就是说，一个对象的 finalize() 方法只会被调用一次。
		③ 代码演示可复活的对象
			public class CanReliveObj {

				public static CanReliveObj obj;

				@Override
				protected void finalize() throws Throwable {
					super.finalize();
					System.out.println("调用当前类重写的 finalize() 方法");
					// 当前待回收的对象在 finalize() 方法中与引用链上的一个对象建立了联系
					obj = this;
				}

				public static void main(String[] args) {
					try {
						obj = new CanReliveObj();
						// 断开与引用链上联系
						obj = null;
						// 调用垃圾回收器
						System.gc();
						System.out.println("第一次 GC");
						// 因为 Finalizer 线程优先级很低，暂停2秒，等代 Finalizer 线程的执行
						Thread.sleep(2000);
						if (obj == null) {
							System.out.println("obj is dead");
						} else {
							System.out.println("obj is still alive");
						}
						// 再次断开引用链上联系
						obj = null;
						// 调用垃圾回收器
						System.gc();
						System.out.println("第二次 GC");
						// 由于 finalize() 方法只调用一次，因此这次 obj 无法与引用链上的对象建立了联系
						Thread.sleep(2000);
						if (obj == null) {
							System.out.println("obj is dead");
						} else {
							System.out.println("obj is still alive");
						}
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
	4. MAT 与 JProfiler 的 GC Roots 溯源
		① MAT
			A. MAT 是 Memory Analyzer 的简称，它是一款功能强大的 Java 堆内存分析器。用于查找内存泄露以及查看内存消耗情况
			B. MAT 是基于 Eclipse 开发的，是一款免费的性能分析工具
			C. 可以在 http://www.eclipse.org/mat/ 下载并使用 MAT
		② 使用 MAT 查看 GC Roots
			A. 代码
				public class GCRootsTest {

					public static void main(String[] args) {
						List<String> numList = new ArrayList<>();
						Date date = new Date();

						for (int i = 0; i < 100; i++) {
							numList.add(String.valueOf(i));
							try {
								Thread.sleep(10);
							} catch (InterruptedException ignore) {}
						}

						System.out.println("数据添加完毕，请操作");
						Scanner scanner = new Scanner(System.in);
						scanner.next();

						numList = null;
						date = null;

						System.out.println("numList、date 已置空，请操作");
						scanner.next();
						System.out.println("结束");
					}
				}
			B. 使用 jvisualvm 下载当前堆的 dump 文件
				a. 运行程序
				b. 打开 jvisualvm，在左侧导航栏的应用程序找到本地正在运行的进程
				c. 选择监视，在当前页的监视栏点击堆 Dump，生成当前堆信息的临时文件
				d. 在当前进行下生成临时文件，右键文件，选择另存为，将临时文件保存到本地
			C. 使用 MAT 查看 GC Roots
				a. Eclipse GC  Roots 说明：https://help.eclipse.org/latest/index.jsp?topic=org.eclipse.mat.ui.help
				b. 打开 Memory Analyzer，通过菜单栏的 Open File… 打开生成的 dump 文件
				c. 在右侧工具栏点击 Open Query Browser 下拉，选择 Java Basics，选择 GC Roots
				d. 找到 Thread，java.lang.Thread 的 main thread
		③ 使用 JProfiler 的 GC Roots 溯源
			A. 下载安装并破解 JProfiler，并在 IDEA 中安装 JProfiler插件
			B. 使用 JProfiler 的 GC Roots 溯源
				a. 在当前程序中，通过 IDEA 的 JProfiler 插件运行当前程序
				b. 选择 Live memory 查看当前内存，在 All Objects 中可以看到当前应用程序的所有对象的个数
				c. 选择菜单栏 View，选择 Mark Current Values，标记当前对象的值，关注当前对象变化比较大的值，当某些对象个数比较大，或者占用比较多的内存时，
				可以点击工具栏的 Run GC，如果始终回收不了，则需要进行格外的关注，可能会造成内存溢出
				d. 选择当前对象个数最多的 char[]，右键选择 Show Selection In Heap Walkers，单独查看 char[]
				e. 选择 References，因为我们更关心对象的引用
				f. 可以对每个对象进行溯源，选择 char[]["添加完毕，请操作……，选择 Incoming references，选择 Show Paths To GC Root 查看当前对象与哪些 GC
				Roots 相关联
		④ 使用 JProfiler 分析 OOM
			A. 代码
				public class HeapOOM {

					byte[] buffer = new byte[1024 * 1024]; // 1 MB

					public static void main(String[] args) {
						List<HeapOOM> list = new ArrayList<>();
						int count = 0;
						while (true) {
							list.add(new HeapOOM());
							count++;
						}
					}
				}
			B. 设置运行参数：-Xms10m -Xmx10m -XX:+HeapDumpOnOutOfMemoryError
			C. 在当前工程下生成 java_pid67284.hprof 文件，使用 JProfiler 打开
	5. 清除阶段：标记-清除算法
		① 垃圾清除阶段
			A. 当成功区分出内存中存活对象和死亡对象后，GC 接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象
			分配内存
			B. 目前在 JVM 中比较常见的三种垃圾收集算法是标记-清除算法（Mark-Sweep）、复制算法（Copying）、标记-压缩算法（或标记-整理、Mark-Compact）
		② 标记-清除算法（Mark-Sweep）
			A. 背景：标记-清除算法（Mark-Sweep）是一种非常基础和常见的垃圾收集算法，该算法被 J.McCarthy 等人在 1960 年提出并应用于 Lisp 语言
			B. 执行过程
				a. 当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被称为 stop the world），然后进行两项工作，第一项是标记，第
				二项则是清除
				b. 标记：Collector 从引用根节点开始遍历，标记所有被引用的对象。一般是在对象的 Header 中记录为可达对象
				c. 清除：Collector 对堆内存从头到尾进行线性遍历，如果发现某个对象在其 Header 中没有标记为可达对象，则将其回收
			C. 缺点
				a. 效率不算高
				b. 在进行 GC 的时候，需要停止整个应用程序，导致用户体验差
				c. 这种方式清理出来的空闲内存是不连续的，产生内存碎片。需要维护一个空闲列表
			D. 何为清除：这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里。下次有新的对象需要加载时，判断垃圾的位置空间是否
			够，如果够，就存放
	6. 清除阶段：复制算法
		① 背景：为了解决标记-清除算法在垃圾收集效率方面的缺陷，M.L.Minsky 于 1963 年发表著名的论文，“使用双存储区的 Lisp 语言垃圾收集器 CA LISP Garbage
		Collector Algorithm Using Serial  Secondary Storage）”。M.L.Minsky 在该论文中描述的算法被人们称为复制（Copying）算法，它也被 M.L.Minsky 本人成功
		地引入到了 Lisp 语言地一个实现版本中。
		② 核心思想：将活着的内存空间分为两块，每块只使用其中一次，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内
		存块中的所有对象，交换两个内存的角色，最后完成垃圾回收
		③ 优点：
			A. 没有标记和清除过程，实现简单，运行高效
			B. 复制过去以后保证空间的连续性，不会出现“碎片问题”
		④ 缺点
			A. 此算法的缺点也是很明显的，就是需要两倍的内存空间
			B. 对于 G1 这种分拆成为大量 region 的 GC，复制而不是移动，意味着 GC 需要维护 region 之间对象引用关系，不管是内存占用或者时间开销也不小
		⑤ 特别的：如果系统中的垃圾对象很多，复制算法不会太理想。因为复制算法需要复制的存活对象数量并不会太大，或者说非常低才行
		⑥ 应用场景：在新生代，对常规应用的垃圾回收，一次通常可以回收 70%-99% 的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种算法回收新生代
	7. 清除阶段：标记-压缩算法
		① 背景
			A. 复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如
			果依然使用复制算法，由于存活对象较多，复制成本也将提高。因此，基于老年代垃圾回收的特性，需要使用其他的算法
			B. 标记-清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以 JVM 的设计者需要在此基础上进
			行改造。标记-压缩（Mark-Compact）算法由此诞生
			C. 1970 年前后，G.L.Steele、C.J.Chene 和 D.S.Wise 等研究者发布标记-压缩算法。在许多现代的垃圾收集器中，人们都使用了标记-压缩算法或其改进版本。
		② 执行过程
			A. 第一阶段和标记-清除算法一样，从根节点开始标记所有被引用对象
			B. 第二阶段将所有的存活对象压缩到内存的一端，按顺序排放
			C. 之后，清理边界外所有的空间
		③ 概述
			A. 标记-压缩算法的最终效果等同于标记-清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为 标记-清除-压缩（Mark-Sweep-Compact）算法。
			B. 二者的本质差异在于标记-清除算法是一种非移动式的回收算法，标记-压缩算法是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。
			C. 可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存回被清理掉。如此一来，当我们需要给新对象分配内存时，JVM 只需要持有
			一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。
		④ 指针碰撞（Bump the pointer）：如果内存空间以规整和有序的方式分布，即已用和未用的内存都各自一边，彼此之间维系着一个记录下一次分配起始点的标记指针，
		当为新对象分配内存时，只需要通过修改指针的偏移量将新对象分配在第一个空闲内存位置上，这种分配方式就叫指针碰撞
		⑤ 优点
			A. 消除了标记-清除算法当中，内存区域分散的缺点，需要给新对象分配内存时，JVM 只需要持有一个内存的起始地址即可。
			B. 消除了复制算法当中，内存减半的高额代价
		⑥ 缺点
			A. 从效率上来说，标记-整理算法要低于复制算法
			B. 移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址
			C. 移动过程中，需要全程暂停用户应用程序。即：STW
	8. 小结
		① 对比三种算法
			+-----------+--------------------+--------------------+-----------------------------------------+
			|			| 标记-清除算法 	 | 标记-压缩算法 	  | 复制算法								|
			+-----------+--------------------+--------------------+-----------------------------------------+
			| 速度		| 中等				 | 最慢			 	  | 最快									|
			+-----------+--------------------+--------------------+-----------------------------------------+
			| 空间开销  | 少（但会堆积碎片） | 少（不会堆积碎片） | 通常需要活对象的 2 倍大小（不堆积碎片） |
			+-----------+--------------------+--------------------+-----------------------------------------+
			| 移动对象	| 否		 		 | 是				  | 是										|
			+-----------+--------------------+--------------------+-----------------------------------------+
		② 效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存
		③ 而为了尽量兼顾上面提到的三个指标，标记-整理算法相对来说更平滑一些，但是效率上不尽人意，它比复制算法多了一个标记阶段，比标记-清除多了一个整理内存
		的阶段
	9. 分代收集算法
		① 前面所有这些算法中，并没有一种算法可以完全完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生
		② 分代收集算法，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的收集方式，以便提高回收效率。一般是把
		 Java 堆分为 新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，以提高回收效率
		③ 在 Java 程序运行的过程中，会产生大量的对象，其中有些对象是与业务信息相关，比如 Http 请求中的 Session 对象、线程、Socket 连接，这类对象跟业务直接
		挂钩，因此生命周期比较长。但是还有一些对象，主要是程序运行过程中生成的临时变量，这些对象生命周期会比较短，比如：String 对象，由于其不变类的特性，
		系统会产生大量的这些对象，有些对象甚至只用一次即可回收
		④ 目前几乎所有的 GC 都是采用分代收集（Generational Collecting）算法执行垃圾回收的
		⑤ 在 HotSpot中，基于分代的概念，GC 所使用的内存回收算法必须结合年轻代和老年代各自的特点
			A. 年轻代（Young Gen）
				a. 年轻代特点：区域相对老年代较小，对象生命周期短、存活率低，回收频繁
				b. 这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小相关，因此很适应于年轻代的回收。而复制算法内存利用率不高的
				问题，通过 HotSpot 中的两个 Survivor 的设计得到缓解。
			B. 老年代（Tenured Gen）
				a. 老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。
				b. 这种情况存在大量存活率高的对象，复制算法明显变得不合适，一般是由标记-清除或者标记-清除与标记-整理的混合实现
					(1) Mark 阶段的开销与存活对象的数量成正比
					(2) Sweep 阶段的开销与所管理区域的大小成正相关
					(3) Compact 阶段的开销与存活对象的数据成正比
		⑥ 以 HotSpot 中的 CMS 回收器为例，CMS 是基于 Mark-Sweep 实现的，对于对象的回收效率很高。而对于碎片问题，CMS 采用基于 Mark-Compact 算法的 Serial
		Old 回收器作为补偿措施：当内存回收不佳（碎片导致的 Concurrent Mode Failure 时），将采用 Serial Old 执行 Full GC 以达到对老年代内存的整理
		⑦ 分代的思想被现有的虚拟机广泛使用。几乎所有的垃圾回收器都区分新生代和老年代
	10. 增量收集算法、分区算法
		① 上述现有的算法，在垃圾回收过程中，应用软件将处于一种 Stop The World 的状态。在 Stop The World 状态下，应用程序所有的线程都会挂起，暂停一切正常
		的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算
		法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。
		② 基本思想
			A. 如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区
			域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成
			B. 总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。增量收集算法通过对线程间冲突的妥善处理，允许垃圾收集线程以分阶段方式完成标记、
			清理或复制工作
		③ 缺点：使用这种方式，由于在垃圾回收过程这，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得
		垃圾回收的总体成本上升，造成系统吞吐量的下降
		④ 分区算法
			A. 一般来说，在相同条件下，堆空间越大，一次 GC 时所需要的时间就越长，有关 GC 产生的停顿也越长。为了更好地控制 GC 产生的停顿时间，将一块大的内
			存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次 GC 所产生地停顿
			B. 分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间 region
			C. 每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间
		⑤ 注意，这些只是基本的算法思路，实际 GC 实现过程要复杂得多，目前还在发展中的前沿 GC 都是复合算法，并且并行和并发兼备。
十六、垃圾回收相关概念
	1. System.gc() 的理解
		① 在默认的情况下，通过 System.gc() 或者 Runtime.getRuntime.gc() 的调用，会显示触发 Full GC，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用
		的内存
		② 然而 System.gc() 调用附带一个免责声明，无法保证对垃圾收集器的调用，使用 System.runFinalization()，强制调用对象的 finalize() 方法
		③ JVM 实现者可以通过 System.gc() 调用来决定 JVM 的 GC 行为。而一般情况下，垃圾回收应该是自动进行的，无须手动触发，否则就太过于麻烦了。在一些特殊的
		情况下，如我们正在编写一个性能基准，我们可以在运行之间调用 System.gc()。
	2. 内存溢出与内存泄露
		① 概念
			A. 内存溢出相对于内存泄露来说，尽管更容易被理解，但是同样的，内存溢出也是引发程序奔溃的罪魁祸首之一
			B. 由于 GC 一直在发展，所有一般情况下，除非应用程序占用的内存增长速度非常快，造成垃圾回收已经跟不上内存消耗的速度，否则不太容易出现 OOM 的情况
			C. 大多数情况下，GC 会进行各种年龄段的垃圾回收，实在不行了就来一次独占式的 Full GC 操作，这时候会回收大量的内存，共应用程序继续使用
			D. javadoc 中对 OutOfMemoryError 的解释是，没有空闲内存，并且垃圾收集器也无法提供更多内存。
		② 首先说没有空闲内存的情况：说明 Java 虚拟机的堆内存不够。原因有二：
			A. Java 虚拟机的堆内存设置不够
				a. 比如：可能存在内存泄露问题；也有可能就是堆的大小不合理，比如要处理可观的数据量，但是没有显式指定 JVM 堆大小或者指定数值偏小。可以通过参
				数“-Xms”、“-Xmx”来调整
			B. 代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）
				a. 对于老版本的 Oracle JDK，因为永久代的大小是有限的，并且 JVM 对永久代垃圾回收（如：常量池回收、卸载不再需要的类型）非常不积极，所以当我们
				不断添加新类型的时候，永久代出现 OutOfMemoryError 也非常多见，尤其是在运行时存在大量动态类型生成的场合；类似 intern 字符串缓存占用太多空间，
				也会导致 OOM 问题。对应的异常信息会标记出来和永久代相关：java.lang.OutOfMemoryError: PermGen space
				b. 随着元数据区的引入，方法区内存已经不再那么窘迫，所以相应的 OOM 有所改观，出现 OOM，异常信息则变成了：java.lang.OutOfMemoryError: Metaspace
				直接内存不足，也会导致 OOM 
				c. 这里面隐含着一层意思是，在抛出 OutOfMemoryError 之前，通常垃圾收集器会被触发，尽其所能去清理出空间
					(1) 例如：在引用机制分析中，涉及到 JVM 会去尝试回收软引用指向的对象等
					(2) 在 java.nio.BIts.reserveMemory() 方法中，我们能清楚的看到，System.gc() 会被调用，以清理空间
				d. 当然，也不是任何情况下垃圾收集器都会被触发的
					(1) 比如：我们去分配一个超大对象，类似一个超大数组超过堆的最大值，JVM 可以判断出垃圾收集器并不能解决这个问题，所以直接抛出 OutOfMemoryError
		③ 内存泄露（Memory Leak）
			A. 也称作“存储渗漏”。严格来说，只有对象不会再被程序用到了，但是 GC 又不能回收它们的情况下，才叫内存泄露
			B. 但实际情况很多时候一些不太友好的实践（或疏忽）会导致对象的生命周期变得很长甚至导致 OOM，也可以叫做宽泛意义上的“内存泄露”
			C. 尽管内存泄露并不会立刻引起程序奔溃，但是一旦发生内存泄露，程序中的可用内存就会被逐步蚕食，直至耗尽所有内存，最终出现 OOM，导致程序奔溃
			D. 注意，这里的存储空间并不是指物理内存，而是指虚拟机内存大小，这个虚拟机内存大小取决于磁盘交换区设定的大小
		④ 举例
			A. 单例模式：单例的生命周期和应用程序是一样长的，所以单例程序中，如果持有对外部对象的引用的话，那么这个外部对象是不能被回收的，则会导致内存泄露
			B. 一些提供 Close 的资源未关闭导致内存泄露：数据库连接（dataSource.getConnectiom），网络连接（socket）和 io 连接必须手动 close，否则是不能被回收的
	3. Stop The World
		① Stop-the-World，简称 STW，指的是 GC 事件发生过程中，会产生应用程序的停顿。停顿产生时整个应用程序线程都会被暂停，没有任何响应，有点像卡死的感觉，这
		个停顿称为 STW。可达性分析算法中枚举根节点（GC Roots）会导致所有 Java 执行线程停顿。
			A. 分析工作必须在一个能确保一致性的快照中进行
			B. 一致性指整个分析期间整个执行系统看起来像被冻结在某个时间点上
			C. 如果出现分析过程中对象引用关系还在不断变化，则分析结果的准确性无法保证
		② 被 STW 中断的应用程序线程会在完成 GC 之后恢复，频繁中断会让用户感觉像是网速不快造成电影卡带一样，所以需要减少 STW 的发生
		③ STW 事件和采用哪款 GC 无关，所有的 GC 都有这个事件
		④ 哪怕是 G1 也不能完全避免 Stop-the-world 情况的发生，只能说垃圾回收器越来月优秀，回收效率越来越高，尽可能地缩短了暂停时间
		⑤ STW 是 JVM 在后台自动发起和自动完成的，在用户不可见的情况下，把用户正常的工作线程全部停掉
		⑥ 开发中不要用 System.gc()，会导致 Stop-the-World 的发生
	4. 垃圾回收的并行与并发
		① 并发（Concurrent）
			A. 在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理器上运行
			B. 并发不是真正意义上的“同时进行”，只是 CPU 把一个时间段划分成几个时间片（时间区间），然后在这几个时间区间之间来回切换，由于 CPU 处理的速度非常快，
			只要时间间隔处理得当，即可让用户感觉是多个应用程序同时在进行
		② 并行（Parallel）
			A. 当系统有一个以上 CPU 时，当一个 CPU 执行一个进程时，另一个 CPU 可以执行另一个进行，两个进程互不抢占 CPU 资源，可以同时进行，称之为并行（Parallel）
			B. 其实决定并行的因素不是 CPU 的数量，而是 CPU 的核心数量，比如一个 CPU 多个核也可以并行
			C. 适合科学计算，后台处理等弱交互场景
		③ 并发 VS 并行
			A. 并发，指的是多个事情，在同一个时间段内同时发生
			B. 并行，指的是多个事情，在同一个时间点上同时发生
			C. 并发的多个任务之间是互相抢占资源的
			D. 并行的多个任务之间是不相抢占资源的
			E. 只有在多个 CPU 或者一个 CPU 多核的情况下，才会发生并行，否则，看似同时发生的事情，其实都是并发执行的
		④ 垃圾回收的并发与并行
			A. 并发和并行，在谈论垃圾收集器的上下文语境中，它们可以解释如下：
				a. 并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态。如：ParNew、Parallel Scavenge、Parallel Old
				b. 串行（Serial）
					(1) 相较于并行的概念，单线程执行
					(2) 如果内存不够，则程序暂停，启动 JVM 垃圾回收器进行垃圾回收。回收完，再启动程序的线程
				c. 并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），垃圾回收线程在执行时不会停顿用户程序的运行
					(1) 用户程序在继续运行，而垃圾收集程序运行于另一个 CPU 上
					(2) 如：CMS、C1
	5. 安全点与安全区域
		① 安全点（Safepoint）
			A. 程序执行时并非在所有地方都能停顿下来开始 GC，只有在特定的位置才能停顿下来开始 GC，这些位置称为“安全点”
			B. Safe Point 的选择很重要，如果太少可能导致 GC 等待的时间太长，如果太频繁可能导致运行时的性能问题。大部分指令的执行时间都非常短暂，通常会根据“是
			否具有让程序长时间执行的特征”为标准。比如：选择一些执行时间较长的指令作为 Safe Point，如方法调用、循环跳转和异常跳转等。
			C. 如何在 GC 发生时，检查所有线程都跑到最近的安全点停顿下来
				a. 抢先式中断（目前没有虚拟机采用了）：首先中断所有线程，如果还有线程不在安全点，就恢复线程，让线程跑到安全点
				b. 主动式中断：设置一个中断标志，各个线程运行到 Safe Point 的时候主动轮询这个标志，如果中断标志为真，则将自己进行中断挂起
		② 安全区域（Safe Region）
			A. Safepoint 机制保证了程序执行时，在不太长的时间内就会遇到可进入 GC 的 Safepoint。但是，程序“不执行”时，例如线程处于 Sleep 状态或 Blocked 状态，
			这时候线程无法响应 JVM 的中断请求，“走”到安全点去中断挂起，JVM 也不太可能等待线程被唤醒。对于这种情况，就需要安全区域来解决
			B. 安全区域是指一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始 GC 都是安全的。我们也可以把 Safe Region 看作是被扩展了的
			Safepoint
			C. 实际执行时
				a. 当线程运行到 Safe Region 的代码时，首先标识已经进入了 Safe Region，如果这段时间内发生 GC，JVM 会忽略标识为 Safe Region 状态的线程
				b. 当线程即将离开 Safe Region 时，会检查 JVM 是否已经完成 GC，如果完成了，则继续运行，否则线程必须等待直到收到可以安全离开 Safe Region 的信号
	6. 再谈引用：强引用
		① 再谈引用
			A. 我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存中；如果内存空间在进行垃圾收集后还是很紧张，则可以抛弃这些对象
			B. 强引用、软引用、弱引用、虚引用有什么区别？具体使用场景是什么？（既偏门又非常高频的面试题）
				a. 在 JDK1.2 版之后，Java 对引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、
				虚引用（Phantom Reference）4 种，这 4 种引用强度依次逐渐减弱
				b. 除强引用外，其他 3 种引用均可以在 java.lang.ref 包中找到它们的身影。如下图，显示了这 3 种引用类型对应的类，开发人员可以在应用程序中直接使用
					+ Object - java.lang
					++ Reference<T> - java.lang.ref
					++++ FinalReference<T> - java.lang.ref
					++++ PhantomReference<T> - java.lang.ref
					++++ SoftReference<T> - java.lang.ref
					++++ WeakReference<T> - java.lang.ref
			C. Reference 子类中只有终结器引用是包内可见的，其他 3 种引用类型均为 public，可以在应用程序中直接使用
				a. 强引用（Strong Reference）：最传统的“引用”的定义，是指在程序代码中普遍存在的引用赋值，即类似“Object obj = new Object()”这种引用关系。无论任
				何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象
				b. 软引用（Soft Reference）：在系统将要发生内存溢出之前，将会把这些对象列入回收范围之中进行第二次回收。如果这次回收后还没有足够的内存，才会抛
				出内存溢出异常
				c. 弱引用（Weak Reference）：被弱引用关联的对象只能生存到下一次垃圾收集之前。当垃圾收集器工作时，无论内存空间是否足够，都会回收掉被弱引用关联
				的对象
				d. 虚引用（Phantom Reference）：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来获得一个对象的实例。为一个对象设置
				虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知
		② 强引用（Strong Reference）-- 不回收
			A. 概述
				a. 在 Java 程序中，最常见的引用类型是强引用（普通系统 99% 以上都是强引用），也就是最常见的普通对象引用，也是默认的引用类型
				b. 当在 Java 语言中使用 new 操作符创建一个新的对象，并将其赋值给一个变量的时候，这个变量就成为指向该对象的一个强引用
				c. 强引用的对象是可触及的，垃圾收集器就永远不会回收掉被引用的对象
				d. 对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以当作垃圾被收集了，当然具体
				回收时机还是要看垃圾收集策略
				e. 相对的，软引用、弱引用和虚引用的对象是软可触及的、弱可触及的和虚可触及的，在一定的条件下，都是可以被回收的。所以，强引用是造成 Java 内存泄露
				得到主要原因之一
			B. 强引用例子
				a. StringBuffer str = new StringBuffer("hello");
				b. 局部变量 str 指向 StringBuffer 实例所在的堆空间，通过 str 可以操作该实例，那么 str 就是 StringBuffer 实例的强引用
			C. 强引用具备以下特点
				a. 强引用可以直接访问目标对象
				b. 强引用所指向的对象在任何时候都不会被系统回收，虚拟机宁愿抛出 OOM 异常，也不会回收强引用所指向的对象
				c. 强引用可能导致内存泄露
	7. 再谈引用：软引用
		① 软引用（Soft Reference）-- 内存不足即回收，概述
			A. 软引用是用来描述一些还有用，但非必需的对象。只要软引用关联着的对象，在系统将要发生 OOM 异常前，会把这些对象列进回收范围之中进行第二次回收，如果
			这次回收还没有足够的内存，才会抛出 OOM 异常
			B. 软引用通常用来实现内存敏感的缓存。比如：高速缓存就有用到软引用。如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的
			同时，不会耗尽内存
			C. 垃圾回收器在某个时刻决定回收软可达的对象时，会清理软引用，并可选地把引用存放到一个引用队列（Reference Queue）
			D. 类似弱引用，只不过 Java 虚拟机会尽量让软引用地存活时间长一些，迫不得已才清理
		② 举例
			public class ReferenceTest {

				public static class User {
					private Integer id;
					private String name;

					public User(Integer id, String name) {
						this.id = id;
						this.name = name;
					}

					@Override
					public String toString() {
						return "User{" +
								"id=" + id +
								", name='" + name + '\'' +
								'}';
					}
				}

				public void softReferenceTest() {
					// 创建对象，建立软引用
					SoftReference<User> softReference = new SoftReference<>(new User(1001, "LiXL"));
					// 从软引用中重新获得强引用对象
					System.out.println(softReference.get());
					System.gc();
					System.out.println("After GC");
					// 垃圾回收之后获得软引用中的对象，由于堆空间内存足够，所以不会回收软引用可达对象
					System.out.println(softReference.get());

					try {
						// 让系统认为内存资源紧张或者不足
						byte[] bytes = new byte[1024 * 7168 - 1024 * 606];
					} catch (Throwable e) {
						e.printStackTrace();
					} finally {
						// 在 OOM 之前，垃圾收集器会回收软引用的可达对象
						System.out.println(softReference.get());
					}
				}
			public static void main(String[] args) {
				ReferenceTest referenceTest = new ReferenceTest();
				referenceTest.softReferenceTest();
			}
		}
	8. 再谈引用：弱引用
		① 弱引用（Weak Reference）-- 发现即回收，概述
			A. 弱引用也是用来描述那些非必需对象，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。在系统 GC 时，只要发现弱引用，不管系统堆空间使用是否充足，
			都会回收掉只被弱引用关联的对象
			B. 但是，由于垃圾回收器的线程通常优先级很低，因此，并不一定能很快地发现持有弱引用地对象。在这种情况下，弱引用对象可以存在较长地时间
			C. 弱引用和软引用一样，在构造器引用时，也可以指定一个引用队列，当弱引用对象被回收时，就会加入指定得到引用队列，通过这个队列可以跟踪对象地回收情况
			D. 软引用、弱引用都非常适合来保存那些可有可无地缓存数据。如果这么做，当系统内存不足时，这些缓存数据会被回收，不会导致内存溢出。而当系统内存资源充
			足时，这些缓存数据又可以存在相当长的时间，从而起到加速系统的作用
		② 举例：
			public class ReferenceTest {

				public static class User {
					private Integer id;
					private String name;

					public User(Integer id, String name) {
						this.id = id;
						this.name = name;
					}

					@Override
					public String toString() {
						return "User{" +
								"id=" + id +
								", name='" + name + '\'' +
								'}';
					}
				}

				public void weakReferenceTest() {
					// 构造了弱引用
					WeakReference<User> weakReference = new WeakReference<>(new User(1002, "LiLX"));
					// 从弱引用中重新获取对象
					System.out.println(weakReference.get());

					System.gc();
					// 不管当前内存空间足够与否，都会回收它的内存
					System.out.println("After GC");
					// 重新尝试从弱引用中获取对象
					System.out.println(weakReference.get());
				}

				public static void main(String[] args) {
					ReferenceTest referenceTest = new ReferenceTest();
					referenceTest.weakReferenceTest();
				}
			}
			A. 弱引用对象与软引用对象的最大不同就在于，当 GC 在进行回收时，需要通过算法检查是否回收软引用对象。而对于弱引用对象，GC 总是进行回收。弱引用对象
			更容易、更快被 GC 回收
	9. 再谈引用：虚引用
		① 虚引用（Phantom Reference）-- 对象回收跟踪，概述
			A. 也称为“幽灵引用”或者“幻影引用”，是所有引用类型中最弱的一个
			B. 一个对象是否有虚引用的存在，完全不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它和没有引用几乎是一样的，随时都可能被垃圾回收器回收。
			C. 它不能单独使用，也无法通过虚引用来获取被引用的对象。当试图通过虚引用的 get() 方法取得对象时，总是 null
			D. 为一个对象设置虚引用关联的唯一目的在于跟踪垃圾回收过程。比如：能在这个对象被收集器回收时收到一个系统通知
			E. 虚引用必须和引用队列一起使用。虚引用在创建时必须提供一个引用队列作为参数。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对
			象后，将这个虚引用加入引用队列，以通知应用程序对象的回收情况
			F. 由于虚引用可以跟踪对象的回收时间，因此，也可以将一些资源释放操作放置在虚引用中执行和记录
		② 举例
			public class ReferenceTest {

 

			// 当前类对象的声明
			public static ReferenceTest obj;
			// 引用队列
			public static ReferenceQueue<ReferenceTest> phantomQueue = null;

			public static class CheckRefQueue extends Thread {

				@Override
				public void run() {
					while (true) {
						if (phantomQueue != null) {
							PhantomReference<ReferenceTest> phantomReference = null;
							try {
								phantomReference = (PhantomReference<ReferenceTest>) phantomQueue.remove();
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							if (phantomReference != null) {
								System.out.println("追踪垃圾回收过程：ReferenceTest 实例被 GC 了");
							}
						}
					}
				}
			}

			@Override
			protected void finalize() throws Throwable {
				super.finalize();
				System.out.println("调用当前类的 finalize() 方法");
				obj = this;
			}

			public void phantomReferenceTest() {
				Thread thread = new CheckRefQueue();
				// 设置为守护进程，当程序中没有非守护线程时，守护线程也就结束
				thread.setDaemon(true);
				thread.start();

				obj = new ReferenceTest();
				phantomQueue = new ReferenceQueue<>();
				// 构造了 ReferenceTest 对象的虚引用，并指定了引用队列
				PhantomReference<ReferenceTest> phantomReference = new PhantomReference<>(obj, phantomQueue);
				// 不可获取虚引用中的对象
				System.out.println("虚引用中的对象：" + phantomReference.get());

				try {

					// 将强引用去除
					obj = null;
					// 第一次进行 GC，由于对象可复活，GC 无法回收该对象
					System.out.println("第一次进行 GC");
					System.gc();
					Thread.sleep(1000);
					if (obj == null) {
						System.out.println("obj is null");
					} else {
						System.out.println("obj is not null");
					}

					obj = null;
					System.out.println("第二次进行 GC");
					System.gc(); // 一旦将 obj 对象回收，就会将此虚引用存放到引用队列中
					Thread.sleep(1000);
					if (obj == null) {
						System.out.println("obj is null");
					} else {
						System.out.println("obj is not null");
					}
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}

			public static void main(String[] args) {
				ReferenceTest referenceTest = new ReferenceTest();
				referenceTest.phantomReferenceTest();
			}
		}
	10. 再谈引用：终结器引用
		① 它用以实现对象的 finalize() 方法，也可以称为终结器引用
		② 无需手动编码，其内部配合引用队列使用
		③ 在 GC 时，终结器引用入队。由 Finalizer 线程通过终结器引用找到被引用对象并调用它的 finalize() 方法，第二次 GC 时才能回收被引用对象
十七、垃圾回收器
	1. GC 分类与性能指标
		① 垃圾回收器概述
			A. 垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的 JVM 来实现
			B. 由于 JDK 的版本处于高速迭代的过程中，因此 Java 发展至今已经衍生了众多的 GC 版本
			C. 从不同角度分析垃圾收集器，可以将 GC 分为不同的类型
		② 垃圾回收器分类
			A. 按垃圾回收线程数分，可以分为串行垃圾回收器和并行垃圾回收器
				a. 串行回收指的是在同一时间段内只允许有一个 CPU 用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束
					(1) 在诸如单 CPU 处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行并行回收器和并发回收器。所以，串行
					回收默认被应用在客户端的 Client 模式下的 JVM 中
					(2) 在并发能力比较强的 CPU 上，并行回收器产生的停顿时间要短于串行回收器
				b. 和串行回收相比，并行收集可以运用多个 CPU 同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了“Stop-
				the-World”机制
			B. 按照工作模式分，可以分为并发式垃圾回收器和独占式垃圾回收器
				a. 并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间
				b. 独占式垃圾回收器（Stop-the-world）一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束
			C. 按碎片处理方式分，可以分为压缩式垃圾回收器和非压缩式垃圾回收器。
				a. 压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片。再分配对象空间使用“指针碰撞”
				b. 非压缩式的垃圾回收器不进行这步操作。再分配对象空间使用“空闲列表”
			D. 按工作的内存区间分，又可分为年轻代垃圾回收器和老年代垃圾回收器。
		③ 评估 GC 的性能指标
			A. 吞吐量：运行用户代码的时间占总运行时间的比例。（总运行时间：程序的运行时间+内存回收的时间）
			B. 垃圾收集开销：吞吐量的补数，垃圾收集所用时间与总运行时间的比例
			C. 暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间。
			D. 收集频率：相对于应用程序的执行，收集操作发生的频率
			E. 内存占用：Java 堆区所占的内存大小
			F. 快速：一个对象从诞生到被回收所经历的时间
			G. 这三者共同构成一个“不可能三角”。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项
			H. 这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高
			了吞吐量。而内存的扩大，对延迟反而带来负面效果
			I. 简单来说，主要抓住两点
				a. 吞吐量
				b. 暂停时间
		④ 评估 GC 的性能指标：吞吐量（throughput）
			A. 吞吐量就是 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。比如：虚拟机总共
			运行了 100 分钟，其中垃圾收集花掉了 1 分钟，那吞吐量就是 99%
			B. 这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的
			C. 吞吐量优先，意味着在单位时间内，STW 的时间最短：0.2 + 0.2 = 0.4
				0s																		6s
				+---------------+-------+-----------------------+-------+---------------+
				|				|		|						|		|				|
				|				|		|						|		|				|
				|				|		|						|		|				|
				+---------------+-------+-----------------------+-------+---------------+
								  200ms							  200ms
											 注重吞吐量
		⑤ 评估 GC 的性能指标：暂停时间（pause time）
			A. “暂停时间” 是指一个时间段内应用程序线程暂停，让 GC 线程执行的状态。例如，GC 期间 100 毫秒的暂停时间意味着在这 100 毫秒期间内没有应用程序线程是活
			动的
			B. 暂停时间优先，意味着尽可能让单次 STW 的时间最短：0.1 * 5 = 0.5
				+-------+---+-------+---+-------+---+-------+---+-------+---+-------+
				|		|	|		|	|		|	|		|	|		|	|		|
				|		|	|		|	|		|	|		|	|		|	|		|
				|		|	|		|	|		|	|		|	|		|	|		|
				+-------+---+-------+---+-------+---+-------+---+-------+---+-------+
						100ms		100ms		100ms		100ms		100ms
											  注重低延迟
		⑥ 评估 GC 的性能指标：吞吐量 VS 暂停时间
			A. 高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序在做“生产性”工作。直觉上，吞吐量越高程序运行越快
			B. 低暂停时间（低延迟）较好因为从最终用户的角度来看不管是 GC 还是其他原因导致一个应用被挂起始终是不好的，这取决于应用程序的类型，有时候甚至短暂的
			200 毫秒暂停都可能打断终端用户体验。因此，具有低的较大暂停时间是非常重要的，特别是对于一个交互式应用程序
			C. 不幸的是“高吞吐量”和“低暂停时间”是一对相互竞争的目标（矛盾）。
				a. 因为如果选择以吞吐量优先，那么必然需要降低内存回收的执行频率，但是这样会导致 GC 需要更长的暂停时间来执行内存回收
				b. 相反的，如果选择以低延迟优先的原则，那么为了降低每次执行内存回收时的暂停时间，也只能频繁地执行内存回收，但这又引起了年轻代内存地缩减和导致
				程序吞吐量地下降
			D. 在设计（或使用）GC 算法时，我们必须确定目标：一个 GC 算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折衷
			E. 现在标志：在最大吞吐量优先的情况下，降低停顿时间
	2. 不同的垃圾回收器概述
		① 垃圾收集器发展史
			A. 有了虚拟机，就一定需要收集垃圾的机制，这就是 Garbage Collection，对应的产品称为 Garbage Collector
				a. 1999 年随 JDK1.3.1 一起来的是串行方式的 Serial GC，它是第一款 GC。ParNew 垃圾收集器是 Serial 收集器的多线程版本
				b. 2002年2月26日，Parallel GC 和 Concurrent Mark Sweep GC 跟随着 JDK1.4.2 一起发布
				c. Parallel GC 在 JDK6 之后成为 HotSpot 默认 GC
				d. 2012年，在 JDK1.7u4 版本中，G1 可用
				e. 2017年，JDK9 中 G1 变成默认的垃圾收集器，以替代 CMS
				f. 2018年3月，JDK10 中 G1 垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟
				g. 2018年9月，JDK11 发布。引入 Epsilon 垃圾回收器，又被称为“No-Op（无操作）”回收器。同时，引入 ZGC：可伸缩的低延迟垃圾回收器（Experimental）
				h. 2019年3月，JDK12 发布。增强 G1，自动返回未用堆内存给操作系统。同时，引入 Shenandoah GC：低停顿时间的 GC（Experimental）
				i. 2019年9月，JDK13 发布。增强 ZGC，自动返回未用堆内存给操作系统。
				j. 2020年3月，JDK14 发布。删除 CMS 垃圾回收器。扩展 ZGC 在 macOS 和 Windows 上的引用
			B. 串行回收器：Serial、Serial Old
			C. 并行回收器：ParNew、Parallel Scavenge、Parallel Old
			D. 并发回收器：CMS、G1
		② 7 款经典收集器与垃圾分代之间的关系
			+---------------------------------------------------------------------------------------+
			|				+-----------+	+----------------------+	+-----------+				|
			| Young Gen		| Serial GC |	| Parallel Scavenge GC |	| ParNew GC |	+------+	|
			|				+-----------+	+----------------------+	+-----------+	|  G1  |	|
			+---------------------------------------------------------------------------+------+----|
			|				+---------------+	+-----------------+		+--------+		|  GC  |	|
			| Old Gen		| Serial Old GC |	| Parallel Old GC |		| CMS GC |		+------+	|
			|				+---------------+	+-----------------+		+--------+					|
			+---------------------------------------------------------------------------------------+
			A. 新生代收集器：Serial、ParNew、Parallel Scavenge
			B. 老年代收集器：Serial Old、Parallel Old、CMS
			C. 整堆收集器：G1 
		③ 垃圾收集器的组合关系
			+-----------------------------------------------------------------------------------------------+
			|				+-----------+		+-----------+		+----------------------+				|
			| Young Gen		| Serial GC |		| ParNew GC |		| Parallel Scavenge GC |	+------+	|
			|				+-----------+		+-----------+		+----------------------+	|  G1  |	|
			|					| |					| |						|					|	   |	|
			|		JDK8 中取消 | |					| |	JDK8 中取消			|					|	   |	|
			|					| +---------------+ | |						|					|	   |	|
			+-------------------+-----------------+-+-+---------------------+-------------------+------+----+
			|					| +---------------+-+ | +-------------------+					|	   |	|
			|					| |				  |   |	|					|					|	   |	|
			|				+--------+		+---------------+		+-----------------+			|  GC  |	|
			| Old Gen		| CMS GC | ---- | Serial Old GC |		| Parallel Old GC |			+------+	|
			|				+--------+		+---------------+		+-----------------+						|
			|						后备方案																|
			+-----------------------------------------------------------------------------------------------+
			A. 两个收集器间有连线，表明它们可以搭配使用：Serial/Serial Old、Serial/CMS、ParNew/Serial Old、ParNew/CMS、Parallel Scavenge/Serial Old、
			Parallel Scavenge/Parallel Old、G1
			B. 其中 Serial Old 作为 CMS 出现“Concurrent Mode Failure”失败的后备预案
			C. 由于维护和兼容性测试的成本，在 JDK8 时将 Serial/CMS、ParNew/Serial Old 这两个组合声明为废弃（JEP 173），并在 JDK9 中完全取消了这些组合的支持
			（JEP214），即：移除
			D. JDK14 中：弃用 Parallel Scavenge/Serial Old 组合（JEP 366）
			E. JDK14 中：删除 CMS 垃圾回收器（JEP 363）
		④ 不同的垃圾回收器概述
			A. 为什么要有很多收集器，因为 Java 的使用场景很多，移动端、服务器端等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集器的性能
			B. 虽然我们会对各个收集器进行比较，但并非为了挑选一个最好得到收集器。没有任何场景下都适用的完美收集器存在，更加没有万能的收集器。所以我们选择的
			只是对具体应用场景最合适的收集器
		⑤ 如何查看默认的垃圾收集器
			A. -XX:+PrintCommandLineFlags：查看命令行相关参数（包含使用的垃圾收集器）
			B. 使用命令行指令：jinfo -flage 相关垃圾回收器参数 进行 ID
				举例：jinfo -flage UseParallelGC 进行 ID
	3. Serial 回收器：串行回收
		① 概述
			A. Serial 收集器是最基本、历史最悠久的垃圾收集器。JDK1.3 之前回收新生代唯一的选择
			B. Serial 收集器作为 HotSpot 中 Client 模式下的默认新生代垃圾收集器
			C. Serial 收集器采用复制算法、串行回收和“Stop-the-World”机制的方式执行内存回收
			D. 除了年轻代之外，Serial 收集器还提供用于执行老年代垃圾收集的 Serial Old 收集器。Serial Old 收集器同样也采用了串行回收和“Stop-the-World”机制，
			只不过内存回收算法使用的是标记-压缩算法
				a. Serial Old 是运行在 Client 模式下默认的老年代的垃圾回收器
				b. Serial Old 在 Server 模式下主要有两个用途
					(1) 与新生代的 Parallel Scavenge 配合使用
					(2) 作为老年代 CMS 收集器的后备垃圾收集方案
			+-------------------------------------------------------------------------------------------------------------------+
			|			用户线程 1	   |				  	|	 用户线程 1	    |				  	  |		用户线程 1	  |		|
			|	CPU0 ----------------> |				  	| ----------------> |				 	  |	----------------> |		|
			|			用户线程 2	   |	 GC 线程	  	|	 用户线程 2	    |		GC 线程  	  |		用户线程 2	  |		|
			|	CPU1 ----------------> | -----------------> | ----------------> | ------------------> |	----------------> |		|
			|			用户线程 3	   | 新生代采取复制算法 |	 用户线程 3	    | 老年代采取标记-压缩 |		用户线程 3	  |		|
			|	CPU2 ----------------> | 暂停所有用户线程  	| ----------------> | 算法 				  |	----------------> |		|
			|			用户线程 4	   |				  	|	 用户线程 4	    | 暂停所有用户线程	  |		用户线程 4	  |		|
			|	CPU3 ----------------> |				  	| ----------------> |				  	  |	----------------> |		|
			|					  Safepoint									  Safepoint											|
			|										Serial/Serial Old 垃圾收集器												|
			+-------------------------------------------------------------------------------------------------------------------+
			E. 这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个 CPU 或者一条收集线程去完成垃圾收集工作，更重要的是在它进行
			垃圾收集时，必须暂停其他所有的工作，直到它收集结束（Stop-the-World）
			F. 优势：简单而高效（与其他收集器的单线程比），对于限定单个 CPU 的环境来说，Serial 收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得
			最高的单线程效率。运行在 Client 模式下的虚拟机是个不错的选择
			G. 在用户的桌面应用场景中，可用内存一般不大（几十 MB 至一两百 MB），可以在较短时间内完成垃圾收集（几十 ms 至 一百多 ms），主要不频繁发生，使
			用串行回收器是可以接受的
			H. 在 HotSpot 虚拟机中，使用 -XX:+UseSerialGC 参数可以指定年轻代和老年代都使用串行收集器。等价于新生代用 Serial GC，且老年代用 Serial Old GC
		② 总结
			A. 这种垃圾收集器现在已经不用了，而且在限定单核 CPU 才可以使用。但是现在都已经不是单核的了
			B. 对于交互强的应用而言，这种垃圾收集器是不能接受的。一般在 Java Web 应用程序中是不会采用串行垃圾收集器的
	4. ParNew 回收器：并行回收
		① 如果说 Serial GC 是年轻代中的单线程垃圾收集器，那么 ParNew 收集器则是 Serial 收集器的多线程版本。Par 是 Parallel 的缩写，New：只能处理新生代
		② ParNew 收集器除了采用并行回收的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew 收集器在年轻代中同样也是采用复制算法、“Spot-the-
		World”机制
		③ ParNew 是很多 JVM 运行在 Server 模式下新生代的默认垃圾收集器
			+-------------------------------------------------------------------------------------------------------------------+
			|			用户线程 1	   |	 GC 线程	  	|	 用户线程 1	    |				  	  |		用户线程 1	  |		|
			|	CPU0 ----------------> | -----------------> | ----------------> |				 	  |	----------------> |		|
			|			用户线程 2	   |	 GC 线程	  	|	 用户线程 2	    |		GC 线程  	  |		用户线程 2	  |		|
			|	CPU1 ----------------> | -----------------> | ----------------> | ------------------> |	----------------> |		|
			|			用户线程 3	   |  	 GC 线程		|	 用户线程 3	    | 老年代采取标记-压缩 |		用户线程 3	  |		|
			|	CPU2 ----------------> | ----------------->	| ----------------> | 算法 				  |	----------------> |		|
			|			用户线程 4	   | 新生代采取复制算法	|	 用户线程 4	    | 暂停所有用户线程	  |		用户线程 4	  |		|
			|	CPU3 ----------------> | 暂停所有用户线程	| ----------------> |				  	  |	----------------> |		|
			|					  Safepoint									  Safepoint											|
			|										ParNew/Serial Old 垃圾收集器												|
			+-------------------------------------------------------------------------------------------------------------------+
		④ 对于新生代，回收次数频繁，使用并行方式高效
		⑤ 对于老年代，回收次数少，使用串行方式节省资源（CPU 并行需要切换线程，串行可以省去切换线程的资源）
		⑥ 由于 ParNew 收集器是基于并行回收的，那么是否可以判定 ParNew 收集器的回收效率在任何场景下都会比 Serial 收集器更高效？
			A. ParNew 收集器运行在多 CPU 的环境下，由于可以充分利用多 CPU、多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量
			B. 但是在单个 CPU 的环境下，ParNew 收集器不比 Serial 收集器更高效。虽然 Serial 收集器是基于串行回收，但是由于 CPU 不需要频繁地做任务切换，因
			此可以有效避免多线程交互过程中产生的一些额外开销。
		⑦ 因为除 Serial 外，目前只有 ParNew GC 能与 CMS 收集器配合工作
		⑧ 在程序中，开发人员可以通过选项“-XX:+UseParNewGC”手动指定使用 ParNew 收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代
		⑨ “-XX:ParallelGCThreads”限制线程数量，默认开启和 CPU 数量相同线程数
	5. Parallel 回收器：吞吐量优先
		① 概述
			A. HotSpot 的年轻代中除了拥有 ParNew 收集器是基于并行回收的以外，Parallel Scavenge 收集器同样采用了复制算法、并行回收和“Stop-the-world”机制
			B. 那么 Parallel 收集器的出现是否多此一举
				a. 和 ParNew 收集器不同，Parallel Scavenge 收集器的目标则是达到一个可控制的吞吐量（Throughput），它也被称为吞吐量优先的额垃圾收集器
				b. 自适应调节策略也是 Parallel Scavenge 与 ParNew 一个重要区别
			C. 高吞吐量则可以高效地利用 CPU 时间，尽快完成程序地运算任务，主要适合在后台运算而不需要太多交互任务。因此，常见在服务器环境在中使用。例如：
			那些执行批量处理、订单处理、工资支付、科学计算的应用程序
			D. Parallel 收集在 JDK1.6 时提供了用于执行老年代垃圾收集的 Parallel Old 收集器，用来代替老年代的 Serial Old 收集器
			E. Parallel Old 收集器采用了标记-压缩算法，但同样也是基于并行回收和“Stop-the-World”机制
			+-------------------------------------------------------------------------------------------------------------------+
			|			用户线程 1	   |	 GC 线程	  	|	 用户线程 1	    |		GC 线程  	  |		用户线程 1	  |		|
			|	CPU0 ----------------> | -----------------> | ----------------> | ------------------> |	----------------> |		|
			|			用户线程 2	   |	 GC 线程	  	|	 用户线程 2	    |		GC 线程  	  |		用户线程 2	  |		|
			|	CPU1 ----------------> | -----------------> | ----------------> | ------------------> |	----------------> |		|
			|			用户线程 3	   |  	 GC 线程		|	 用户线程 3	    | 老年代采取标记-压缩 |		用户线程 3	  |		|
			|	CPU2 ----------------> | ----------------->	| ----------------> | 算法 				  |	----------------> |		|
			|			用户线程 4	   | 新生代采取复制算法	|	 用户线程 4	    | 暂停所有用户线程	  |		用户线程 4	  |		|
			|	CPU3 ----------------> | 暂停所有用户线程	| ----------------> |				  	  |	----------------> |		|
			|					  Safepoint									  Safepoint											|
			|										Parallel Scavenge/Parallel Old 垃圾收集器									|
			+-------------------------------------------------------------------------------------------------------------------+
			F. 在程序吞吐量优先的应用场景中，Parallel 收集器和 Parallel Old 收集器的组合，在 Server 模式下的内存回收性能很不错
			G. 在 Java8 中，默认是此垃圾收集器
		② 参数配置
			A. -XX:+UseParallelGC：手动指定年轻代使用 Parallel 并行收集器执行内存回收任务
			B. -XX:+UseParallelOldGC：手动指定老年代都是使用并行回收器
				a. 分别适应于新生代和老年代。默认 jdk8 是开启的
				b. 上面两个参数，默认开启一个，另一个也会被开启（互相激活）
			C. -XX:ParallelGCThreads：设置年轻代并行收集器的线程数。一般地，最好与 CPU 数量相等，以避免过多的线程数影响垃圾收集性能
				a. 在默认情况下，当 CPU 数量小于 8 个，ParallelGCThreads 的值等于 CPU 数量
				b. 当 CPU 数量大于 8 个，ParallelGCThreads 的值等于 3 + ((5 * CPU_Count) / 8)
			D. -XX:MaxGCPauseMillis：设置垃圾收集器自大停顿时间（即 STW 的时间），单位是毫秒
				a. 为了尽可能地把停顿时间控制在 MaxGCPauseMillis 以内，收集器在工作时会调整 Java 堆大小或者其他一些参数
				b. 对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体地吞吐量。所以服务器端适合 Parallel，进行控制
				c. 该参数使用需要谨慎
			E. -XX:GCTimeRatio：垃圾收集时间占总时间的比例（= 1 / （N + 1））。用于衡量吞吐量的大小
				a. 取值范围（0, 100），默认值 99，也就是垃圾回收时间不超过 1%
				b. 与前一个 -XX:MaxGCPauseMillis 参数有一定矛盾性。暂停时间越长，Radio 参数就容易超过设定的比例
			F. -XX:+UseAdaptiveSizePolicy：设置 Parallel Scavenge 收集器具有自适应调节策略
				a. 在这种模式下，年轻代的大小、Eden 和 Survivor 的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点
				b. 在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMillis），让
				虚拟机自己完成调优工作
	6. CMS 回收器：低延迟
		① 概述
			A. 在 JDK1.5 时期，HotSpot 推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，这款收集器是 HotSpot
			虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作
			B. CMS 收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。目
			前很大一部分的 Java 应用集中在互联网或者 B/S 系统的服务器上，这类应用尤其重视服务器的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。
			CMS 收集器就非常符合这类应用的需求
			C. CMS 的垃圾收集算法采用“标记-清除算法”，并且也会“Stop-the-World”
			D. 不幸的是，CMS 作为老年代的收集器，却无法与 JDK1.4.0 中已经存在的新生代收集器 Parallel Scavenge 配合工作，所以在 JDK1.5 中使用 CMS 来收集老年
			代的时候，新生代只能选择 ParNew 或者 Serial 收集器中的一个
			E. 在 G1 出现之前，CMS 使用还是非常广泛的。一直到今天，仍然有很多系统使用 CMS GC
		② CMS 的工作原理
			+---------------------------------------------------------------------------------------------------------------------------------------+
			|			用户线程1		|					| 	  用户线程1		 |		重新标记	  | 	用户线程1	   | 	 用户线程1	    |	|
			|	CPU0 -----------------> |					| -----------------> | -----------------> | -----------------> | -----------------> |	|
			|			用户线程2		|					|	  用户线程2		 |		重新标记	  |	    用户线程2	   |	 用户线程2		|	|
			|	CPU0 -----------------> |	  初始标记		| -----------------> | -----------------> | -----------------> | -----------------> |	|
			|			用户线程3		| ----------------> |	  并发标记		 |		重新标记	  |	    并发清除	   |	 重置线程	    |	|
			|	CPU0 -----------------> |					| -----------------> | -----------------> | -----------------> | -----------------> |	|
			|			用户线程4		|					|	  用户线程4		 |		重新标记	  |		用户线程4	   |	 用户线程4		|	|
			|	CPU0 ----------------->	|					| -----------------> | -----------------> | -----------------> | -----------------> |	|
			|															Concurrent Mark Sweep 收集器												|
			+---------------------------------------------------------------------------------------------------------------------------------------+
			A. CMS 整个过程比之前的收集器要复杂，整个过程分成 4 个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段
				a. 初始标记（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“Stop-the-World”机制而出现短暂的暂停，这个阶段的主要任务仅仅
				只是标记出 GC Roots 能直接关联到的对象。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快
				b. 并发标记（Concurrent-Mark）阶段：从 GC Roots 的直接关联对象开始遍历整个对象图大的过程，这个过程耗时较长但是不需要停顿用户线程，可以与
				垃圾收集线程一起并发运行
				c. 重新标记（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户线程
				继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段大的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短
				d. 并发清除（Concurrent-Sweep）阶段：此阶段清理删除标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可
				以与用户线程同时并发的
		③ 分析
			A. 尽管 CMS 收集器采用的是并发回收（非独占式），但是在其初始化标记和再次标记这两个阶段仍然需要执行“Stop-the-World”机制暂停程序中的工作线程，不
			过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器做不到完全不需要“Stop-the-World”，只是尽可能地缩短暂停时间
			B. 由于最耗费时间地并发标记与并发清除阶段都不需要暂停工作，所以整体地回收是低停顿的。
			C. 另外，由于在垃圾收集阶段用户线程没有中断，所以在 CMS 回收过程中，还应该确保应用程序用户线程有足够的内存可用。因此，CMS 收集器不能像其他收集
			器那样等到老年代几乎完全被填满了再进行收集，而是当堆内存使用率达到某一阈值时，便开始进行回收，以确保应用程序在 CMS 工作过程中依然有足够的空间
			支持应用程序运行。要是 CMS 运行期间预留得到内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用
			Serial Old 收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了
			D. CMS 收集器的垃圾收集算法采用的是标记-清除算法，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存极有可能是不连续的一些
			内存块，不可避免地将会产生一些内存碎片。那么 CMS 在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能选择空闲列表（Free
			List）执行内存分配
			E. 既然 Mark Sweep 会造成内存碎片，那么为什么不把算法换成 Mark Compact？其实很简单，因为当并发清除时，用 Compact 整理内存的话，原来的用户线程使
			的内存就用不了。要保证用户线程能继续执行，前提得它运行得资源不受影响。Mark Compact 更适合“Stop the World”这种场景下使用
		④ CMS 的优点：
			A. 并发收集
			B. 低延迟
		⑤ CMS 的弊端
			A. 会产生内存碎片：导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发 Full GC
			B. CMS 收集器对 CPU 资源非常敏感：在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低
			C. CMS 收集器无法处理浮动垃圾：可能出现“Concurrent Mode Failure”失败而导致另一次 Full GC 的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程
			是同时运行或者交叉运行的，那么在并发标记阶段如果产生新的垃圾对象，CMS 将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回
			收，从而只能在下一次执行 GC 时释放这些之前未被回收的内存空间
		⑥ CMS 收集器可以设置的参数
			A. -XX:+UseConcMarkSweepGC：手动指定使用 CMS 收集器执行内存回收任务。开启该参数后会自动将“-XX:+UseParNewGC”打开，即：ParNew（Young 区）+ CMS（
			Old 区）+ Serial Old 的组合
			B. -XX:+CMSInitiatingOccupancyFraction：设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收
				a. JDK5 及以前版本的默认值为 68，即当老年代的空间使用率达到 68% 时，会执行一次 CMS 回收。JDK6 及以上版本默认值为 92%
				b. 如果内存增长缓慢，则可以设置一个稍大的值，大的阈值可以有效降低 CMS 的触发频率，减少老年代回收次数可以较为明显地改善应用程序性能。反之，如
				果应用程序内存使用率增长很快，则应该降低这个额阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低 Full GC 地执行次数
			C. -XX:+UseCMSCompactAtFullCollection：用于指定在执行完 Full GC 后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并
			发执行，所带来的问题就是停顿时间变得更长了
			D. -XX:CMSFullGCsBeforeCompaction：设置在执行多少次 Full GC 后对内存空间进行压缩整理
			E. -XX:ParallelCMSThreads：设置 CMS 的线程数量。CMS 默认启动的线程数是（ParallelGCThreads + 3）/4，ParallelGCThreads 是年轻代并行收集器的线程数。
			当 CPU 资源比较紧张时，受到 CMS 收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕
		⑦ 小结
			A. HotSpot 有那么多的垃圾回收器，Serial GC、Parallel GC、Concurrent Mark Sweep GC 这三个 GC 有什么不同
				a. 如果想要最小化使用内存和并行开销，选择 Serial GC
				b. 如果想要最大化应用程序的吞吐量，选择 Parallel GC
				c. 如果想要最小化 GC 的中断或者停顿时间，选择 CMS GC
		⑧ JDK 后续版本中 CMS 的变化
			A. JDK9 新特性：CMS 被标记为 Deprecate（JEP291）。如果对 JDK9 及以上版本的 HotSpot 虚拟机使用参数“-XX:+UseConcMarkSweepGC”来开启 CMS 收集器的话，
			用户会收到一个警告信息，提示 CMS 未来将会被废弃
			B. JDK14 新特性：删除 CMS 垃圾回收器（JEP363）。移除了 CMS 垃圾收集器，如果在 JDK14 中使用“-XX:UseConcMarkSweepGC”的话，JVM 不会报错，只是给出一
			个 warning 信息，但是不会 exit。JVM 会自动回退以默认 GC 方式启动
	7. G1 回收器：区域化分代式
		① 既然已经有了前面几个强大的 GC，为什么还要发布 Garbage First（G1）GC？
			A. 原因就在于应用程序所应对的业务越来越庞大、复杂，用户越来越多，没有 GC 就不能保证应用程序正常进行，而经常造成 STW 的 GC 又跟不上实际的需求，所
			以才会不断尝试对 GC 进行优化。G1（Garbage-First）垃圾回收器是在 Java7 update 4 之后引入的一个新垃圾回收器，是当今收集器技术发展的最前沿成果之一
			B. 与此同时，为了适应现在不断扩大的内存和不断增加的处理器数量，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量
			C. 官方给 G1 设定的目标是在延迟可控的前提下获得尽可能高的吞吐量，所以才担当起“全功能收集器”的重任与期望
		② 为什么名字叫做 Garbage First（G1）？
			A. 因为 G1 是一个并行回收器，它把堆内存分割为很多不相关的区域（region）（物理上不连续的）。使用不同的 Region 来表示 Eden、幸存者0区、幸存者1区、
			老年代等。
			B. G1 GC 有计划地避免在整个 Java 堆中进行全区域的垃圾收集。G1 跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需要时间
			的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region
			C. 由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以给 G1 一个名字：垃圾优先（Garbage First）
		③ 概述
			A. G1（Garbage-First）是一款面向服务器端应用的垃圾收集器，主要针对配备多核 CPU 及大容量内存的机器，以极高概率满足 GC 停顿时间的同时，还兼具高吞
			吐量的性能特征
			B. 在 JDK1.7 版本正式启用，移除了 Experimental 的标识，是 JDK9 以后的默认垃圾回收器，取代了 CMS 回收器以及 Parallel+Parallel Old 组合。被 Oracle
			官方称为“全功能的垃圾收集器”。
			C. 与此同时，CMS 已经在 JDK9 中被标记为废弃（deprecated）。在 JDK8 中还不是默认的垃圾回收器，需要使用“-XX:+UseG1GC”来启用
		④ G1 回收器的特点（优势）
			A. 与其他 GC 收集器相比，G1 使用了全新的分区算法，其特点如下所示：
			B. 并行与并发
				a. 并行性：G1 在回收期间，可以有多个 GC 线程同时工作，有效利用多核计算能力。此时用户线程 STW
				b. 并发性：G1 拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况
											+--------------+
					+-----------+			|  年轻代 GC   |		   +----------+
			 +----> | 年轻代 GC | --------> |      +  	   | --------> | 混合回收 | ----+
			 |		+-----------+			| 并发标记过程 |		   +----------+		|
			 |								+--------------+							|
			 +--------------------------------------------------------------------------+
			 |																			|
			 |								  +---------+								|
			 +------------------------------- | Full GC | <-----------------------------+
											  +---------+
			C. 分代收集
				a. 从分代上看，G1 依然属于分代型垃圾回收器，它会区分年轻代和老年代，年轻代依然有 Eden 区和 Survivor 区。但从堆的结构上看，它不要求整个 Eden
				区、年轻代或者老年代都是连续的，也不坚持固定大小和固定数量
				b. 将堆空间分为若干个区域（Region），这些区域中包含了逻辑上的年轻代和老年代
				c. 和之前的各类回收器不同，它同时兼顾年轻代和老年代。对比其他回收器，或者工作在年轻代，或者工作在老年代
			D. 空间整合
				a. CMS：“标记-清除”算法、内存碎片、若干次 GC 后进行一次碎片整理
				b. G1 将内存划分为一个个的 Region。内存的回收是以 region 作为基本单位的。Region 之间是复制算法，但整体上实际可看作“标记-压缩（Mark-Compact）”
				算法，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次 GC。尤其是当 Java 堆
				非常大的时候，G1 的优势更加明显
			E. 可预测得到停顿时间模型（即：软实时 soft real-time）
				a. 这是 G1 相对于 CMS 的另一大优势，G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗
				在垃圾收集上的时间不得超过 M 毫秒
				b. 由于分区的原因，G1 可以只选取部分区域进行内存回放，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制
				c. G1 跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需要时间时间的经验值），在后台维护一个优先列表，每次根据允许的收
				集时间，优先回收价值最大的 Region，保证了 G1 收集器在有限的时间内可以获取尽可能高的收集效率
				d. 相比于 CMS GC，G1 未必能做到 CMS 在最好情况下的延时停顿，但是最差情况要好很多
		⑤ G1 回收器的缺点
			A. 相较于 CMS，G1 还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1 无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行
			负载（Overload）都要比 CMS 高
			B. 从经验上来说，在小内存应用上 CMS 表现大概率会优于 G1，而 G1 在大内存应用上则发挥其优势。平衡点在 6-8GB 之间
		⑥ G1 回收器的参数设置
			A. -XX:+UseG1GC：手动指定使用 G1 收集器执行内存回收任务
			B. -XX:G1HeapRegionSize：设置每个 Region 的大小。值是 2 的幂，范围是 1MB 到 32MB之间，目标是根据最小的 Java 堆大小划分出约 2048 个区域。默认是堆
			内存的 1/2000。
			C. -XX:MaxGCPauseMillis：设置期望达到的最大 GC 停顿时间指标（JVM 会尽力实现，但不保证达到）。默认值是 200ms
			D. -XX:ParallelGCThreads：设置 STW 时GC工作线程数的值，最多设置为 8
			E. -XX:ConcGCThreads：设置并发标记的线程数。将 n 设置为并行垃圾回收线程数（ParallelGCThreads）的 1/4 左右
			F. -XX:InitiatingHeapOccupancyPercent：设置触发并发 GC 周期的 Java 堆占用阈值。超过此值。就触发 GC。默认值是 45
		⑦ G1 回收器的常见操作步骤
			a. G1 的设计原则就是简化 JVM 性能调优，开发人员只需要简单的三步即可完成调优
				(1) 第一步：开启 G1 垃圾收集器
				(2) 第二步：设置堆的最大内存
				(3) 第三步：设置最大的停顿时间
			b. G1 中提供了三种垃圾回收模式：Young GC、Mixed GC 和 Full GC，在不同的条件下被触发
		⑧ G1 回收器的适用场景
			A. 面向服务端应用，针对具有大内存、多处理器的机器（在普通大小的堆里表现并不惊喜）
			B. 最主要的应用是需要低 GC 延迟，并具有大堆的应用程序提供解决方案，如：在堆大小约 6GB 或更大时，可预测的暂停时间可以低于 0.5 秒（G1 通过每次只清理
			一部分而不是全部的 Region 的增量式清理来保证每次 GC 停顿时间不会过长）
			C. 用来替换掉 JDK1.5 中的 CMS 收集器，下面情况下，使用 G1 可能比 CMS 好
				a. 超过 50% 的 Java 堆被活动数据占用
				b. 对象分配频率或年代提升频率变化很大
				c. GC 停顿时间过长（长于 0.5 至 1 秒）
			D. HotSpot 垃圾收集器里，除 G1 以外，其他的垃圾收集器使用内置的 JVM 线程执行 GC 的多线程操作，而 G1 GC 可以采用应用线程承担后台运行的 GC 工作，即
			当 JVM 的 GC 线程处理速度慢，系统会调用应用程序线程帮助加速垃圾回收过程
		⑨ 分区 Region：化整为零
			A. 使用 G1 收集器时，它将整个 Java 堆划分成约 2048 个大小相同的独立 Region 块，每个 Region 块大小根据堆空间的实际大小而定，整体被控制在 1MB 到 32
			MB 之间，且为 2 的 N 次幂，即 1MB，2MB，4MB，8MB，16MB，32MB。可以通过“-XX:G1HeapRegionSize”设定。所有的 Region 大小相同，且在 JVM 生命周期内不会
			被改变
			B. 虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了它们都是一部分 Region（不需要连续）的集合。通过 Region 的动态分配方式实现
			逻辑上的连续
				+---+---+---+---+---+---+---+---+---+---+---+---+
				| E |   |   | E |   | S |   | E |   | E |   |   |
				+---+---+---+---+---+---+---+---+---+---+---+---+
				|   | O |   |   | O |   | E |   | O |   |   | O |
				+---+---+---+---+---+---+---+---+---+---+---+---+	+---+
				| S |   |   | E |   | O |   |   |   | E |   |   |	| E | Eden
				+---+---+---+---+---+---+---+---+---+---+---+---+	+---+
				| O |   |   | O |   | E |   | O | O |   | O |   |	| S | Survivor
				+---+---+---+---+---+---+---+---+---+---+---+---+	+---+
				|   H   |     H     |							|	| O | Old
				+-------+-----------+							|	+---+
				|												|	| H | Humongous
				+-----------------------------------------------+	+---+
			C. 一个 Region 有可能属于 Eden、Survivor 或者 Old/Tenured 内存区域。但是一个 region 只可能属于一个角色。图中的 E 表示该 Region 属于 Eden 内存区域，
			S 表示属于 Survivor 内存区域，O 表示属于 Old 内存区域。图中空白的表示未使用的内存空间
			D. G1 垃圾收集器还增加了一种新的内存区域，叫做 Humongous 内存区域，如图中的 H 块。主要用于存储大对象，如果超过 1.5 个 region，就放到 H
			E. 设置 H 的原因：对于堆中的大对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象，就会对垃圾收集器造成负面影响。为了解决这个问题，G1
			划分了一个 Humongous 区，它用来专门存放大对象。如果一个 H 区装不下一个大对象，那么 G1 会寻找连续的 H 区来存储。为了能找到连续的 H 区，有时候不得不
			启动 Full GC。G1 的大多数行为都把 H 区 作为老年代的一部分来看待
		⑩ G1 回收器垃圾回收过程
			A. G1 GC 的垃圾回收过程主要包括如下三个环节：
				a. 年轻代 GC（Young GC）
				b. 老年代并发标记过程（Concurrent Marking）
				c. 混合回收（Mixed GC）
				d. 如果需要，单线程、独占式、高强度的 Full GC 还是继续存在的。它针对 GC 的评估失败提供了一种失败保护机制，即强力回收
			B. 顺时针，young gc -> young gc + Concurrent Mark -> Mixed GC 顺序，进行垃圾回收
											+--------------+
					+-----------+			|  年轻代 GC   |		   +----------+
			 +----> | 年轻代 GC | --------> |      +  	   | --------> | 混合回收 | ----+
			 |		+-----------+			| 并发标记过程 |		   +----------+		|
			 |								+--------------+							|
			 +--------------------------------------------------------------------------+
			 |																			|
			 |								  +---------+								|
			 +------------------------------- | Full GC | <-----------------------------+
											  +---------+
			C. 具体回收过程
				a.应用程序分配内存，当年轻代的 Eden 区用尽时开始年轻代回收过程；G1 的年轻代收集阶段是一个并行的独占式收集器。在年轻代回收期，G1 GC 暂停所有应用
				程序线程，启动多线程执行年轻代回收。然后从年轻代区间移动存活对象到 Survivor 区间或者老年区间，也有可能是两个区间都会涉及
				b. 当堆内存使用达到一定值（默认 45%）时，开始老年代并发标记过程
				c. 标记完成马上开始混合回收过程。对于一个混合回收期，G1 GC 从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同
				老年代的 G1 回收器和其他 GC 不同，G1 的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的 Region 就可以了。同时，这个老年
				代 Region 是和年轻代一起被回收的。
				d. 举个例子：一个 Web 服务器，Java 进行最大堆内存为 4G，每分钟响应 1500 个请求，每隔 45 秒钟会新分配大约 2G 的内存。G1 会每 45 秒钟进行一次年轻
				代回收，每 31 个小时整个堆的使用率会达到 45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收
			D. 记忆集（Remembered Set）和写屏障（Write Barrier）
				a. 一个对象被不同区域引用的问题
					(1) 一个 Region 不可能是孤立的，一个 Region 中的对象可能被其他任意 Region 中对象引用，判断对象存活时，是否需要扫描整个 Java 堆才能确保准确？
					(2) 在其他的分代收集器，也存在这样的问题（而 G1 更突出）
					(3) 回收新生代也不得不同时扫描老年代？
					(4) 这样的话会降低 Minor GC 的效率
				b. 解决方法
					(1) 无论 G1 还是其他分代收集器，JVM 都是使用 Remembered Set 来避免全局扫描
					(2) 每个 Region 都有一个对应的 Remembered Set
					(3) 每次 Reference 类型数据写操作时，都会产生一个 Write Barrier 暂时中断操作
					(4) 然后检查将要写入的引用指向的对象是否和该 Reference 类型数据在不同的 Region（其他收集器：检查老年代对象是否引用了新生代对象）
					(5) 如果不同，通过 CardTable 把相关引用信息记录到引用指向对象的所在 Region 对应的 Remembered Set
					(6) 当进行垃圾收集时，在 GC 根节点的枚举范围加入 Remembered Set；就可以保证不进行全局扫描，也不会遗漏
							 +-------------------------+   +-------------------------+
							 |						   ↓   ↓						 |
						+-+-+-+-+-+					+-+-+-+-+-+					+-+-+-+-+-+
						| | | | | |					| | | | | |					| | | | | |
				 Region | | | | | |					| | | | | |					| | | | | |
						| | | | | |					| | | | | |					| | | | | |
						+-+-+-+-+-+					+-+-+-+-+-+					+-+-+-+-+-+
							 ↑														 ↑
							 +-------------------------+   +-------------------------+
													   |   |
						+-+-+-+-+-+					+-+-+-+-+-+					+-+-+-+-+-+
				  Reset | | | | | |					| | | | | |					| | | | | |
						+-+-+-+-+-+					+-+-+-+-+-+					+-+-+-+-+-+
			E. 年轻代 GC
				a. JVM 启动时，G1 先准备好 Eden 区，程序在运行过程中不断创建对象到 Eden 区，当 Eden 空间耗尽时，G1 会启动一次年轻代垃圾回收过程
				b. 年轻代垃圾回收只会回收 Eden 区和 Survivor 区
				c. YGC时，首先 G1 停止应用程序的执行（Stop-the-World），G1 创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的
				回收集包含年轻代 Eden 区和 Survivor 区所有的到内存分段
				d. 然后开始如下回收过程
					(1) 第一阶段，扫描根：根是指 static 变量指向的对象，正在执行的方法调用链条上的局部变量等。根引用连同 RSet 记录的外部引用作为扫描存活对象入口
					(2) 第二阶段，更新 RSet：处理 dirty card queue（脏卡表：对于应用程序的引用赋值语句 object.field = object，JVM 会在之前和之后执行特殊的操作以
					在 dirty card queue 中入队一个保存了对象引用信息的 card。在年轻代回收的时候，G1 会对 Dirty Card Queue 中所有的 card 进行处理，以更新 RSet，
					保证 Reset 实时准确的反映引用关系。那为什么不在引用赋值语句处直接更新 RSet，这是为了性能的需求，RSet 的处理需要线程同步，开销会很大，使用队列
					性能会好很多）中的 card，更新 RSet。此阶段完成后，RSet 可以准确的反映老年代对所在的内存分段中对象的引用
					(3) 第三阶段，处理 RSet：识别被老年代对象指向的 Eden 中的对象，这些被指向的 Eden 中的对象被认为是存活对象
					(4) 第四阶段，复制对象：此阶段，对象数被遍历，Eden 区内存段中存活的对象会被复制到 Survivor 区中空的内存分段，Survivor 区内存分段中存活的对象
					年龄如果未达到阈值，年龄会加1，达到阈值会被复制到 Old 区中空的内存分段。如果 Survivor 空间不够，Eden 空间的部分数据会直接晋升到老年代空间
					(5) 第五阶段，处理引用：处理 Soft、Weak、Phantom、Final、JNI Weak 等引用。最终 Eden 空间的数据为空，GC 停止工作，而目标内存中的对象都是连续
					存储的，没有碎片，所以复制过程可以达到内存管理的效果，减少碎片
			F. 并发标记过程
				a. 初始标记阶段：标记从根节点直接可达的对象。这个阶段是 STW 的，并且会触发一次年轻代 GC
				b. 根区域扫描（Root Region Scanning）：G1 GC 扫描 Survivor 区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在 Young GC 之前完成
				c. 并发标记（Concurrent Marking）：在整个堆中进行并发标记（和应用程序并发执行），此过程可能被 Young GC 中断。在并发标记阶段，若发现区域对象中的所
				有对象都是垃圾，那这个区域会被立即回收。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）
				d. 再次标记（Remark）：由于应用程序持续进行，需要修正上一次的标记结果。是 STW 的。G1 中采用了比 CMS 更快的初始快照算法：snapshot-at-the-beginning
				（SATB）
				e. 独占清理（Cleanup，STW）：计算各个区域的存活对象和 GC 回收比例，并进行排序，识别可以混合回收的区域。为下个阶段做准备。是 STW 的。这个阶段并不会
				实际上区做垃圾的收集
				f. 并发清理阶段：识别并清理完全空闲的区域
			G. 混合回收
				a. 当越来越多的对象晋升到老年代 Old Region 时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，集 Mixed GC，该算法并不是一个 Old GC，除了
				回收整个 Young Region，还会回收一部分的 Old Region。这里需要注意：是一部分老年代，而不是全部老年代。可以选哪些 Old Region 进行收集，从而可以对哪些
				Old Region 进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是 Mixed GC 并不是 Full GC
				b. 并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分 8 次（可以通过
				“-XX:G1MixedGCCountTarget 设置”）被回收
				c. 混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden 区内存分段，Survivor 区内存分段。混合回收的算法和年轻代回收的算法完全一样，
				只是回收集多了老年代的内存分段。具体过程参照上面的年轻代回收过程
				d. 由于老年代中的内存分段默认分 8 次回收，G1 会优先回收垃圾多的内存分段。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否
				被回收，“-XX:G1MixedGCLiveThresholdPercent”，默认为 65%，意思是垃圾占内存分段比例要达到 65% 才会被回收。如果垃圾占比太低，意味着存活的对象占比高，
				在复制的时候会花费更多时间
				e. 混合回收并不一定要进行 8 次。有一个阈值“-XX:G1HeapWastePercent”，默认值为 10%，意思是允许整个堆内存中有 10% 的空间被浪费，意味着如果发现可以回
				收垃圾占堆内存的比例低于 10%，则不再进行混合回收。因为 GC 会花费很多的时间但是回收到的内存却很少。
			H. Full GC
				a. G1 的初衷就是要避免 Full GC 的出现。但是如果上述方式不能正常工作，G1 会停止应用程序的执行（Stop-the-World），使用单线程的内存回收算法进行垃圾回
				收，性能会非常差，应用程序停顿时间会很长。
				b. 要避免 Full GC 的发生，一旦发生需要进行调整。什么时候会发生 Full GC 呢？比如堆内存太小，当 G1 在复制存活对象的时候没有空的内存分段可用，则会回
				退到 Full GC，这种情况可以通过增大内存解决
				c. 导致 G1 Full GC 的原因可能有两个
					(1) Evacuation（回收阶段） 的时候没有足够的 to-space 来存放晋升的对象
					(2) 并发处理过程完成之前空间耗尽
			I. 补充：从 Oracle 官方透漏出来的信息可获知，回收阶段（Evacuation）其实也有想过设计成与用户程序一起并发执行，但这件事做起来比较复杂，考虑到 G1 只是回
			收一部分 Region，停顿时间是用户可控制的，所以并不迫切去实现，而选择把这个特性放到了 G1 之后出现的低延迟垃圾收集器（即 ZGC）中。另外，还考虑到 G1 不是
			仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案
			J. 优化建议
				a. 年轻代大小
					(1) 避免使用 -Xmn 或 -XX:NewRatio 等相关选项显式设置年轻代大小
					(2) 固定年轻代的大小会覆盖暂停时间目标
				b. 暂停时间目标不要太过于严苛
					(1) G1 GC 的吞吐量目标是 90% 的应用时间和 10% 的垃圾回收时间
					(2) 评估 G1 GC 的吞吐量时，暂停时间目标不要太严苛。目标太严苛表示愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量
	8. 垃圾回收器总结
		① 截止 JDK8，一共有七款不同的垃圾收集器，每一款不同的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况进行选用
			+--------------+----------------+----------------------+-------------------------+--------------+--------------------------------------------+
			| 垃圾收集器   | 分类			| 作用位置			   | 使用算法				 | 特点			| 适应场景									 |
			+--------------+----------------+----------------------+-------------------------+--------------+--------------------------------------------+
			| Serial	   | 串行运行		| 作用于新生代		   | 复制算法				 | 响应速度优先 | 适应于单 CPU 环境下的 Client 模式			 |
			+--------------+----------------+----------------------+-------------------------+--------------+--------------------------------------------+
			| ParNew	   | 并行运行		| 作用于新生代		   | 复制算法				 | 响应速度优先 | 多 CPU 环境下 Server 模式下与 CMS 配合使用 |
			+--------------+----------------+----------------------+-------------------------+--------------+--------------------------------------------+
			| Parallel	   | 并行运行		| 作用于新生代		   | 复制算法				 | 吞吐量优先   | 适应于后台运算而不需要太多交互的场景		 |
			+--------------+----------------+----------------------+-------------------------+--------------+--------------------------------------------+
			| Serial Old   | 串行运行		| 作用于老年代		   | 标记-压缩算法			 | 响应速度优先 | 适用于单 CPU 环境下的 Client 模式			 |
			+--------------+----------------+----------------------+-------------------------+--------------+--------------------------------------------+
			| Parallel Old | 并行运行		| 作用于老年代		   | 标记-压缩算法			 | 吞吐量优先   | 适应于后台运算而不需要太多交互的场景		 |
			+--------------+----------------+----------------------+-------------------------+--------------+--------------------------------------------+
			| CMS		   | 并发运行		| 作用于老年代		   | 标记-清除算法			 | 响应速度优先 | 适应于互联网或 B/S 业务					 |
			+--------------+----------------+----------------------+-------------------------+--------------+--------------------------------------------+
			| G1		   | 并发、并行运行 | 作用于新生代、老年代 | 复制算法、标记-压缩算法 | 响应速度优先 | 面向服务端应用							 |
			+--------------+----------------+----------------------+-------------------------+--------------+--------------------------------------------+
		② GC 发展阶段：Serial => Parallel（并行）=> CMS（并发）=> G1 => ZGC
		③ 怎么选择垃圾回收器
			A. Java 垃圾收集器的配置对于 JVM 优化来说是一个很重要的选择，选择合适的垃圾收集器可以让 JVM 的性能有一个很大的提升
			B. 怎么选择垃圾收集器
				a. 优先调整堆的大小让 JVM 自适应完成
				b. 如果内存小于 100M，使用串行收集器
				c. 如果是单核、单机程序，并且没有停顿时间的要求，使用串行收集器
				d. 如果是多 CPU、需要高吞吐量、允许停顿时间超过 1 秒，选择并行或者 JVM 自己选择
				e. 如果是多 CPU、追求低停顿时间，需快速响应（比如延迟不能超过 1 秒，如互联网应用），使用并发收集器。官方推荐 G1，性能高。现在互联网的项目，基本上
				都是使用 G1
		④ 最后需要明确一个观点
			A. 没有最好的收集器，更没有万能的收集器
			B. 调优永远是针对特定场景的、特定需求，不存在一劳永逸的收集器
		⑤ 面试
			A. 垃圾收集的算法有哪些？如何判断一个对象是否可以回收
			B. 垃圾收集器工作基本流程
			C. 垃圾回收器各种常用的参数
	9. GC 日志分析
		① 通过阅读 GC 日志，可以了解 Java 虚拟机内存分配与回收策略
			A. 内存分配与垃圾回收参数列表
				a. -XX:+PrintGC：输出 GC 日志。类似：-verbose:gc
				b. -XX:+PrintGCDetails：输出 GC 的详细日志
				c. -XX:+PrintGCTimeStamps输出 GC 的时间戳（以基准时间的形式）
				d. -XX:+PrintGCDateStamps：输出 GC 的时间戳（以日期的形式）
				e. -XX:+PrintHeapAtGC：在进行 GC 的前后打印出堆的信息
				f. -Xloggc:../logs/gc.log：日志文件的输出路径
			B. 日志分析步骤
				a. 代码
					public class GCLogTest {

						public static void main(String[] args) {
							List<byte[]> list = new ArrayList<>();

							for (int i = 0; i < 500; i++) {
								byte[] arr = new byte[1024 * 100];
								list.add(arr);
							}
						}
					}
				b. 打开 GC 日志：-XX:+PrintGC 或者 -verbose:gc
					-Xms60m -Xmx60m -XX:+PrintGC
				c. 这个选项只会显示总的 GC 堆的变化，如下：
					[GC (Allocation Failure)  15282K->14214K(58880K), 0.0023994 secs]
					[GC (Allocation Failure)  29514K->29496K(58880K), 0.0030953 secs]
					[Full GC (Ergonomics)  29496K->29133K(58880K), 0.0060116 secs]
					[Full GC (Ergonomics)  44449K->44036K(58880K), 0.0029702 secs]
				d. 参数解析
					(1) GC、Full GC：GC 的类型，GC 只在新生代进行，Full GC 包括永生机、新生代和老年代
					(2) Allocation Failure：GC 发生的原因
					(3) 15282K->14214K：堆在 GC 前的大小和GC后的大小
					(4) 58880K：现在的堆大小
					(5) 0.0023994 secs：GC 持续的时间
			C. 详细日志分析步骤
				a. 打开 GC 日志：-Xms60m -Xmx60m -verbose:gc -XX:+PrintGCDetails
				b. 输出信息如下：
					[GC (Allocation Failure) [PSYoungGen: 15282K->2528K(17920K)] 15282K->14126K(58880K), 0.0032821 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
					[GC (Allocation Failure) [PSYoungGen: 17828K->2540K(17920K)] 29426K->29448K(58880K), 0.0035418 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
					[Full GC (Ergonomics) [PSYoungGen: 2540K->0K(17920K)] [ParOldGen: 26908K->29133K(40960K)] 29448K->29133K(58880K), [Metaspace: 3295K->3295K(10567
					68K)], 0.0068745 secs] [Times: user=0.01 sys=0.00, real=0.02 secs]
					[Full GC (Ergonomics) [PSYoungGen: 15316K->3500K(17920K)] [ParOldGen: 29133K->40536K(40960K)] 44449K->44036K(58880K), [Metaspace: 3295K->3295K(1
					056768K)], 0.0037301 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
					Heap
					 PSYoungGen      total 17920K, used 10353K [0x00000000fec00000, 0x0000000100000000, 0x0000000100000000)
					  eden space 15360K, 67% used [0x00000000fec00000,0x00000000ff61c500,0x00000000ffb00000)
					  from space 2560K, 0% used [0x00000000ffd80000,0x00000000ffd80000,0x0000000100000000)
					  to   space 2560K, 0% used [0x00000000ffb00000,0x00000000ffb00000,0x00000000ffd80000)
					 ParOldGen       total 40960K, used 40536K [0x00000000fc400000, 0x00000000fec00000, 0x00000000fec00000)
					  object space 40960K, 98% used [0x00000000fc400000,0x00000000feb96080,0x00000000fec00000)
					 Metaspace       used 3302K, capacity 4496K, committed 4864K, reserved 1056768K
					  class space    used 359K, capacity 388K, committed 512K, reserved 1048576K
				c. 参数解析
					(1) GC、Full GC：GC 的类型
					(2) Allocation Failure：GC 原因
					(3) PSYoungGen：使用了 Parallel Scavenge 并行垃圾收集器的新生代 GC 前后大小的变化
					(4) ParOldGen：使用了 Parallel Old 并行垃圾收集器的老年代 GC 前后大小的变化
					(5) Metaspace：元数据区 GC 前后大小的变化，JDK8 这引入了元数据以替代永久代
					(6) 0.02 secs：GC 花费的时间
					(7) Times: user：指的是垃圾收集器花费的所以 CPU 时间，sys：花费在等待系统调度或系统事件的事件，real：GC 从开始到结束的时间，包括其他进程占用时间
					片的实际时间
			D. 带上日期和时间：-Xms60m -Xmx60m -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps
			E. 如果想把 GC 日志存到文件，使用参数“-Xloggc:/path/to/gc.log”
			F. 日志补充说明：
				a. “[GC”和“[Full GC”说明了这次垃圾收集的停顿类型，如果有“Full”则说明 GC 发生了“Stop-the-World”
				b. 使用 Serial 收集器在新生代的名字是 Default New Generation，因此显示的是“[DefNew”
				c. 使用 ParNew 收集器在新生代的名字是 “[ParNew”，意思是“Parallel New Generation”
				d. 使用 Parallel Scavenge 收集器在新生代的名字是“[PSYoungGen”
				e. 老年代的收集和新生代道理一样，名字也是收集器决定的
				f. 使用 G1 收集器的话，会显示“garbage-first heap”
			G. 日志补充说明
				a. Allocation Failure：表明本次引用 GC 的原因是因为在年轻代没有足够的空间能够存储新的数据了
				b. [PSYoungGen: 15282K->2528K(17920K)] 15282K->14126K(58880K)
					(1) 中括号内：GC 回收前年轻代大小，回收后大小，（年轻代总大小）
					(2) 括号外：GC 回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）
				c. user 代表用户态回收耗时，sys 内核态回收耗时，rea 实际耗时。由于多核的原因，时间总和可能会超过 real 时间
		② Minor GC 日志
						+--------------------------+		+---------------------------+				+--------------+					+------------------+
						| YoungGC 前新生代内存占用 |		| YoungGC 前 JVM 堆内存占用 |				| YoungGC 耗时 |					| YoungGC 系统耗时 |
						+--------------------------+		+---------------------------+				+--------------+					+------------------+
				+---------+			|				+--------------+	|			  +--------------+	   	   |		  +------------------+		 |		+------------------+
				| GC 类型 |			|				| 新生代总大小 |	|			  | JVM 堆总大小 |	   	   |		  | YoungGC 用户耗时 |		 |		| YoungGC 实际耗时 |
				+---------+			|				+--------------+	|			  +--------------+	   	   |		  +------------------+		 |		+------------------+
					 ↓				↓					   ↓			↓				 	   ↓			   ↓					↓				 ↓				↓
			+-----------------+ +--------+ +-------+ +-----------+ +--------+ +--------+ +----------+ +-----------------+ +-------------------+ +----------+ +-----------------+
			| [GC [PSYoungGen | | 15282K | | 2528K | | (17920K)] | | 15282K | | 14126K | | (58880K) | | 0.0032821 secs] | | [Times: user=0.00 | | sys=0.00 | | real=0.00 secs] |
			+-----------------+ +--------+ +-------+ +-----------+ +--------+ +--------+ +----------+ +-----------------+ +-------------------+ +----------+ +-----------------+
											   ↑								   ↑
								  +--------------------------+		 +---------------------------+
								  | YoungGC 后新生代内存占用 | 		 | YoungGC 后 JVM 堆内存占用 |				   
								  +--------------------------+		 +---------------------------+
			[GC (Allocation Failure) [PSYoungGen: 15282K->2528K(17920K)] 15282K->14126K(58880K), 0.0032821 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
		③ Full GC 日志
												+------------------------+				 +--------+									+-----------------+
												| GC 前 Young 区内存占用 |				 | Old 区 |									| GC 前堆内存占用 |
												+------------------------+				 +--------+									+-----------------+
				   +---------+			+----------+	   |		 +----------------+		 |			  +----------------------+			  |	+-----------------+
				   | GC 类型 |			| Young 区 |	   |		 | Young 区总大小 |		 |			  | GC 后 Old 区内存占用 |			  |	| GC 后堆内存占用 |
				   +---------+			+----------+	   |		 +----------------+		 |			  +----------------------+			  |	+-----------------+
						↓					 ↓			   ↓				 ↓				 ↓						 ↓						  ↓			 ↓
			+-----------------------+ +--------------+ +-------+ +----+ +-----------+ +-------------+ +--------+ +--------+ +-----------+ +--------+ +--------+
			| [Full GC (Ergonomics) | | [PSYoungGen: | | 2540K | | 0K | | (17920K)] | | [ParOldGen: | | 26908K | | 29133K | | (40960K)] | | 29448K | | 29133K | 
			+-----------------------+ +--------------+ +-------+ +----+ +-----------+ +-------------+ +--------+ +--------+ +-----------+ +--------+ +--------+
																	↑									  ↑						 ↑
														+------------------------+				+----------------------+  +--------------+
														| GC 后 Young 区内存占用 |				| GC 前 Old 区内存占用 |  | Old 区总大小 |
														+------------------------+				+----------------------+  +--------------+
										  +---------------+		  +------------+
										  | GC 前内存占用 |		  | 元空间大小 |
										  +---------------+		  +------------+
			  +--------------+ +--------+		  | +---------------+	 |				+---------+		  +----------+		 +----------+	  +----------+
			  | JVM 堆总大小 | | 元空间 | 		  |	| GC 前内存占用 |	 |				| GC 耗时 |		  | 用户时间 |		 | 系统时间 |	  | 实际时间 |
			  +--------------+ +--------+		  |	+---------------+	 |				+---------+		  +----------+		 +----------+	  +----------+
					  ↓				↓			  ↓			↓			 ↓					↓					↓				   ↓			   ↓
				+-----------+ +-------------+ +-------+ +-------+ +--------------+ +-----------------+ +-------------------+ +-----------+ +-----------------+
				| (58880K), | | [Metaspace: | | 3295K | | 3295K | | (1056768K)], | | 0.0068745 secs] | | [Times: user=0.01 | | sys=0.00, | | real=0.02 secs] |
				+-----------+ +-------------+ +-------+ +-------+ +--------------+ +-----------------+ +-------------------+ +-----------+ +-----------------+
			[Full GC (Ergonomics) [PSYoungGen: 2540K->0K(17920K)] [ParOldGen: 26908K->29133K(40960K)] 29448K->29133K(58880K), [Metaspace: 3295K->3295K(10567
				68K)], 0.0068745 secs] [Times: user=0.01 sys=0.00, real=0.02 secs]
		④ 举例说明日志中堆空间数据说明
			A. 代码
				public class GCLogTest {

					private static final int _1MB = 1024 * 1024;

					public static void testAllocation() {
						byte[] allocation1, allocation2, allocation3, allocation4;
						allocation1 = new byte[2 * _1MB];
						allocation2 = new byte[2 * _1MB];
						allocation3 = new byte[2 * _1MB];
						allocation4 = new byte[4 * _1MB];
					}

					public static void main(String[] args) {
						testAllocation();
					}
				}
			B. 参数设置：-Xms20m -Xmx20m -Xmn10m -verbose:gc -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+UseSerialGC
			C. JDK7 中的日志
				[GC[DefNew: 7645K->521K(9216K), 0.0036688 secs] 7645K->6665K(19456K), 0.0037082 secs] [Times: user=0.00 sys=0.02, real=0.00 secs] 
				Heap
				 def new generation   total 9216K（Eden 和 From 的空间总和）, used 4783K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)
				  eden space 8192K,  52%（大约 4MB 的空间，对应 allocation4） used [0x00000000f9a00000, 0x00000000f9e29738, 0x00000000fa200000)
				  from space 1024K,  50% used [0x00000000fa300000, 0x00000000fa382668, 0x00000000fa400000)
				  to   space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)
				 tenured generation   total 10240K, used 6144K（6MB 空间，对应allocation1、allocation2、allocation3） [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)
				   the space 10240K,  60% used [0x00000000fa400000, 0x00000000faa00030, 0x00000000faa00200, 0x00000000fae00000)
				 compacting perm gen  total 21248K, used 2937K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)
				   the space 21248K,  13% used [0x00000000fae00000, 0x00000000fb0de458, 0x00000000fb0de600, 0x00000000fc2c0000)
				No shared spaces configured.
				GC前：
							+-------------+-------------+-------------+-------------+
				Eden Space 	| allocation1 | allocation2 | allocation3 | 	free 	| <-------X-----+
				   8MB		| 	  2MB	  |	 	2MB		| 	  2MB	  | 	2MB  	|				|
							+-------------+-------------+-------------+-------------+				|
							+------+		  			+------+									|	  +-------------+
				From Space	| free |		  To Space	| free |									+---- | allocation4 |
				   1MB		| 1MB  |		  	1MB 	| 1MB  |									|	  | 	4MB		|
							+------+					+------+									|	  +-------------+
								↑																	|
								+----------------------------------X--------------------------------+
							+-------------------------------------------------------+
				Old Space	|							free						|
				   10MB		|							10MB						|
							+-------------------------------------------------------+
				GC 后：
							+----------------------------+--------------------------+
				Eden Space  | 			allocation4		 |			  free	  		|	
				   8MB	    |				4MB			 |			  4MB			|
							+----------------------------+--------------------------+
				   
				From Space	+------+		  			+------+	
				   1MB		| free |		  To Space	| free |
							| 1MB  |		  	1MB 	| 1MB  |
							+------+					+------+
							+-------------+-------------+-------------+-------------+
				Old Space	| allocation1 | allocation2 | allocation3 | 	free 	|
				  10MB		| 	  2MB	  |	 	2MB		| 	  2MB	  | 	2MB  	|
							+-------------+-------------+-------------+-------------+
			D. JDK8 中的日志
		⑤ GC 日志分析工具
			A. 可以用一些工具去分析这些 GC 日志。常用的日志分析工具有：GCViewer、GCEasy、GCHisto、GCLogViewer、Hpjmeter、garbagecat 等
			B. 代码：
			public class GCLogTest {

				public static void logTest() {
					List<byte[]> list = new ArrayList<>();

					for (int i = 0; i < 500; i++) {
						byte[] arr = new byte[1024 * 100];
						list.add(arr);
						try {
							Thread.sleep(50);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
				
				public static void main(String[] args) {
					logTest();
				}
			}
			C. 设置选项：-Xms60m -Xmx60m -XX:+PrintGCDetails -XX:SurvivorRatio=8 -Xloggc:./logs/gc.log
			D. 在当前工程新建 logs 目录
			E. 选用 GCEasy 进行分析，网址：https://gceasy.io/
	10. 垃圾回收器的新发展
		① 背景
			A. GC 仍然处于飞速发展之中，目前的默认选项 G1 GC 在不断的进行改进，很多原先认为的缺点，例如串行的 Full GC、Gard Table 扫描的低效等，都已经被大幅
			改进，例如：JDK 10 以后，Full GC 已经是并行运行的，在很多场景下，其表现还略优于 Parallel GC 的并行 Full GC 实现
			B. 即使是 Serial GC，虽然比较古老，但是简单的设计实现未必就是过时的，它本身的开销，不管是 GC 相关数据结构的开销，还是线程的开销，都是非常小的，
			所以随着云计算的兴起，在 Serverless 等新的应用场景，Serial GC 找到了新的舞台
			C. 比较不幸的是 CMS GC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在 JDK9 中已经被标记为废弃，并在 JDK14 版本中移除
		② JDK11 新特性
			A. JEP318，Epsilon：A No-Op Garbage Collector（Epsilon 垃圾回收器，No-Op（无操作）回收器）
			B. JEP333，ZGC：A Scalable Low-Latency Garbage Collector（Experimental）（ZGC：可伸缩的延迟垃圾回收器，处于实验性阶段）
		③ Open JDK12 的 Shenandoah GC
			A. 现在 G1 回收器已经成为默认回收器好几年了
			B. 现在引入了两个新的收集器：ZGC（JDK11 出现）和 Shenandoah（Open JDK12，主打特点：低停顿时间）
			C. Shenandoah，无疑是众多 GC 中最孤独的一个。是第一款不由 Oracle 公司团队领导开发的 HotSpot 垃圾收集器。不可避免的受官方的排挤。比如号称 OpenJDK
			和 OracleJDK没有区别的 Oracle 公司仍拒绝在 OracleJDK12 中支持 Shenandoah。
			D. Shenandoah 垃圾收集器最初由 RedHat 进行的一项垃圾收集器研究项目 Pauseless GC 的实现，旨在针对 JVM 上的内存回收实现低停顿的需求。在 2014 年贡献
			给 OpenJDK
			E. Red Hat 研发 Shenandoah 团队对外宣称，Shenandoah 垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置成多大，99.9% 的目标都可以把垃圾收集的
			停顿时间限制在十毫秒内。不过实际使用性能将取决于实际工作堆的大小和工作负载
			F. Shenandoah 开发团队在实际应用中的测试数据
				+-------------------+----------+--------+----------+----------+
				| 收集器			| 运行时间 | 总停顿	| 最大停顿 | 平均停顿 |
				+-------------------+----------+--------+----------+----------+
				| Shenandoah		| 387.602s | 320ms	| 89.79ms  | 53.01ms  |
				+-------------------+----------+--------+----------+----------+
				| G1				| 312.052s | 11.7s	| 1.24s	   | 450.12ms |
				+-------------------+----------+--------+----------+----------+
				| CMS				| 285.264s | 12.78s | 4.39s	   | 852.26ms |
				+-------------------+----------+--------+----------+----------+
				| Parallel Scavenge | 260.092s | 6.59s	| 3.04s	   | 823.75ms |
				+-------------------+----------+--------+----------+----------+
				这是 RedHat 在 2016 年发表的论文数据，测试内容是使用 ES 对 200GB 的维基百科数据进行索引，从结果上看
					a. 停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标
					b. 而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的

			G. 总结：
				a. Shenandoah GC 的弱项：高运行负担下的吞吐量下降
				b. Shenandoah GC 的强项：低延迟时间
		④ ZGC
			A. 背景
				a. ZGC 与 Shenandoah 目标高度相似，在尽可能对吞吐量影响下影响不大的前提下，实现在任意堆内存大小都可以把垃圾收集的停顿时间限制在十毫秒以内的低
				延迟
				b. 《深入理解 Java 虚拟机》一书中这样定义 ZGC：ZGC 收集器是一款基于 Region 内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映
				射等技术来实现可并发的标记-压缩算法，以低延迟为首要目标的一款垃圾收集器
				c. ZGC 的工作过程可以分成 4 个阶段：并发标记-并发预备重分配-并发重分配-并发重映射等
				d. ZGC 几乎在所有地方并发执行，除了初始标记是 STW。所以停顿时间几乎就消耗在初始标记上，这部分的实际时间是非常少的
			B. 虽然 ZGC 还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用“令人震惊、革命性”形容
			C. 未来将在服务端、大内存、低延迟应用的首选垃圾收集器
			D. 《新一代垃圾回收器 ZGC 设计与实现》
			E. JDK14 新特性
				a. JDK14 之前，ZGC 仅 Linux 才支持
				b. 尽管许多使用 ZGC 的用户都使用类 Linux 的环境，但在 Windows 和 macOS 上，人们也需要 ZGC 进行开发部署和测试。许多桌面应用也可以从 ZGC 中收益。
				因此，ZGC 特性被移植到了 Windows 和 macOS 上
			F. 现在 mac 或 Windows 上也能使用 ZGC 了，示例如下：“-XX:+UnlockExperimentalVMOptions -XX:+UseZGC”
		⑤ 其他垃圾回收器：
			a. AliGC：AliGC 是阿里巴巴 JVM 团队基于 G1 算法，面向大堆（Large Heap）应用场景
			b. 其他厂商也提供了各种独具一格的 GC 实现，例如比较有名的低延迟 GC，Zing（https://www.infoq.com/articles/azul_gc_in_detail）。





