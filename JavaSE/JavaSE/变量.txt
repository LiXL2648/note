关键字：
	1. 被Java语言所赋予特定含义的单词
	2. 关键字的特点是全部小写
	3. 关键字在特殊的编辑器或者集成开发环境当中有特殊的颜色标识
	   注：goto和const作为关键字保留
标识符：
	1. 就是给类、接口、变量取名字时候用的单词（自定义标识符）
	2. 组成规则：字下美人数骆驼
	   A. 字母
	   B. 下划线
	   C. 美元符号$
	   D. 人民币符号￥
	   E. 数组
	   D. 驼峰命名法
	3. 注意事项：
	   A. 不能以数字进行开头
	   B. 不能是java中的关键字
	   C. 严格区分大小写
	4. 标识符的命名规则
	   A. 类或者接口的命名规则：
	       单个单词：首字母大写，其余小写
		   多个单词：每个单词的首字母大写，其余小写
	   B. 方法或者变量的命名
	       单个单词：全部小写
		   多个单词：从第二个单词开始，首字母大写，其余小写
	   C. 常量
	      单个单词：全部大写
		  多个单词：全部大写，每个单词之间用下划线区分
	   D. 包的命名
	      每“.”一次，表示一层文件目录包名都要小写
注释概念：用于解释说明程序的文字
          java中注释分类格式：
			  单行注释：//注释文字
			  多行注释：/*注释文字*/
			  文档注释：/** 注释文字*/
		  注释需要注意的细节：
		  1. 单行注释允许嵌套注释
		  2. 多行注释，不能继续包含多行注释
		  3. 多行注释一般在代码的上面，单行注释一半在代码的右边


常量：是在程序的执行过程中，其值不能发生任何改变的量，叫做常量
      常量的分类：
	             字面值常量：直接写出来的数据
				 自定义常量：final修饰
				 
				 字面值常量变量：
				                整数常量（定点整数）：所有整数
								小数常量（浮点数）：所有小数
								字符常量：用单引号包裹起来的内容
								字符串常量：用双引号包裹起来的内容
								布尔常量：true、false
								空常量
                                问题1：请问字符常量能否储存一个中文字符，为什么？
								       可以，因为Java采用的编码集是Unicode（国际通过编集），而Unicode的编码集其实也是Ascll的增强
									   而对于Ascll对于中文来说，一个中文是两个字节，而两个字节恰好是一个字符
								问题2: 请问字符a+1能不能使用，如果能使用，结果是多少？
								注：   字符串如果使用“+”进行拼接，如果第一个是字符串，那么后面无论是什么，实现的都是字符串拼接；
								       如果第一个是字符后面加上数字，那么先将字符转化为Ascll，在进行相加
									   如果出现括号，那么优先计算括号里面。
数据类型：java是一种强类型语言，针对每一种不同的类型提供了明确具体的数据类型
          数据类型的分类：
		       A. 基本数据类型
			   B. 引用数据类型
			   基本数据类型的分类（4类8种）：
			       A. 整数型      占用字节数        取值范围
				       byte        1   8bit         -128~127
					   short       2   16bit                
					   int         4   32bit                
					   long        8   64bit                
				   B. 浮点型
				       float       4   32bit                
					   double      8   64bit 
				   C. 字符类型
				       char        2   16bit
				   D. boolean型    1   8bit          true false
				声明变量：数据类型 变量名 = 初始化值；
				注：浮点型在没有任何标识的情况下默认是double，声明为float类型需在初始化值后面加f或F
				    整数型在没有任何标识的情况下默认是int类型，声明为long型时需要在初始值后面加l或L
使用变量需要注意的细节问题：
1. 作用域（发挥作用的范围）
     变量定义在哪一集的括号内，他生效的范围也仅只是这个范围，同一个作用域中不能出现同名的变量
2. 初始值的问题
     没有初始值的变量是不能直接使用的，只要在使用前给它赋值即可
3. 在同一行定义多个变量的问题
     不利于代码的阅读，同时也对程序的扩展和改变极大地限制
数据类型的转换
     隐式类型转换（自动类型转换）：数据类型从取值范围小到大锝转化，不需要干预
	   1. byte,short,char->int->long->float->double
	   2. byte,short,char不参与转化，一旦发生运行，自动转化为int类型 
	  强制类型转化：取值范围从大到小需要进行强制类型转换
	                格式：目标数据类型 变量名 = （目标数据类型）需要转换的数据
java中进制转换：
    二进制：以0b开头
	八进制：以0开头
	十进制：默认
	十六进制：以0x开头
				        
运算符：就是对常量和变量进行相关操作的一种符号
        分类：
	        算数运算符，赋值运算符，比较运算符，逻辑运算符，三目运算符	
				算数运算符：+、-、*、/、%、++、--
				            ++、--的运用：
									   单独使用：在操作数的前面或者后面效果都一样，都是自增或者自减
									   参与运算：放在操作数后面，是先参与运算，后自增或者自减
												 放在操作数前面，是先自增或者自减，后参与运算
				
				赋值运算符：=把右边的数据赋值给左边的变量
				            扩展运算符：+=、-=、*=、/=
							            
							            注：扩展运算符其实本身就隐含了强制类型转换
			    比较运算符：比较运算符的结果都是boolean型，也就是要么是true，要么是false
				逻辑运算符：&&、||、^、！、&、|
					        逻辑运算符只能用于连接布尔类型的表达式或者值
							表达式：就是利用java运算符连接起来的一个式子
								&逻辑与：并且的意思，有false结果就是false
								|逻辑或：或者的意思，有true结果就是true
								^逻辑异或：相同就是false，不同就是true
								！逻辑非：取反
								&&短路与：
								||短路或：
									      &&与&、||与|的区别：
										       A. 最终结果一致
											   B. &&具备短路的效果，如果左边是false，那么右边不在执行（结果肯定）
											   C. ||同理
				三目运算符：表达式 ? 表达式1 : 表达式2
							注：表达式是一个布尔型，如果结果是true，则执行（返回）表达式1，反之执行（返回）表达式2
							    使用三目运算符时两个表示式必须是相同数据类型，相兼容的数据即使类型不一样，可以进行强制类型转换
								表达式无论是多复杂，必须要有明确的结果

键盘录入：为了在程序开发的过程中，数据更加灵活，使用键盘录入
          如何实现键盘录入？
		       ①导入包：import java.unit.Scanner
			   ②创建键盘录入对象：Scanner sc = new Scnner(System.in)
			   ③5通过对象来获取具体的键盘的输入值（扫描器）：int i= sc.nextInt();
选择结构（分支结构）：if/switch
           if语句的格式：1.if(最终结构为布尔类型的表达式){
						    语句体
						   }
							 执行流程:
									  先计算表达式
									  结果为true，则执行语句体
									  结果为false，则不执行语句体
							 注：表达式的结果一定是布尔类型
								 如果if语句只有一条语句体，则可以省略花括号
                       	 2. if(最终结构为布尔类型的表达式){
						       语句体1
						    }else{
							   语句体1
							}
						    区别：三元运算符能实现情况的if语句都能实现，而if语句能实现的情况三元运算符不一定能实现
							      比如：三元运算符必须返回一个特定的值，不能实现任何语句，而if语句能实现除了定义类和方法，其余都能实现
						 3. if(表达式1){
						       语句体1
						    }else if(表达式2){
							   语句体2
						    }else{
							   语句体3
						    }		
							 执行流程：
									   先计算表达式1
									   如果结果为true，则执行语句体1并结束if语句
									   如果结果为false，则计算表达式2...
					  switch 语句的格式：
					         switch(表达式){
								case 常量1：
									语句体1;
									break;
								case 常量2:
									语句体2;
									break;
								case...
								defalut:
									语句n+1;
									break;
							 }
							 格式解释：
								switch：表示的是一个switch的分支结构
								表达式：这个地方的表达式是有限定的，只能是byte/short/int/char
												    JDK5以后的版本支持枚举
												    JDK7以后的版本支持String
								case：后面的常量值需要跟表达式的最终结果进行比较
							        语句体：就是需要被执行的代码
								break：表示结束的意思，一旦执行break，整个switch语句立即结束
								default：当上面的所有case的值都不匹配的时候，执行default下面的语句体							
							 注：case后面的值必须是常量，不能是变量，同一个switch当中不能出现相同的case值
							     break可以省略，但是会造成结果的穿透
								 default可以省略，但是不能给用户友好的提示
								 default可以放在任意位置，但是一般放在最后面，如果放在任意位置，那么必须加break;
				      if和switch区别：
					                 if语句：针对的是只能是一个布尔类型的计算
									         if语句针对的是一个范围内的判断
											 
									 switch语句：
									          针对的是一个常量的计算
											  针对的是多个范围内的判断
									 优先使用的情况：如果判断和计算的结果是事先就已经明确和固定的，则选择switch
						                             如果判断和计算的结果是不明确的，则选择if
循环语句：for循环、wlile循环、do...wlile循环
          for循环格式：for(初始化条件;判断条件语句;控制条件语句){
				          循环语句;
		               }
		               执行流程：①执行初始化条件
								 ②执行判断条件语句，看其返回的结果是true还是false
								   如果是true，则继续执行循环体，如果是false，则结束循环体
								 ③执行循环体语句
								 ④执行控制语句
								 ⑤继续执行②步骤
					   注：①判断条件语句，结果必须是布尔语句
					       ②如何循环体里面的语句只有一句，可以省略花括号
		   while循环语句的格式：while(判断条件语句){
									循环语句体;
								}
			                    拓展格式：
								初始化语句
								while(条件判断语句){
									循环体语句;
									控制条件语句;
								}
								while循环与for循环的区别：
								如果在循环结束之后继续使用条件控制的变量，则用while循环，否则使用for循环
								for循环可以单独将变量单独提出来，但是涉及到使用率的问题。for循环结束后，在for循环中定义的变量
								   会及时从内存消失
								如果是一个非常明确的范围的数据，则使用for循环
								如果你的数据范围不明确，则使用while循环。
		    do while 循环条件语句格式：do{
											循环体语句;
						 			   }while(判断条件语句);
						     扩展语句：初始化语句;
								       do{
											循环体语句;
											控制条件语句;
									   }while(判断条件语句);
								 区别：do..while循环保证至少执行一次
								       而for循环与while循环必须先判断条件是否成立，然后决定是否在执行语句体
跳转控制语句：break结束、continue中断、return返回
              break：结束循环的意思
                     应用场景：
						      ①switch
							  ②所有循环
					 注：除此之外，均无效
						 同一个作用域中，break后面不能存在任何代码
					 如何使用：
				         跳出单层循环：直接break
						 跳出多层循环：①在循环外面定义一个开关标记，根据判断开关标记是否结束循环
						               ②使用循环标签，定义如下：标签一:for (int i = 0; i < n; i++) {
																    标签二:for (int j = 0; j < n; j++) {
																	            break 标签;
																           }
																        }
			  continue：中断循环，后面继续			   
			  return：		   
						   
						   
