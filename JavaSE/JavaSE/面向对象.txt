封装与隐蔽：
问题：当创建类的对象后，如果直接通过“对象属性”的方式对相应的对象属性赋值的话，可能会出现
      不满足实际情况的意外，我们考虑不让对象直接作用于属性，而是通过“对象方法”的形式
      来控制对象对属性的访问，实际情况中，对属性的要求就可以通过方法来体现
落地法则：
      （封装性的思想）1.将类的属性私有化；2.提供公共的方法（setter和getter）来实现

继承性：
1. 为什么要设计继承性
    减少代码的冗余

2. 通过“A extends B”实现类的继承 子类A,父类（基类 SuperClass）B

3. 子类继承父类以后，父类中声明的属性、方法，子类可以获取到
	明确：当父类中有私有的属性或者方法时，子类同样可以获取到，只是由于封装性的
	      设计，子类不可以直接调用
        子类除了通过继承获取父类的结构之外，还可以定义自己的特有属性
	extends，子类是对父类功能的扩展，而不是父类的子集。

4. Java的继承性永远只支持单继承！一个子类只可以继承一个父类，一个父类可以被多个子类
   继承
5. 字父类是相对而言的

this：
1. 使用在类中，可以采用修饰属性，方法，构造器
2. 表示当前的对象或者正在创建的对象
3. 当形参与成员变量重名时，如果在方法内部需要使用成员变量，必须添加this来表明改变量
   是类成员
4. 在任意方法内，如果使用当前类的成员变量或者成员方法可以在前面添加this，增强程序的阅读性
5. 在构造器中使用“this(形式参数)”显示的调用本类中重载的其他构造器
   5.1. 要求"this(形式参数)"要声明在构造器的首行
   5.2. 类中存在若n个构造器，那么最多有n-1个构造器使用了this

package/import
package：声明源文件所在的包，写在程序的第一行
	 每“.”一次，表示一层文件目录
	 包名都要小写
import：
	1. 显示导入指定包下的类或者接口
	2. 写在声明包的声明和源文件的中间
	3. 如果需要引入多个类或者接口，那么就并列写
	4. 如果导入的类是java.lang包下的，如system String Math等，就不需要显示声明
	5. 理解“*”的概念，比如“java.util.*”
	6. 如何处理同名类的导入，如在util和sql包下同时存在的Date类
	7. import static 表示导入指定类的static的属性或者方法
	8. 导入java.lang.*只能导入lang包下的所有接口或者类，不能导入lang的子包下类或者接口

super：可以用来修饰属性、方法、构造器
       1. 当子类与父类中有同名的属性时，可以通过“super.属性”显示的调用父类中声明的属性
       若调用子类的同名属性“this.属性”
       2. 当子类重写父类的方法后。在子类中若想显示的调用父类声明的方法时可通过“super.方法”
       3. super修饰构造器，通过在子类中使用“super(形参列表)”来显示的调用父类中指定的构造器
          1）在构造器内部，“super(形参列表)”必须声明在首行
	  2） 在构造器内部，“this(形参列表)”或者“super(形参列表)”只能出现一次
	  3）在构造器中，不显示的调用“this(形参列表)”或者“super(形参列表)”其中一个，默认
	     调用父类空参构造器
	建议：设计一个类时，尽量提供一个空参构造器。

方法的重写（override overwrite）和重载（overload）
  【面试题】方法的重载和重写的区别
   重载：“两同一不同”，同一个类、同一个方法名、不同形参类型。注：方法的重载与方法的返回值无关
          构造器可以重载
   重写：（在继承的基础之上，子类在获取了父类的结构后，可以对父类中同名的方法进行“重构”）
          方法的返回值、方法名、形参列表相同；权限修饰符不小于父类的同名方法名；子类方法的异常不大于
	  父类的同名方法；两个方法要同为static或同为非static。 

子类对象实例化全过程：

面向对象的特征三：多态性
1. 多态性指的是什么？多态性，可以理解为一个事物的多种表现形式
   1）方法的重载和重写  2）子类对象的多态性
2. 子类对象的多态性使用的前提，①要有类的继承；②要有子类对父类方法的重写
3. 程序的运行分为编译状态和运行状态
	对于多态性来说，编译时，“看左边”，将此引用变量看做是
	运行时，“看右边”，关注于真正对象的实体，子类的对象，执行的是子类重写父类重写的方法
4. 多态性并不适用于属性
注： ①子类对象的多态性，父类的引用指向子类的对象
     ②虚拟方法的调用：通过父类的引用指向子类的对象实体，当调用方法时，实际执行的是子类重写父类的方法
     ③子类对象的多态性实质上是向上转型，要实现向下转型必须使用强转符；()


