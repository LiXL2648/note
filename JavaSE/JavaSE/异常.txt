一. Java异常：
         1. 异常：在Java语言中，将程序执行中发生的不正常情况称为“异常”。（开发过程中的语法错误和逻辑错误不是异常）
         2. java程序在执行过程中所发生的异常可以分为两类：
               A. error：java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。一般不编写针对性的代码进行处理
                         比如：栈内存溢出错误、堆空间溢出错误
               B. Exception：其他因编程错误或者偶然的外在因素导致一般性问题，可以使用针对性代码进行处理。例如
                             ①空指针访问
                             ②试图读取不存在的文件
                             ③网络连接中断
         3. 异常的解决：A. 对于这些错误，一般有两种解决方法：一是遇到错误就终止程序的运行。另一种方法是由程序员在编写程序时，就考虑
                           到错误的检测、错误信息的提示，以及错误的处理
                        B. 捕获错误最理想的是在编译期间，但有的错误只在运行时才会发生。比如：除数为0，数组下标越界等
                           分类：①编译时异常：在编译时出现的异常（执行javac.exe命令时，出现异常）
                                 ②运行时异常：在运行时出现的异常（执行java.exe命令时，出现异常）
                        C. 常见的运行时异常：
                                 ①数组下标越界异常：ArrayIndexOutOfBoundsException
                                 ②算数异常：ArithmeticException
                                 ③类型转换异常：ClassCastException
                                 ④空指针异常：NullPointException
                                 ⑤输入不匹配异常：InputMismatchException
                        D. 常见的编译时异常：
         4. 当执行一个程序时，如果出现异常，则往下的程序将不再执行
二. java异常处理：java采用异常处理机制，将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简介，并易于维护
         1. java提供的是异常处理的抓抛模型
		A. “抛”：当我们执行代码时，一旦出现异常，就会在异常的代码出生成一个对应的异常类型对象，并将此对象抛出
                           ①一旦抛出此异常对象，那么程序将终止执行
                           ② 此异常类的对象抛给方法的调用者
			   ③抛出的方式有两种：自动抛出和手动抛出	
                B. “抓”：抓住上一步抛出来的异常类对象。如何抓？即为异常处理的放式
                           java提供了两种方式用来处理一个异常类的对象
                           处理方式一：try{
                                           //可能出现异常的代码
                                       }catch(Exception e1){
                                           //处理的方式1
                                       }catch(Exception e2){
                                           //处理的方式2
                                       }finally{
                                           //一定要执行的代码
                                       }
                                       注：①try内声明的变量，类似于局部变量，出了try语句，就不能被使用
                                           ②finally是可选的
                                           ③catch语句内部是对异常对象的处理：e.printStackTrace()，e.getMessage();
                                           ④可以有多个catch语句，try中抛出的异常类对象从上往下去匹配catch中的异常类的类型
                                                  一旦满足就执行catch中的代码，而且不在执行其余的catch语句
                                           ⑤如果异常处理了，则其后的代码可继续执行
                                           ⑥若多个catch异常类型是“并列”关系，则谁上谁下都可以
                                           ⑦若多个catch异常类型是“包含”关系，须将子类放在父类的上面，进行处理6
					   ⑧finally中存放的是一定是会被执行的代码，不过try、catch语句中是否有运行时异常，或者有return语句
				  	   ⑨try-catch语句可以嵌套
                注：对于运行时异常来说，可以不显式地进行处理，对于编译时异常来说，必须进行显式进行处理。

         2. java程序执行过程中如果出现异常，会产生一个异常类对象，该异常对象将被提交给java运行时系统，这个过程称为抛出异常
         3. 异常对象的生成
                A. 有虚拟机自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果当前代码中没有找到相应的护理程序，就会在后台
                   自动创建一个对应异常的实例对象并抛出--自动抛出
                B. 由开发人员手动创建：Exception exception = new ClassCastException();--创建好的异常对象不抛出对程序没有任何影响
                   和普通对象一样
三、声明抛出异常
	1. 声明抛出异常是java中处理异常的第二种方式
		A. 如果一个方法（中的语句体执行是）可能生成某种异常，但是并不能明确如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将
		   不对这些异常进行处理，而由该方法的调用者负责处理
                B. 在方法声明中用throws语句可以声明抛出异常的列表。throws后面的异常类型可以是方法中产生的异常类型，也可以它的父类
        2. 声明抛出异常举例：
                public void readFile(String file) throws FileNotFoundException{
		     //读该文件的操作可能产生FileNotFoundException类型的异常
		       FileInputStream files = new FileInputStream(file);
		}
		A. 在此方法内部出现异常的时候，会抛出一个异常类的对象，抛给方法的调用者
                B. 异常的对象可以逐层向上抛，直至main方法，当然可以在向上抛的过程中，使用try-catch语句
		C. 而当方法上的异常通过try-catch处理异常，方法的调用者无需再捕获抛出异常，而throws更多是逃避问题，将问题抛给调用者
四、总结
	1. java的异常处理，抓抛模型
		A. 抓，异常的处理，两种模型（try-catch-finally、throws+异常的类型）
                B. 一旦执行过程中，会给出一个异常类的对象，（自动抛出、手动抛出（throw + 异常类对象））
			注：异常类的对象可以是现有类的对象，也可以自定义异常类的对象
		C. 手动抛出异常：
			①手动抛出异常例子：throw new RuntimeException
			②抛出异常类型，若是RunTimeException，可以不显式处理
					若是Exception，必须要显示处理
五、自定义异常类
	1. 自定义的异常类继承现有的异常类
	2. 提供一个序列号，提供几个重载构造器
	3. 子类重写父类的方法，其抛出的异常类型只能是被重写方法的异常类或者其子类
		注：继承的父类如果是RuntimeException，则手动抛出异常则不需要进行处理。如果继承的父类是Exception，则手动抛出异常时需要对其进行处理

六、异常的小节及面试题：
	 进入方法A 制造异常 用方法的finally
public class TestExcepiom {
	static void methodA(){
		try {
			System.out.println("我是方法A");
			throw new RuntimeException("制造异常");
		} finally{
			System.out.println("用方法A的finally");
		}
	}
	static void methodB(){
		try{
			System.out.println("我是方法B");
			return;
		}finally{
			System.out.println("用方法B的finally");
		}
	}
	public static void main(String[] args) {
		try {
			methodA();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		methodB();
	}
}
流程：程序通过main方法进入，首先执行在try-catch下的methodA()方法，methodA()方法第一次打印出“我是方法A”，
      接着手动抛出异常，该方式与return相似，具有返回的效果，但由于finally是一定要执行的语句，因此第二次
      打印“用方法A的finally”，抛出一个异常被catch捕获，并通过e.getMessage接收并第三次打印“制造异常”，
      然后调用methodB()方法，methodB()方法首先第四次打印出“我是方法B”，接着返回，但是finally是一定要执
      行的代码，因此第五次打印“用方法B的finally”，最后程序执行完毕。












